[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nবাংলা ভাষায় আমার লেখা || My Blog in Benglali Language\n\n\n1 min\n\n\n\n\n\n\nWednesday, October 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Science & Machine Learning Basics\n\n\n9 min\n\n\n\nRafiq Islam\n\n\nFriday, September 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)\n\n\n8 min\n\n\n\nRafiq Islam\n\n\nThursday, September 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternship and Full Time Job Preparation Review\n\n\n1 min\n\n\n\nRafiq Islam\n\n\nTuesday, August 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to generate social share buttons\n\n\n2 min\n\n\n\nRafiq Islam\n\n\nWednesday, July 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome to my blog\n\n\n1 min\n\n\n\nRafiq Islam\n\n\nFriday, July 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMatrix multiplication: Let’s make it less expensive!\n\n\n6 min\n\n\n\nRafiq Islam\n\n\nMonday, July 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLU Factorization of a Full rank Matrix using Fortran\n\n\n26 min\n\n\n\nRafiq Islam\n\n\nTuesday, November 9, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModeling viral disease\n\n\n3 min\n\n\n\nRafiq Islam\n\n\nTuesday, February 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeneralized eigenvectors and eigenspaces\n\n\n2 min\n\n\n\nRafiq Islam\n\n\nMonday, January 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome Linear Algebra Proofs\n\n\n6 min\n\n\n\nRafiq Islam\n\n\nSunday, January 24, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMatrix Representation: Change of Basis\n\n\n3 min\n\n\n\nRafiq Islam\n\n\nThursday, January 21, 2021\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "dsandml/multiclass/index.html",
    "href": "dsandml/multiclass/index.html",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "",
    "text": "In machine learning, classification is one of the most common tasks, where the goal is to assign a label to an input from a set of possible categories. While binary classification, where there are only two labels (e.g., spam vs. not spam), is well understood, real-world problems often involve more than two classes—this is where multi-class classification comes into play. In this post, we’ll explore various techniques and algorithms used to solve multi-class classification problems effectively."
  },
  {
    "objectID": "dsandml/multiclass/index.html#intro",
    "href": "dsandml/multiclass/index.html#intro",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "",
    "text": "In machine learning, classification is one of the most common tasks, where the goal is to assign a label to an input from a set of possible categories. While binary classification, where there are only two labels (e.g., spam vs. not spam), is well understood, real-world problems often involve more than two classes—this is where multi-class classification comes into play. In this post, we’ll explore various techniques and algorithms used to solve multi-class classification problems effectively."
  },
  {
    "objectID": "dsandml/multiclass/index.html#what",
    "href": "dsandml/multiclass/index.html#what",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "What is Multi-class Classification?",
    "text": "What is Multi-class Classification?\n\nMulti-class classification involves assigning an input to one of several distinct classes. For instance, given an image of an animal, the task may be to classify it as either a dog, cat, horse, or bird. The key challenge here is to handle more than two classes, which introduces additional complexity compared to binary classification."
  },
  {
    "objectID": "dsandml/multiclass/index.html#key",
    "href": "dsandml/multiclass/index.html#key",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "Key Approaches to Multi-class Classification",
    "text": "Key Approaches to Multi-class Classification\nThere are two main ways of handling multi-class classification:\n\nNative Multi-class Algorithms: Some algorithms are inherently designed to work with multiple classes without any modifications.\nBinary to Multi-class Strategies: These approaches decompose the multi-class problem into multiple binary classification problems.\n\n\nLet’s consider the classic Iris dataset that contains three classes of iris species: setosa, versicolor, virginica. We will use this dataset to demonstrate different multi-class classification techniques in python.\n\n\nimport pandas as pd \nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport seaborn as sns \nimport matplotlib.pyplot as plt \n\n# set the background color\nsns.set(rc={'axes.facecolor': '#f4f4f4', 'figure.facecolor':'#f4f4f4'})\n  \n\niris = load_iris()\ndf = pd.DataFrame(data = iris.data, columns = iris.feature_names)\ndf['species'] = iris.target\ndf['species'] = df['species'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})\nprint(df.head())\nsns.pairplot(df, hue='species', height=1.8, aspect=0.99)\nplt.show()\n\n   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n0                5.1               3.5                1.4               0.2   \n1                4.9               3.0                1.4               0.2   \n2                4.7               3.2                1.3               0.2   \n3                4.6               3.1                1.5               0.2   \n4                5.0               3.6                1.4               0.2   \n\n  species  \n0  setosa  \n1  setosa  \n2  setosa  \n3  setosa  \n4  setosa  \n\n\n\n\n\n\n\n\n\n\nNative Multi-class Algorithms\nThese are algorithms that can directly handle multiple classes in their formulation:\na. Decision Trees (See more here)\n\nDecision Trees can naturally handle multi-class classification tasks. At each split, the tree decides on a rule that best separates the data into groups. The terminal nodes (leaves) represent the class predictions.\n\n\nAdvantages: Easy to interpret, no need for extensive pre-processing, and handles both categorical and numerical features.\nDisadvantages: Prone to overfitting and can produce unstable models if not carefully tuned.\n\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report \n\nX_train, X_test, y_train, y_test = train_test_split(\n    iris.data, \n    iris.target, \n    test_size=0.3,\n    random_state=123\n    )\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        18\n  versicolor       0.83      1.00      0.91        10\n   virginica       1.00      0.88      0.94        17\n\n    accuracy                           0.96        45\n   macro avg       0.94      0.96      0.95        45\nweighted avg       0.96      0.96      0.96        45\n\n\n\nb. Random Forests (See more here)\n\nRandom Forests are ensembles of decision trees and can also naturally handle multi-class classification. They aggregate the predictions from multiple trees to make a final classification decision.\n\n\nAdvantages: Higher accuracy and reduced overfitting compared to single decision trees.\nDisadvantages: Less interpretable than individual trees, and training can be computationally intensive.\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        18\n  versicolor       0.77      1.00      0.87        10\n   virginica       1.00      0.82      0.90        17\n\n    accuracy                           0.93        45\n   macro avg       0.92      0.94      0.92        45\nweighted avg       0.95      0.93      0.93        45\n\n\n\nc. Naive Bayes (See more here)\n\nNaive Bayes is a probabilistic classifier based on Bayes’ theorem, assuming that the features are independent. The algorithm calculates the probability of each class and predicts the one with the highest probability.\n\n\nAdvantages: Fast, simple, and works well for text classification.\nDisadvantages: Assumes feature independence, which might not hold in many real-world datasets.\n\n\nfrom sklearn.naive_bayes import MultinomialNB\n\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        18\n  versicolor       0.37      1.00      0.54        10\n   virginica       0.00      0.00      0.00        17\n\n    accuracy                           0.62        45\n   macro avg       0.46      0.67      0.51        45\nweighted avg       0.48      0.62      0.52        45\n\n\n\n/Users/macpc/Library/CloudStorage/OneDrive-FloridaStateUniversity/OnlineLearning/python_environments/pytorch-env/lib/python3.11/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/Users/macpc/Library/CloudStorage/OneDrive-FloridaStateUniversity/OnlineLearning/python_environments/pytorch-env/lib/python3.11/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/Users/macpc/Library/CloudStorage/OneDrive-FloridaStateUniversity/OnlineLearning/python_environments/pytorch-env/lib/python3.11/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\n\nd. K-Nearest Neighbors (KNN) (See more here)\n\nKNN is a non-parametric algorithm that classifies a data point based on the majority class of its k-nearest neighbors. It can handle multi-class problems by considering the most frequent class among the neighbors.\n\n\nAdvantages: Simple to implement, no training phase.\nDisadvantages: Slow at prediction time, sensitive to the choice of k and the distance metric.\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier(n_neighbors=5)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        18\n  versicolor       1.00      0.90      0.95        10\n   virginica       0.94      1.00      0.97        17\n\n    accuracy                           0.98        45\n   macro avg       0.98      0.97      0.97        45\nweighted avg       0.98      0.98      0.98        45\n\n\n\n\n\nBinary to Multi-class Strategies\nSome algorithms are inherently binary, but they can be adapted to handle multiple classes using strategies like:\na. One-vs-Rest (OvR)\n\nThis technique involves training one classifier per class. Each classifier is trained to distinguish one class from the rest (i.e., treat it as a binary classification problem). During prediction, the classifier that outputs the highest confidence score assigns the label.\n\n\nAdvantages: Simple and works well with many binary classifiers like logistic regression and support vector machines.\nDisadvantages: Can become inefficient when there are many classes, since it requires training one model per class.\n\nExample with Logistic Regression\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.multiclass import OneVsRestClassifier\n\nclf = OneVsRestClassifier(LogisticRegression())\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        18\n  versicolor       0.83      1.00      0.91        10\n   virginica       1.00      0.88      0.94        17\n\n    accuracy                           0.96        45\n   macro avg       0.94      0.96      0.95        45\nweighted avg       0.96      0.96      0.96        45\n\n\n\nb. One-vs-One (OvO)\n\nThis strategy involves training a binary classifier for every possible pair of classes. For a dataset with \\(n\\) classes, \\(\\frac{n(n-1)}{2}\\) classifiers are trained. The class with the most “votes” from the classifiers is the predicted label.\n\n\nAdvantages: Works well when there are fewer classes.\nDisadvantages: Computationally expensive for large class numbers due to the many classifiers needed.\n\nExample with support vector classifier\n\nfrom sklearn.multiclass import OneVsOneClassifier\nfrom sklearn.svm import SVC\n\nclf = OneVsOneClassifier(SVC())\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        18\n  versicolor       0.71      1.00      0.83        10\n   virginica       1.00      0.76      0.87        17\n\n    accuracy                           0.91        45\n   macro avg       0.90      0.92      0.90        45\nweighted avg       0.94      0.91      0.91        45\n\n\n\n\n3. Neural Networks for Multi-class Classification\na. Softmax Regression\n\nIn neural networks, multi-class classification is typically handled using the softmax function in the output layer. Softmax converts raw output scores (logits) into probabilities for each class, ensuring they sum to 1. The class with the highest probability is chosen as the predicted class.\n\n\nAdvantages: Can model complex non-linear relationships and works well with large datasets.\nDisadvantages: Requires more data and computational resources compared to simpler models.\n\n\nimport tensorflow as tf \nfrom tensorflow.keras.models import Sequential \nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import SGD\n\ninput_layer = Input(shape = (X_train.shape[1],))\n\nmodel = Sequential([\n    input_layer,\n    Dense(64, activation = 'relu'),\n    \n    Dense(64, activation = 'relu'),\n    \n    Dense(3, activation = 'softmax')\n])\n\noptimizer = SGD(learning_rate=0.001)\nmodel.compile(\n    optimizer = optimizer, \n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n    )\nmodel.fit(X_train, y_train, epochs = 50, batch_size = 10, verbose = 0)\ntest_loss, accuracy = model.evaluate(X_test, y_test)\nprint(f'Test Accuracy: {accuracy}')  \n\n1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 73ms/step - accuracy: 0.9688 - loss: 0.6508\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9748 - loss: 0.6497 \nTest Accuracy: 0.9777777791023254\n\n\nTraining and Validation loss\n\nX_train, X_val, y_train, y_val = train_test_split(\n    X_train, y_train, test_size=0.10, random_state=123,\n    stratify=y_train\n)\n\nhistory = model.fit(\n    X_train, y_train, epochs = 150, \n    batch_size = 10, verbose = 0,\n    validation_data = (X_val, y_val)\n    )\n\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(train_loss)+1)\nplt.plot(epochs, train_loss, 'b-', label = \"Training Loss\")\nplt.plot(epochs, val_loss, 'r-', label = \"Validation loss\")\nplt.title('Training and Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nb. Convolutional Neural Networks (CNNs)\nFor image classification tasks, CNNs are widely used. CNNs automatically learn spatial hierarchies of features, making them highly effective for tasks like object recognition in images.\n\nAdvantages: Superior performance on image data, able to capture spatial dependencies.\nDisadvantages: Require large amounts of labeled data and significant computational power for training."
  },
  {
    "objectID": "dsandml/multiclass/index.html#perf",
    "href": "dsandml/multiclass/index.html#perf",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "Performance Evaluation in Multi-class Classification",
    "text": "Performance Evaluation in Multi-class Classification\nEvaluating multi-class classification models requires more nuanced metrics than binary classification. Some common evaluation metrics include:\n\nAccuracy: The percentage of correctly classified instances.\nConfusion Matrix: A table showing the actual versus predicted classes for each class.\nPrecision, Recall, and F1-score: These can be extended to multiple classes by calculating them per class (micro, macro, or weighted averages).\nReceiver Operating Characteristic (ROC) and Area Under the Curve (AUC): These are less commonly used for multi-class problems, but can still be adapted using OvR schemes.\n\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(\n    cm, annot=True, fmt='d', cmap='Blues',\n    xticklabels=iris.target_names,\n    yticklabels=iris.target_names\n)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()"
  },
  {
    "objectID": "dsandml/multiclass/index.html#conclusion",
    "href": "dsandml/multiclass/index.html#conclusion",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "Conclusion",
    "text": "Conclusion\n\nMulti-class classification is a critical aspect of many real-world applications, from medical diagnosis to image recognition and beyond. By understanding the strengths and limitations of different algorithms and strategies, we can choose the best approach for the task at hand. Whether using native multi-class models like decision trees or adapting binary models with OvR or OvO strategies, it’s essential to carefully consider the nature of the data, the number of classes, and computational constraints when building the models."
  },
  {
    "objectID": "dsandml/multiclass/index.html#references",
    "href": "dsandml/multiclass/index.html#references",
    "title": "Classification: Techniques to handle multi-class classification problems",
    "section": "References",
    "text": "References\n\nScikit-learn Documentation:\nThe Python code snippets for decision trees, random forests, KNN, logistic regression, and support vector machines (SVM) are based on the Scikit-learn library.\n\nScikit-learn: https://scikit-learn.org/stable/supervised_learning.html\n\nIris Dataset:\nThe Iris dataset is a well-known dataset for classification tasks and is included in the UCI Machine Learning Repository:\n\nUCI Machine Learning Repository: https://archive.ics.uci.edu/ml/datasets/iris\n\nConfusion Matrix & Evaluation Metrics:\nFor metrics such as accuracy, precision, recall, F1-score, and confusion matrices, the Scikit-learn library offers comprehensive functions to evaluate multi-class classification models:\n\nScikit-learn metrics documentation: https://scikit-learn.org/stable/modules/model_evaluation.html\n\nSoftmax and Neural Networks:\nThe Python code for neural networks using TensorFlow/Keras employs the softmax function for multi-class classification.\n\nTensorFlow/Keras: https://www.tensorflow.org/\n\nIntroduction to Multi-class Classification:\nGeneral information about multi-class classification can be found in machine learning books and resources, such as “Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow” by Aurélien Géron:\n\nHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow on O’Reilly\n\n\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/dataengineering/index.html#introduction",
    "href": "dsandml/dataengineering/index.html#introduction",
    "title": "How do we treat categorical features for our data science project?",
    "section": "Introduction",
    "text": "Introduction\n\n Suppose we are working on a data science project and the data contains both contineous and categorical variables. For example, we want to build a predictive model for a life insurance company. The model will predict the annual company spending on individuals depending on their age, bmi, sex, smoking habit, number of children, and region in the US where the belong. So here, our target variable is a contineous variable and the feature variables contain both contineous and categorical variables.  To understand how important each feature is, there are many possible ways. For example, when we do the exploratory data analysis (EDA) we can do some plotting to see how each feature inteacts with the target variable, or maybe calculating correlations of the features and target variables. However, when the feature is contineous it is not a big issue to calculate the correlation matrix. But when the feature is categorical or ordinal, for example, in this predictive modeling case, how do we know if the number of children or smoking habit have impact on insurance charges? Plotting boxplot or countplot from the seaborn or any other library may help, give some primary idea. But how do we quantify the correlations?  Here comes the statistical method one-way Analysis of Variances (ANOVA) among many other alternatives. Machine libraries like scipy has built-in functions that can compute the ANOVA’s for each categorical feature. We will see the implementation of this at the end of this post. This blog post is about the simple explanation of the mathematics behind the ANOVA method."
  },
  {
    "objectID": "dsandml/dataengineering/index.html#anova",
    "href": "dsandml/dataengineering/index.html#anova",
    "title": "How do we treat categorical features for our data science project?",
    "section": "ANOVA",
    "text": "ANOVA\nThis is the 5 random sample data that we are talking about. We will use this data to explain the mathematical formulation of the model.\n\nimport pandas as pd\ndata = pd.read_csv('insurance.csv')\nprint(data.sample(5, random_state=111))\n\n      age   sex    bmi  children smoker     region     charges\n1000   30  male  22.99         2    yes  northwest  17361.7661\n53     36  male  34.43         0    yes  southeast  37742.5757\n432    42  male  26.90         0     no  southwest   5969.7230\n162    54  male  39.60         1     no  southwest  10450.5520\n1020   51  male  37.00         0     no  southwest   8798.5930\n\n\nWe will explain the method using the feature children.\n\nchild = data.children.value_counts().sort_index()\nc0=data[data['children']==0].charges.values.tolist()\nc1=data[data['children']==1].charges.values.tolist()\nc2=data[data['children']==2].charges.values.tolist()\nc3=data[data['children']==3].charges.values.tolist()\nc4=data[data['children']==4].charges.values.tolist()\nc5=data[data['children']==5].charges.values.tolist()\n\n\n\n\n\n\n\n\n\n\n\n\nChildren 0\nChildren 1\nChildren 2\nChildren 3\nChildren 4\nChildren 5\n\n\n\n\n[16884.924, 21984.47061, 3866.8552, 3756.6216, 28923.13692, 2721.3208]\n[1725.5523, 8240.5896, 1837.237, 10797.3362]\n[6406.4107, 6203.90175, 12268.63225]\n[4449.462, 7281.5056]\n[4504.6624, 11033.6617, 10407.08585]\n[4687.797, 6799.458]\n\n\nTotal 574\nTotal 324\nTotal 240\nTotal 157\nTotal 25\nTotal 18\n\n\n\nA one-way analysis of variance is a method to compare \\(k\\) homogenous groups when the experiment has \\(n_i\\) response values for each each group \\(i\\). Therefore, total data \\(n=\\sum_{i} n_i\\) and \\(y_{ij}\\) represent the \\(j\\)th observation of the \\(i\\)th group. For our example above, we have \\(\\sum_{i=1}^{6}n_i=\\)(574+324+240+157+25+18)= 1338 and \\(y_{12}=\\) 21984.47061 meaning, group 1 and second element.\nNow let’s define \\[\n\\mu_i = \\frac{1}{n_i}\\sum_{j=1}^{n_i}\\frac{y_{ij}}{n_i};\\hspace{4mm}\\text{for } i=1,2,\\cdots, 6\n\\]\nSince all the groups are coming from the same sample/population, we must assume that they all have common variance. This \\(\\textcolor{red}{\\text{homogeneity assumption is crucial}}\\) for ANOVA analysis. So, irrespective of their group assignment, each \\(y_{ij}\\sim (\\mu_i, \\sigma^2)\\)\n\nWhat does one-sided ANOVA do?\n\nThe main purpose of one-sided ANOVA is to act as a judge like in a court house. It assumes that there is no variation in any group. All group has the same mean. So it sets a null hypthesis and declares that there is no difference in the groups whereas the alternative is set to the opposite. Let’s see what happens to our data\n\n\nimport numpy as np \n\n\n\n\n\\(\\mu\\)\nValues\n\n\n\n\n\\(\\mu_1\\)\n12365.98\n\n\n\\(\\mu_2\\)\n12731.17\n\n\n\\(\\mu_3\\)\n15073.56\n\n\n\\(\\mu_4\\)\n15355.32\n\n\n\\(\\mu_5\\)\n13850.66\n\n\n\\(\\mu_6\\)\n8786.04\n\n\n\nShare on\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/multiplelinreg/index.html",
    "href": "dsandml/multiplelinreg/index.html",
    "title": "Multiple Liear Regression",
    "section": "",
    "text": "The multiple linear regression takes the form\n\\[y=\\beta_0+\\beta_1 x_1+\\beta_2 x_2+\\cdots +\\beta_d x_d+\\xi=\\vec{x}\\cdot \\vec{\\beta}+\\xi\\]\nwith \\(\\{\\beta_i\\}_{i=0}^{d}\\in \\mathbb{R}\\) constants or parameters of the model. In vector notation, \\(\\vec{\\beta}\\in \\mathbb{R}^{d+1}\\),\n\\[\n\\vec{\\beta}=\\begin{pmatrix}\\beta_0\\\\ \\beta_1\\\\ \\vdots \\\\ \\beta_d \\end{pmatrix};\\hspace{4mm}\\vec{x}=\\begin{pmatrix}1\\\\ x_1\\\\ x_2\\\\ \\vdots\\\\ x_d\\end{pmatrix}\n\\]\nFor \\(n\\) data points, in matrix algebra notation, we can write \\(y=X\\vec{\\beta}+\\xi\\) where \\(X\\in \\mathcal{M}_{n\\times (d+1)}\\) and \\(y\\in \\mathbb{R}^{d+1}\\) with\n\\[X=\\begin{pmatrix}1&x_{11}&x_{12}&\\cdots&x_{1d}\\\\1&x_{21}&x_{22}&\\cdots&x_{2d}\\\\ \\vdots& \\vdots &\\vdots&\\ddots &\\vdots\\\\1&x_{n1}&x_{n2}&\\cdots&x_{nd} \\end{pmatrix};\\hspace{4mm} y=\\begin{pmatrix}y_1\\\\y_2\\\\ \\vdots\\\\ y_n\\end{pmatrix};\\hspace{4mm} \\xi=\\begin{pmatrix}\\xi_1\\\\ \\xi_2\\\\ \\vdots\\\\ \\xi_n\\end{pmatrix}\\]\nWe fit the \\(n\\) data points with the objective to minimize the loss function, mean squared error\n\\[MSE(\\vec{\\beta})=\\frac{1}{n}\\sum_{i=1}^{n}\\left(y_i-f_{\\vec{\\beta}}(\\vec{x}_i)\\right)^2=\\frac{1}{n}\\left|\\vec{y}-X\\vec{\\beta}\\right|^2\\]"
  },
  {
    "objectID": "dsandml/multiplelinreg/index.html#multiple-linear-regression",
    "href": "dsandml/multiplelinreg/index.html#multiple-linear-regression",
    "title": "Multiple Liear Regression",
    "section": "",
    "text": "The multiple linear regression takes the form\n\\[y=\\beta_0+\\beta_1 x_1+\\beta_2 x_2+\\cdots +\\beta_d x_d+\\xi=\\vec{x}\\cdot \\vec{\\beta}+\\xi\\]\nwith \\(\\{\\beta_i\\}_{i=0}^{d}\\in \\mathbb{R}\\) constants or parameters of the model. In vector notation, \\(\\vec{\\beta}\\in \\mathbb{R}^{d+1}\\),\n\\[\n\\vec{\\beta}=\\begin{pmatrix}\\beta_0\\\\ \\beta_1\\\\ \\vdots \\\\ \\beta_d \\end{pmatrix};\\hspace{4mm}\\vec{x}=\\begin{pmatrix}1\\\\ x_1\\\\ x_2\\\\ \\vdots\\\\ x_d\\end{pmatrix}\n\\]\nFor \\(n\\) data points, in matrix algebra notation, we can write \\(y=X\\vec{\\beta}+\\xi\\) where \\(X\\in \\mathcal{M}_{n\\times (d+1)}\\) and \\(y\\in \\mathbb{R}^{d+1}\\) with\n\\[X=\\begin{pmatrix}1&x_{11}&x_{12}&\\cdots&x_{1d}\\\\1&x_{21}&x_{22}&\\cdots&x_{2d}\\\\ \\vdots& \\vdots &\\vdots&\\ddots &\\vdots\\\\1&x_{n1}&x_{n2}&\\cdots&x_{nd} \\end{pmatrix};\\hspace{4mm} y=\\begin{pmatrix}y_1\\\\y_2\\\\ \\vdots\\\\ y_n\\end{pmatrix};\\hspace{4mm} \\xi=\\begin{pmatrix}\\xi_1\\\\ \\xi_2\\\\ \\vdots\\\\ \\xi_n\\end{pmatrix}\\]\nWe fit the \\(n\\) data points with the objective to minimize the loss function, mean squared error\n\\[MSE(\\vec{\\beta})=\\frac{1}{n}\\sum_{i=1}^{n}\\left(y_i-f_{\\vec{\\beta}}(\\vec{x}_i)\\right)^2=\\frac{1}{n}\\left|\\vec{y}-X\\vec{\\beta}\\right|^2\\]"
  },
  {
    "objectID": "dsandml/multiplelinreg/index.html#ordinary-least-square-method",
    "href": "dsandml/multiplelinreg/index.html#ordinary-least-square-method",
    "title": "Multiple Liear Regression",
    "section": "Ordinary Least Square Method",
    "text": "Ordinary Least Square Method\n\nThe scikit-learn library uses Ordinary Least Squares (OLS) method to find the parameters. This method is good for a simple and relatively smaller dataset. Here is a short note on this method. However, when the dimension is very high and the dataset is bigger, scikit-learn uses another method called Stochastic Gradient Descent for optimization which is discussed in the next section.\n\nThe goal of OLS is to find the parameter vector \\(\\hat{\\beta}\\) that minimizes the sum of squared errors (SSE) between the observed target values \\(y\\) and the predicted values \\(\\hat{y}\\):\n\\[\n\\text{SSE} = \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 = \\sum_{i=1}^{n} (y_i - X_i\\beta)^2\n\\]\nThis can be expressed in matrix form as:\n\\[\n\\text{SSE} = (y - X\\beta)^T(y - X\\beta)\n\\]\nTo minimize the SSE, let’s first expand the expression:\n\\[\\begin{align}\n\\text{SSE} &= (y - X\\beta)^T(y - X\\beta)\\\\\n&=(y^T-\\beta^TX^T)(y-X\\beta)\\\\\n& = y^T y - y^T X\\beta - \\beta^T X^T y + \\beta^T X^T X \\beta\n\\end{align}\\]\nSince \\(\\beta^T X^T y\\) is a scalar (a 1x1 matrix), it is equal to its transpose. That is\n\\[\\begin{align*}\n\\beta^TX^Ty&=\\left(\\beta^TX^Ty\\right)^T\\\\\n&= \\left((\\beta^TX^T)y\\right)^T\\\\\n&=y^T(\\beta^TX^T)^T\\\\\n&=y^T(\\beta^TX^T)^T\\\\\n&=y^T\\left(X^T\\right)^T\\left(\\beta^T\\right)^T\\\\\n&=y^TX\\beta\n\\end{align*}\\]\nand therefore,\n\\[\n\\text{SSE} = y^T y - 2\\beta^T X^T y + \\beta^T X^T X \\beta\n\\]\nTo find the minimum of the SSE, we take the derivative with respect to \\(\\beta\\) and set it to zero:\n\\[\n\\frac{\\partial \\text{SSE}}{\\partial \\beta} = -2X^T y + 2X^T X \\beta = 0\n\\]\nNow, solve for \\(\\beta\\):\n\\[\nX^T X \\beta = X^T y\n\\]\nTo isolate \\(\\beta\\), we multiply both sides by \\((X^T X)^{-1}\\) (assuming \\(X^T X\\) is invertible):\n\\[\n\\beta = (X^T X)^{-1} X^T y\n\\]\n\nThe vector \\(\\hat{\\beta} = (X^T X)^{-1} X^T y\\) gives the estimated coefficients that minimize the sum of squared errors between the observed target values \\(y\\) and the predicted values \\(\\hat{y} = X\\hat{\\beta}\\). This method is exact and works well when \\(X^T X\\) is invertible and the dataset size is manageable.   This method is very efficient for small to medium-sized datasets but can become computationally expensive for very large datasets due to the inversion of the matrix \\(X^TX\\)."
  },
  {
    "objectID": "dsandml/multiplelinreg/index.html#iterative-method",
    "href": "dsandml/multiplelinreg/index.html#iterative-method",
    "title": "Multiple Liear Regression",
    "section": "Iterative Method",
    "text": "Iterative Method\n\nGradient Descent\n\n  GIF Credit: gbhat.com\n Gradient Descent is an optimization algorithm used to minimize the cost function. The cost function \\(f(\\beta)\\) measures how well a model with parameters \\(\\beta\\) fits the data. The goal is to find the values of \\(\\beta\\) that minimize this cost function. In terms of the iterative method, we want to find \\(\\beta_{k+1}\\) and \\(\\beta_k\\) such that \\(f(\\beta_{k+1})&lt;f(\\beta_k)\\).   For a small change in \\(\\beta\\), we can approximate \\(f(\\beta)\\) using Taylor series expansion\n\\[f(\\beta_{k+1})=f(\\beta_k +\\Delta\\beta_k)\\approx f(\\beta_k)+\\nabla f(\\beta_k)^T \\Delta \\beta_k+\\text{higher-order terms}\\]\n\nThe update rule for vanilla gradient descent is given by:\n\\[\n\\beta_{k+1} = \\beta_k - \\eta \\nabla f(\\beta_k)\n\\]\nWhere:\n\n\\(\\beta_k\\) is the current estimate of the parameters at iteration \\(k\\).\n\\(\\eta\\) is the learning rate, a small positive scalar that controls the step size.\n\\(\\nabla f(\\beta_k)\\) is the gradient of the cost function \\(f\\) with respect to \\(\\beta\\) at the current point \\(\\beta_k\\).\n\n\nThe update rule comes from the idea of moving the parameter vector \\(\\beta\\) in the direction that decreases the cost function the most.\n\nGradient: The gradient \\(\\nabla f(\\beta_k)\\) represents the direction and magnitude of the steepest ascent of the function \\(f\\) at the point \\(\\beta_k\\). Since we want to minimize the function, we move in the opposite direction of the gradient.\nStep Size: The term \\(\\eta \\nabla f(\\beta_k)\\) scales the gradient by the learning rate \\(\\eta\\), determining how far we move in that direction. If \\(\\eta\\) is too large, the algorithm may overshoot the minimum; if it’s too small, the convergence will be slow.\nIterative Update: Starting from an initial guess \\(\\beta_0\\), we repeatedly apply the update rule until the algorithm converges, meaning that the changes in \\(\\beta_k\\) become negligible, and \\(\\beta_k\\) is close to the optimal value \\(\\beta^*\\).\n\n\n\nStochastic Gradient Descent (SGD)\n\nStochastic Gradient Descent is a variation of the vanilla gradient descent. Instead of computing the gradient using the entire dataset, SGD updates the parameters using only a single data point or a small batch of data points at each iteration. The later one we call it mini batch SGD.\n\nSuppose our cost function is defined as the average over a dataset of size \\(n\\):\n\\[\nf(\\beta) = \\frac{1}{n} \\sum_{i=1}^{n} f_i(\\beta)\n\\]\nWhere \\(f_i(\\beta)\\) represents the contribution of the \\(i\\)-th data point to the total cost function. The gradient of the cost function with respect to \\(\\beta\\) is:\n\\[\n\\nabla f(\\beta) = \\frac{1}{n} \\sum_{i=1}^{n} \\nabla f_i(\\beta)\n\\]\nVanilla gradient descent would update the parameters as:\n\\[\n\\beta_{k+1} = \\beta_k - \\eta \\nabla f(\\beta_k)\n\\]\nInstead of using the entire dataset to compute the gradient, SGD approximates the gradient by using only a single data point (or a small batch). The update rule for SGD is:\n\\[\n\\beta_{k+1} = \\beta_k - \\eta \\nabla f_{i_k}(\\beta_k)\n\\]\nWhere:\n\n\\(i_k\\) is the index of a randomly selected data point at iteration \\(k\\).\n\\(\\nabla f_{i_k}(\\beta_k)\\) is the gradient of the cost function with respect to the parameter \\(\\beta_k\\), evaluated only at the data point indexed by \\(i_k\\)."
  },
  {
    "objectID": "dsandml/multiplelinreg/index.html#python-execution",
    "href": "dsandml/multiplelinreg/index.html#python-execution",
    "title": "Multiple Liear Regression",
    "section": "Python Execution",
    "text": "Python Execution\n\nSynthetic Data\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nX=np.random.randn(1000,2)\ny=3*X[:,0]+2*X[:,1]+1+np.random.randn(1000)\n\nSo for this project, our known relationship is \\(y=1+3x_1+2x_2+\\xi\\).\n\n\nFit the data: Using scikit-learn Library\n\nmlr=LinearRegression()\nmlr.fit(X,y)\ncoefficients=mlr.coef_.tolist()\nslope=mlr.intercept_.tolist()\n\nSo the model parameters: slope \\(\\beta_0=\\) 1.0216 and coefficients \\(\\beta_1=\\) 3.0013, and \\(\\beta_2=\\) 2.004\n\n\nFit the data: Using Custom Library OLS\nFirst we create our custom NewLinearRegression using the OLS formula above and save this python class as mlreg.py\nimport numpy as np\n\n\nclass NewLinearRegression:\n    def __init__(self) -&gt; None:\n        self.beta = None\n\n    def fit(self, X, y):\n        X = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n        X_transpose_X = np.dot(X.transpose(), X)\n        X_transpose_X_inverse = np.linalg.inv(X_transpose_X)\n        X_transpose_y = np.dot(X.transpose(), y)\n        self.beta = np.dot(X_transpose_X_inverse, X_transpose_y)\n\n    def predict(self, X):\n        X = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n        return np.dot(X, self.beta)\n\n    def coeff_(self):\n        return self.beta[1:].tolist()\n\n    def interceptt_(self):\n        return self.beta[0].tolist()\nNow it’s time to use the new class\n\nfrom mlreg import NewLinearRegression\nmlr1 = NewLinearRegression()\nmlr1.fit(X,y)\ncoefficients1=mlr1.coeff_()\nslope1=mlr1.interceptt_()\n\nSo the model parameters: slope \\(\\beta_0=\\) 1.0216 and coefficients \\(\\beta_1=\\) 3.0013, and \\(\\beta_2=\\) 2.004\n\n\nFit the data: Using Gradient Descent\nWe create the class\nclass GDLinearRegression:\n    def __init__(self, learning_rate=0.01, number_of_iteration=1000) -&gt; None:\n        self.learning_rate = learning_rate\n        self.number_of_iteration = number_of_iteration\n        self.weights = None\n        self.bias = None\n\n    def fit(self, X, y):\n        num_of_samples, num_of_features = X.shape\n        self.weights = np.zeros(num_of_features)\n        self.bias = 0\n\n        for _ in range(self.number_of_iteration):\n            y_predicted = np.dot(X, self.weights) + self.bias\n\n            d_weights = (1 / num_of_samples) * np.dot(X.T, (y_predicted - y))\n            d_bias = (1 / num_of_samples) * np.sum(y_predicted - y)\n\n            self.weights -= self.learning_rate * d_weights\n            self.bias -= self.learning_rate * d_bias\n\n    def predict(self, X):\n        y_predicted = np.dot(X, self.weights) + self.bias\n        return y_predicted\n\n    def coefff_(self):\n        return self.weights.tolist()\n\n    def intercepttt_(self):\n        return self.bias\nNow we use this similarly as before,\n\nfrom mlreg import GDLinearRegression\nmlr2= GDLinearRegression(learning_rate=0.008)\nmlr2.fit(X,y)\ncoefficients2=mlr2.coefff_()\nslope2=mlr2.intercepttt_()\n\nSo the model parameters: slope \\(\\beta_0=\\) 1.0217 and coefficients \\(\\beta_1=\\) 3.0006, and \\(\\beta_2=\\) 2.0032\n\n\nFit the data: Using Stochastic Gradient Descent\nFirst we define the class\nclass SGDLinearRegression:\n    def __init__(self, learning_rate=0.01, num_iterations=1000, batch_size=1) -&gt; None:\n        self.learning_rate = learning_rate\n        self.num_iterations = num_iterations\n        self.batch_size = batch_size\n        self.theta = None\n        self.mse_list = None  # Initialize mse_list as an instance attribute\n\n    def _loss_function(self, X, y, beta):\n        num_samples = len(y)\n        y_predicted = X.dot(beta)\n        mse = (1/num_samples) * np.sum(np.square(y_predicted - y))\n        return mse\n\n    def _gradient_function(self, X, y, beta):\n        num_samples = len(y)\n        y_predicted = X.dot(beta)\n        grad = (1/num_samples) * X.T.dot(y_predicted - y)\n        return grad\n\n    def fit(self, X, y):\n        # Adding the intercept term (bias) as a column of ones\n        X = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n        num_features = X.shape[1]\n        self.theta = np.zeros((num_features, 1))\n\n        self.mse_list = np.zeros(self.num_iterations)  # Initialize mse_list\n\n        for i in range(self.num_iterations):\n            # Randomly select a batch of data points\n            indices = np.random.choice(\n                len(y), size=self.batch_size, replace=False)\n            X_i = X[indices]\n            y_i = y[indices].reshape(-1, 1)\n\n            # Compute the gradient and update the weights\n            gradient = self._gradient_function(X_i, y_i, self.theta)\n            self.theta = self.theta - self.learning_rate * gradient\n\n            # Calculate loss for the entire dataset (optional)\n            self.mse_list[i] = self._loss_function(X, y, self.theta)\n\n        return self.theta, self.mse_list\n\n    def predict(self, X):\n        # Adding the intercept term (bias) as a column of ones\n        X = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n        return X.dot(self.theta)\n\n    def coef_(self):\n        # Return the coefficients (excluding the intercept term)\n        return self.theta[1:].flatten().tolist()\n\n    def intercept_(self):\n        # Return the intercept term\n        return self.theta[0].item()\n\n    def mse_losses(self):\n        # Return the mse_list\n        return self.mse_list.tolist()\nNow\n\nimport matplotlib.pyplot as plt\nfrom mlreg import SGDLinearRegression\nmlr3=SGDLinearRegression(learning_rate=0.01, num_iterations=1000, batch_size=10)\ntheta, _ = mlr3.fit(X, y)\n\nSo the model parameters: slope \\(\\beta_0=\\) array([1.05560442]) and coefficients \\(\\beta_1=\\) array([3.01494465]), and \\(\\beta_2=\\) array([2.01737331])\nUp next knn regression\n\nShare on\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/gradientboosting/index.html",
    "href": "dsandml/gradientboosting/index.html",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "",
    "text": "Gradient Boosting is one of the most powerful techniques for building predictive models. It has gained popularity in the realms of both classification and regression due to its flexibility and effectiveness, particularly with decision trees as weak learners."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#introduction",
    "href": "dsandml/gradientboosting/index.html#introduction",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "",
    "text": "Gradient Boosting is one of the most powerful techniques for building predictive models. It has gained popularity in the realms of both classification and regression due to its flexibility and effectiveness, particularly with decision trees as weak learners."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#what-is-gradient-boosting",
    "href": "dsandml/gradientboosting/index.html#what-is-gradient-boosting",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "What is Gradient Boosting?",
    "text": "What is Gradient Boosting?\n\nGradient Boosting is an ensemble learning technique where several weak learners (typically decision trees) are combined to form a strong learner. The key idea behind boosting is to train models sequentially, where each new model tries to correct the errors of the previous ones. Gradient Boosting achieves this by minimizing a loss function using gradient descent.\n\nKey Concepts:\n\nWeak Learners: These are models that are only slightly better than random guessing. Decision trees with few splits (depth-1 trees) are commonly used as weak learners.\n\nSequential Learning: Models are trained one after another. Each model focuses on the errors (residuals) made by the previous models.\n\nGradient Descent: Gradient Boosting relies on gradient descent to minimize the loss function."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#mathematical-derivation-of-gradient-boosting",
    "href": "dsandml/gradientboosting/index.html#mathematical-derivation-of-gradient-boosting",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "Mathematical Derivation of Gradient Boosting",
    "text": "Mathematical Derivation of Gradient Boosting\nLet’s consider a regression problem where we aim to predict the target values \\(y \\in \\mathbb{R}\\) using the features \\(X \\in \\mathbb{R}^d\\). We aim to find a function \\(F(x)\\) that minimizes the expected value of a loss function \\(L(y, F(x))\\), where \\(L\\) could be mean squared error or any other appropriate loss function.\nThe idea behind Gradient Boosting is to improve the current model by adding a new model that reduces the loss:\n\\[\nF_{m+1}(x) = F_m(x) + \\eta h_m(x)\n\\]\nwhere:\n\n\\(F_m(x)\\) is the current model after \\(m\\) iterations,\n\n\\(h_m(x)\\) is the new weak learner added at iteration \\(m\\),\n\n\\(\\eta\\) is the learning rate, which controls how much the new learner impacts the final model.\n\n\nWe aim to minimize the loss function \\(L(y, F(x))\\). At each iteration, Gradient Boosting fits a new model \\(h_m(x)\\) to the negative gradient of the loss function. The negative gradient represents the direction of steepest descent, essentially capturing the errors or residuals of the model.  Given a loss function \\(L(y, F(x))\\), we compute the residuals (or pseudo-residuals) as:\n\n\\[\nr_{i,m} = - \\frac{\\partial L(y_i, F_m(x_i))}{\\partial F_m(x_i)}\n\\]\nThese residuals are then used to fit the new weak learner \\(h_m(x)\\). In the case of squared error (for regression), the residuals simplify to the difference between the observed and predicted values:\n\\[\nr_{i,m} = y_i - F_m(x_i)\n\\]\nThus, the new learner is fit to minimize these residuals.\nSteps\nInitialize the model with a constant prediction: \\[\nF_0(x) = \\arg \\min_{c} \\sum_{i=1}^{n} L(y_i, c)\n\\] For squared error loss, \\(F_0(x)\\) would be the mean of the target values \\(y\\).\nFor each iteration \\(m = 1, 2, \\dots, M\\):\n\nCompute the residuals: \\[\nr_{i,m} = - \\frac{\\partial L(y_i, F_m(x_i))}{\\partial F_m(x_i)}\n\\]\n\nFit a weak learner \\(h_m(x)\\) to the residuals \\(r_{i,m}\\).\n\nUpdate the model: \\[\nF_{m+1}(x) = F_m(x) + \\eta h_m(x)\n\\]\n\nContinue until a stopping criterion is met (e.g., a fixed number of iterations or convergence)."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#assumptions-of-gradient-boosting",
    "href": "dsandml/gradientboosting/index.html#assumptions-of-gradient-boosting",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "Assumptions of Gradient Boosting",
    "text": "Assumptions of Gradient Boosting\nGradient Boosting, like any algorithm, comes with its own set of assumptions and limitations. Key assumptions include:\n\nIndependence of Features: Gradient Boosting assumes that the features are independent. Correlated features can lead to overfitting.\nWeak Learners: It assumes that weak learners, typically shallow decision trees, are adequate for capturing the patterns in the data, though overly complex learners may lead to overfitting.\nAdditive Model: The model is additive, meaning it combines weak learners to improve performance. This makes it sensitive to noisy data, as adding too many learners might lead to overfitting."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#when-to-use-gradient-boosting",
    "href": "dsandml/gradientboosting/index.html#when-to-use-gradient-boosting",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "When to Use Gradient Boosting?",
    "text": "When to Use Gradient Boosting?\nGradient Boosting is ideal in the following scenarios:\n\nHigh Predictive Power: When accuracy is a top priority, Gradient Boosting often outperforms simpler algorithms like linear regression or basic decision trees.\n\nComplex Datasets: It works well with datasets that have complex patterns, non-linear relationships, or multiple feature interactions.\n\nFeature Engineering: It is less reliant on extensive feature engineering because decision trees are capable of handling mixed types of features (numerical and categorical) and automatically learning interactions.\n\nImbalanced Data: Gradient Boosting can handle class imbalances by tuning the loss function, making it suitable for classification tasks like fraud detection.\n\nHowever, due to its complexity, Gradient Boosting can be computationally expensive, so it’s less ideal for very large datasets or real-time predictions."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#python-implementation-of-gradient-boosting",
    "href": "dsandml/gradientboosting/index.html#python-implementation-of-gradient-boosting",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "Python Implementation of Gradient Boosting",
    "text": "Python Implementation of Gradient Boosting\nBelow is a Python implementation using the scikit-learn library for a regression problem. We will use the Boston Housing dataset as an example.\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\n\n# Load the Boston Housing dataset\ndata_url = \"http://lib.stat.cmu.edu/datasets/boston\"\nraw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\ndata = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\ntarget = raw_df.values[1::2, 2]\n\nX = data\ny = target\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and fit the Gradient Boosting Regressor\ngb_regressor = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\ngb_regressor.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = gb_regressor.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\n\nMean Squared Error: 6.240854334653895\n\n\nIn this example:\n\nWe use the GradientBoostingRegressor from scikit-learn for a regression task.\n\nWe fit the model on the Boston Housing dataset, and predict values on the test set.\n\nThe mean squared error (MSE) is used to evaluate the model’s performance.\n\nHyperparameters:\n\nn_estimators: Number of boosting stages to run.\n\nlearning_rate: Controls the contribution of each tree to the final model.\n\nmax_depth: Limits the depth of the individual decision trees (weak learners).\n\n\nGradient Boosting is a powerful ensemble technique, particularly effective for both classification and regression tasks. It builds models sequentially, focusing on correcting the mistakes of prior models. While it is computationally expensive and prone to overfitting if not properly regularized, it often achieves state-of-the-art results in predictive tasks."
  },
  {
    "objectID": "dsandml/gradientboosting/index.html#references",
    "href": "dsandml/gradientboosting/index.html#references",
    "title": "Ensemble Methods: Gradient Boosting - A detailed overview",
    "section": "References",
    "text": "References\n\n“The Elements of Statistical Learning” by Trevor Hastie, Robert Tibshirani, and Jerome Friedman (freely available online).\n“Pattern Recognition and Machine Learning” by Christopher M. Bishop:\n“Greedy Function Approximation: A Gradient Boosting Machine” by Jerome Friedman\n\n“A Short Introduction to Boosting” by Yoav Freund and Robert E. Schapire\n\n“Understanding Gradient Boosting Machines” by Terence Parr and Jeremy Howard\n\n“A Gentle Introduction to Gradient Boosting” by Jason Brownlee"
  },
  {
    "objectID": "dsandml/decisiontree/index.html",
    "href": "dsandml/decisiontree/index.html",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "",
    "text": "The Decision Tree Classifier is a powerful, interpretable, and widely-used algorithm in machine learning for binary or multi-class classification problems. Its simplicity and visual appeal make it a go-to choice for classification tasks. However, behind this simplicity lies a series of mathematical decisions that guide how the tree is constructed."
  },
  {
    "objectID": "dsandml/decisiontree/index.html#decision-tree",
    "href": "dsandml/decisiontree/index.html#decision-tree",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "",
    "text": "The Decision Tree Classifier is a powerful, interpretable, and widely-used algorithm in machine learning for binary or multi-class classification problems. Its simplicity and visual appeal make it a go-to choice for classification tasks. However, behind this simplicity lies a series of mathematical decisions that guide how the tree is constructed."
  },
  {
    "objectID": "dsandml/decisiontree/index.html#the-core-idea-behind-decision-trees",
    "href": "dsandml/decisiontree/index.html#the-core-idea-behind-decision-trees",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "The Core Idea Behind Decision Trees",
    "text": "The Core Idea Behind Decision Trees\n\nDecision Tree contains two main type of nodes, decision nodes and leaf nodes. A decision node is a node where a condition is applied to split the data and a leaf node contains the class of a data point. At its heart, a decision tree works by recursively splitting the dataset based on feature values. The goal of each split is to increase the homogeneity of the resulting subgroups, ideally separating the different classes as much as possible. The splitting process relies on a measure of impurity or disorder. The two most common metrics used for this purpose are Gini Impurity and Entropy (used in Information Gain).\n\nGini Impurity\nThe Gini Impurity measures the likelihood of misclassifying a randomly chosen element from the dataset if it were labeled according to the distribution of classes in that subset. Mathematically, the Gini Impurity for a node \\(t\\) is calculated as:\n\\[\\begin{align*}\nG(t) &= 1 - \\sum_{i=1}^{n} p_i^2\n\\end{align*}\\]\nwhere \\(p_i\\) is the proportion of samples belonging to class \\(i\\) at node \\(t\\).\nEntropy and Information Gain\nEntropy, borrowed from information theory, measures the disorder or uncertainty in the dataset. It is defined as:\n\\[H(t) = -\\sum_{i=1}^{n} p_i \\log_2(p_i)\\]\n\n\nCode\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt \n\nx=np.arange(0.01,0.99,0.0001)\ny=[-p*math.log(p,2)-(1-p)*math.log(1-p,2) for p in x]\nplt.plot(x,y)\nplt.xlabel('$p_{\\oplus}$')\nplt.ylabel('$H(t)$')\nplt.title('Entropy')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\nInformation Gain is the reduction in entropy after a dataset is split on a feature. It is calculated as:\n\\[IG(D, A) = H(D) - \\sum_{v \\in \\text{Values}(A)} \\frac{|D_v|}{|D|} H(D_v)\\]\nwhere:\n\n\\(D\\) is the dataset,\n\\(A\\) is the feature on which the split is made,\n\\(D_v\\) is the subset of \\(D\\) for which feature \\(A\\) has value \\(v\\).\n\n\nLet’s explain the math with following example.\nSay, I have the data set like this\n\n\n\n\\(x_0\\)\n\\(x_1\\)\nClass\n\n\n\n\n2\n3\n0\n\n\n3\n4\n0\n\n\n4\n6\n0\n\n\n6\n8\n1\n\n\n7\n10\n1\n\n\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\n\n\nTotal 20 data points and the scatter plot looks like this\n\n\nCode\ndata = [\n    [2, 3, 0], [3, 4, 0], [4, 6, 0], [6, 8, 1], [7, 10, 1],\n    [8, 12, 1], [5, 7, 1], [2, 5, 0], [9, 15, 1], [1, 2, 0],\n    [11, 3, 0], [4, 13, 1], [8, 14, 1], [1, 5, 0], [6, 2, 1],\n    [9, 3, 1], [15, 13, 0], [7, 5, 0], [5, 9, 0], [8, 3, 1]\n]\n\nx0 = [row[0] for row in data]\nx1 = [row[1] for row in data]\nclasses = [row[2] for row in data]\n\ncolors = ['red' if c == 0 else 'blue' for c in classes]\n\nplt.figure(figsize=(7, 5))\nplt.grid(True)\n\nplt.scatter(x0, x1, color=colors, s=100, edgecolor='black')\n\n# Label points with class values\nfor i in range(len(x0)):\n    plt.text(x0[i] + 0.2, x1[i] + 0.2, str(classes[i]), fontsize=9)\n\n# Set limits for the axes\nplt.xlim(0, 16)\nplt.ylim(0, 16)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\n# Label axes and show plot\nplt.xlabel('$x_0$')\nplt.ylabel('$x_1$')\nplt.title('Figure 1: Scatter Plot of $x_0$ vs $x_1$ ')\nplt.show()\n\n\n\n\n\n\n\n\n\nAt this point, we see that the classes are not linearly separable, meaning, we can not draw any line that separate the two classes. Notice that the minimum and maximum of feature \\(x_0\\) is 1 and 15, respectively. So, let’s pick a few numbers in between these two numbers. Say, our first number is \\(3.5\\). In the first node, that is the root node, we divide the data based on the feature \\(x_0\\le 3.5\\)\n\n\n\nFigure 2: First Split\n\n\nAt the root node, we have equal number of blue and red points so the proportion of the data class is \\(p_1=p_2=0.5\\), so the entropy\n\\[\\begin{align*}\n    H(\\text{root node})&=-(0.5)\\log_2(0.5)-(0.5)\\log_2(0.5)=1\\\\\n\\end{align*}\\]\nBased on the condition \\(x_0\\le 3.5\\), the left and right child recieves 5 and 15 feature points \\(X=(x_0,x_1)\\), respectively. We see that the left node is a pure node, because it contains only the red points. Therefore, the entropies at these child nodes\n\\[\\begin{align*}\n    H(\\text{left child})&=-1\\log_2(1)-0\\log_2(0)=0\\\\\n    H(\\text{right child})&=-\\frac{5}{15}\\log_2\\left(\\frac{5}{15}\\right)-\\frac{10}{15}\\log_2\\left(\\frac{10}{15}\\right)=0.92\\\\\n\\end{align*}\\]\nand the information gain at this split\n\\[IG(split_1)=1-\\left(\\frac{5}{20}\\cdot 0+\\frac{15}{20}\\cdot 0.92\\right)=0.31\\]\nNow the burning question is how did we select the condition \\(x_0\\le 3.5\\)? It could have been any other number, say we set \\(x_0\\le 6.5\\). Then\n\n\n\nFigure 3: Alternative Split\n\n\nBased on the condition \\(x_0\\le 6.5\\), the left and right child recieves 11 and 9 feature points \\(X=(x_0,x_1)\\), respectively. But in this case we don’t see any pure nodes and the entropies at these child nodes\n\\[\\begin{align*}\n    H(\\text{left child})&=-\\frac{7}{11}\\log_2\\left(\\frac{7}{11}\\right)-\\frac{4}{11}\\log_2\\left(\\frac{4}{11}\\right)=0.95\\\\\n    H(\\text{right child})&=-\\frac{3}{9}\\log_2\\left(\\frac{3}{9}\\right)-\\frac{6}{9}\\log_2\\left(\\frac{6}{9}\\right)=0.92\\\\\n\\end{align*}\\]\nand the information gain at this split\n\\[IG(split_1)=1-\\left(\\frac{11}{20}\\cdot 0.95+\\frac{9}{20}\\cdot 0.92\\right)=0.06\\]\nNote that the information gain is much lower than the first option. Therefore, the first split is better than this alternative split. Because the goal is to have minimum entropy value and/or the maximum information gain. This is where the machine learning gets in the game. The algorithm finds the optimal split based on each feature values.\n\n\n\nFigure 4: Second Split\n\n\nNow say we have a new set of feature values \\((x_0,x_1,Class)=(10,7,1)\\). Based on our tree above, since \\(x_0\\) is NOT less than or equal to \\(3.5\\) so it goes to the right first child. Then it satisfies \\(x_0\\le 10\\). So it moves to the left grand child gradually traverse through the tree and ended up to the very bottom layer left leaf node."
  },
  {
    "objectID": "dsandml/decisiontree/index.html#building-a-decision-tree",
    "href": "dsandml/decisiontree/index.html#building-a-decision-tree",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "Building a Decision Tree",
    "text": "Building a Decision Tree\n\nChoose the best feature to split on: Calculate Gini impurity or Information Gain for each feature and select the feature that results in the highest Information Gain or lowest Gini impurity.\nSplit the dataset: Partition the data based on the chosen feature and repeat the process for each partition.\nStop conditions: The tree stops growing when all samples in a node belong to the same class, the maximum depth is reached, or further splitting doesn’t add value."
  },
  {
    "objectID": "dsandml/decisiontree/index.html#implementation-of-decision-tree-scikit-learn",
    "href": "dsandml/decisiontree/index.html#implementation-of-decision-tree-scikit-learn",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "Implementation of Decision Tree: Scikit-learn",
    "text": "Implementation of Decision Tree: Scikit-learn\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier,plot_tree\nfrom sklearn.metrics import accuracy_score\n\nX=pd.DataFrame({'Feature 1':x0, 'Feature 2':x1})\ny=classes\n\n\nclf= DecisionTreeClassifier(criterion=\"entropy\")\nclf.fit(X,y)\n\n\nX_test=pd.DataFrame({'Feature 1':[10,9,11],'Feature 2':[7,9,5]})\ny_test=pd.DataFrame({'Class':[1,0,1]})\n\ntest_data=pd.concat([X_test,y_test], axis=1)\nprint('Test Data \\n')\nprint(test_data)\n\n\ny_prediction=clf.predict(X_test)\nprediction=pd.DataFrame({'Predicted_Class':y_prediction})\nprediction=pd.concat([test_data,prediction],axis=1)\nprint('\\n')\nprint('Result \\n')\nprint(prediction)\nprint('\\n')\nprint('Accuracy score:',round(accuracy_score(y_prediction,y_test),2))\n\nplt.figure(figsize=(11,7))\nplot_tree(clf, filled=True, \n          feature_names=['$x_0$','$x_1$'], \n          class_names=['R', 'B'], impurity=True,\n          )\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\nTest Data \n\n   Feature 1  Feature 2  Class\n0         10          7      1\n1          9          9      0\n2         11          5      1\n\n\nResult \n\n   Feature 1  Feature 2  Class  Predicted_Class\n0         10          7      1                1\n1          9          9      0                1\n2         11          5      1                0\n\n\nAccuracy score: 0.33"
  },
  {
    "objectID": "dsandml/decisiontree/index.html#discussion-on-decision-tree",
    "href": "dsandml/decisiontree/index.html#discussion-on-decision-tree",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "Discussion on Decision Tree",
    "text": "Discussion on Decision Tree\n\nBeing a simple algorithm, it has both pros and cons. It is robust to training data and the training data can contain missing values. However, it is a greedy algorithm, a problem-solving technique that chooses the best option in the current situation, without considering the overall outcome. It also face the overfitting issue."
  },
  {
    "objectID": "dsandml/decisiontree/index.html#reference",
    "href": "dsandml/decisiontree/index.html#reference",
    "title": "Understanding Decision Tree Classifier: A Mathematical Approach",
    "section": "Reference",
    "text": "Reference\nDecision Tree Classification Clearly Explained by Normalized Nerd\nShare on\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/logreg/index.html",
    "href": "dsandml/logreg/index.html",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "",
    "text": "Logistic Regression is a popular classification algorithm used for binary and multi-class classification problems. Unlike Linear Regression, which is used for regression problems, Logistic Regression is used to predict categorical outcomes. In binary classification, the output is either 0 or 1, and the relationship between the input features and the outcome is modeled using a logistic function (also called the sigmoid function)."
  },
  {
    "objectID": "dsandml/logreg/index.html#introduction",
    "href": "dsandml/logreg/index.html#introduction",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "",
    "text": "Logistic Regression is a popular classification algorithm used for binary and multi-class classification problems. Unlike Linear Regression, which is used for regression problems, Logistic Regression is used to predict categorical outcomes. In binary classification, the output is either 0 or 1, and the relationship between the input features and the outcome is modeled using a logistic function (also called the sigmoid function)."
  },
  {
    "objectID": "dsandml/logreg/index.html#what-is-logistic-regression",
    "href": "dsandml/logreg/index.html#what-is-logistic-regression",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "What is Logistic Regression?",
    "text": "What is Logistic Regression?\n\nLogistic Regression is a type of regression analysis used when the dependent variable is categorical. In binary logistic regression, the output can have only two possible outcomes (e.g., 0 or 1, pass or fail, spam or not spam).  Logistic Regression works by modeling the probability of an event occurring based on one or more input features. It estimates the probability that a given input belongs to a particular category (0 or 1) using the logistic function (sigmoid function)."
  },
  {
    "objectID": "dsandml/logreg/index.html#the-sigmoid-function",
    "href": "dsandml/logreg/index.html#the-sigmoid-function",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "The Sigmoid Function",
    "text": "The Sigmoid Function\nThe sigmoid function maps any real-valued number to a value between 0 and 1, making it ideal for modeling probabilities.\nThe sigmoid function is given by the formula:\n\\[\n\\sigma(z) = \\frac{1}{1 + e^{-z}}\n\\]\nWhere:\n\n\\(z\\) is the input to the sigmoid function (in logistic regression, \\(z = \\mathbf{x} \\cdot \\theta\\))\n\\(e\\) is the base of the natural logarithm\n\nThe output of the sigmoid function is interpreted as the probability \\(P(y=1|X)\\)."
  },
  {
    "objectID": "dsandml/logreg/index.html#logistic-regression-model",
    "href": "dsandml/logreg/index.html#logistic-regression-model",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "Logistic Regression Model",
    "text": "Logistic Regression Model\nIn Logistic Regression, the hypothesis is modeled as:\n\\[\nh_\\theta(X) = \\frac{1}{1 + e^{-\\theta^T X}}\n\\]\nWhere:\n\n\\(X\\) is the input feature vector\n\\(\\theta\\) is the parameter vector (weights)"
  },
  {
    "objectID": "dsandml/logreg/index.html#cost-function-for-logistic-regression",
    "href": "dsandml/logreg/index.html#cost-function-for-logistic-regression",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "Cost Function for Logistic Regression",
    "text": "Cost Function for Logistic Regression\n\nUnlike Linear Regression, which uses the Mean Squared Error (MSE) as the cost function, Logistic Regression uses log loss or binary cross-entropy as the cost function, as the output is binary (0 or 1).\n\nSo, basically we model probability from the given data. In other words, we can write\n\\[\\begin{align*}\n\\mathbb{P}(y= 1 \\text{ or }0 |\\text{ given }X)&=p(\\mathbf{x})=\\sigma(\\mathbf{x}\\cdot\\theta)=\\frac{1}{1+e^{-\\mathbf{x}\\cdot \\theta}}\\\\\n\\implies p_{\\theta}(\\mathbf{x})& = \\frac{1}{1+e^{-(\\theta_0+\\theta_1x_1+\\cdots+\\theta_dx_d)}}\\\\\n\\implies p_{\\theta}(\\mathbf{x})& = \\begin{cases}\n                                p_{\\theta}(\\mathbf{x}) & \\text{ if } y=1\\\\\n                                1-p_{\\theta}(\\mathbf{x}) & \\text{ if } y=0\n                          \\end{cases}\n\\end{align*}\\]\nWhere, \\(\\mathbf{\\theta},\\mathbf{x}\\in \\mathbb{R}^{d+1}\\) and \\(d\\) is the dimension of the data. For single data vector \\(\\mathbf{x}\\) the binary cross-entropy function can be written as\n\\[\nl(\\theta) = yp_{\\theta}(\\mathbf{x})+ (1-y)(1-p_{\\theta}(\\mathbf{x}))\n\\]\nSince we have \\(n\\) of those i.i.d data vectors therefore, we can write\n\\[\nL(\\theta) = \\prod_{i=1}^{n} \\left(y_ip_{\\theta}(\\mathbf{x_i})+ (1-y_i)(1-p_{\\theta}(\\mathbf{x_i}))\\right)\n\\]\nSince our goal is to minimize the loss, we need to perform derivatives of the loss function. Therefore, to change from the product form to addition form we take negative log of the above expression\n\\[\\begin{align*}\n\\ell (\\theta) = -\\log{L(\\theta)} = -\\sum_{i=1}^{n}y_i\\log{p_{\\theta}(\\mathbf{x})}+(1-y_i)\\log{(1-p_{\\theta}(\\mathbf{x}))}\n\\end{align*}\\]\nFor the ease of calculation, let’s rewrite the above equation in terms of \\(m\\) and \\(b\\) where \\(m\\in \\mathbb{R}^d = (\\theta_1,\\theta_2,\\cdots,\\theta_d)^T\\) and \\(b\\in \\mathbb{R}\\).\n\\[\n\\ell (\\theta) = -\\sum_{i=1}^{n}y_i\\log{p_{m,b}(\\mathbf{x})}+(1-y_i)\\log{(1-p_{m,b}(\\mathbf{x}))}\n\\]\nWhere:\n\n\\(n\\) is the number of training examples\n\n\\(m\\) is the number of features\n\\(y^{(i)}\\) is the true label of the \\(i^{th}\\) example\n\\(b\\) is the bias for the \\(i^{th}\\) example"
  },
  {
    "objectID": "dsandml/logreg/index.html#gradient-descent",
    "href": "dsandml/logreg/index.html#gradient-descent",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "Gradient Descent",
    "text": "Gradient Descent\nTo minimize the cost function and find the optimal values for \\(\\theta\\), we use gradient descent. We start from the last form of the loss function and convert this to a form that is easy to take the partial dervivatives.\n\\[\\begin{align*}\n\\ell (\\theta) &= -\\sum_{i=1}^{n}y_i\\log{p_{m,b}(\\mathbf{x})}+(1-y_i)\\log{(1-p_{m,b}(\\mathbf{x}))}\\\\\n              &= -\\sum_{i=1}^{n}y_i\\log{(\\sigma(mx_i+b))}+(1-y_i)\\log{(1-\\sigma(mx_i+b))}\\\\\n              &= -\\sum_{i=1}^{n}y_i\\log{(\\sigma(mx_i+b))}+(1-y_i)\\log{(\\sigma(-(mx_i+b)))};\\hspace{3mm}\\text{ Since } 1-\\sigma(x)=\\sigma(-x)\\\\\n              &= -\\sum_{i=1}^{n}y_i\\left[\\log{(\\sigma(mx_i+b))}-\\log{(\\sigma(-(mx_i+b)))}\\right]+\\log{(-\\sigma(mx_i+b))}\\\\\n              &= -\\sum_{i=1}^{n}y_i\\log{\\left(\\frac{\\sigma(mx_i+b)}{\\sigma(-(mx_i+b))}\\right)}+\\log{(-\\sigma(mx_i+b))}\\\\\n              &= -\\sum_{i=1}^{n}y_i(mx_i+b)+\\log{(\\sigma(-(mx_i+b)))};\\hspace{3mm}\\text{ Since }\\frac{\\sigma(x)}{-\\sigma(x)}=e^x\\\\\n\\end{align*}\\]\nNow we again use the beautiful features of the sigmoid function\n\\[\\begin{align*}\n\\frac{d\\sigma(x)}{dx}&=\\frac{d}{dx}\\left(\\frac{1}{1+e^{-x}}\\right)=\\frac{e^{-x}}{\\left(1+e^{-x}\\right)^2}=\\frac{1}{1+e^{-x}}\\cdot \\frac{e^{-x}}{1+e^{-x}}\\\\\n&=\\sigma(x)\\left(1-\\frac{1}{1+e^{-x}}\\right)=\\sigma(x)(1-\\sigma(x))\\\\\n&=\\sigma(x)\\sigma(-x)\n\\end{align*}\\]\nFinally, we are ready to take the partial derivatives of the loss function with respect to \\(m\\) and \\(b\\),\n\\[\\begin{align*}\n\\frac{\\partial \\ell}{\\partial m} &= -\\sum_{i=1}^{n}y_ix_i+\\frac{1}{\\sigma(-(mx_i+b))}\\frac{d}{dx}(\\sigma(-(mx_i+b)))\\\\\n& =-\\sum_{i=1}^{n}y_ix_i+\\frac{1}{\\sigma(-(mx_i+b))}\\sigma(-(mx_i+b))\\sigma(mx_i+b)(-x_i)\\\\\n& = -\\sum_{i=1}^{n} x_i(y_i-\\sigma(mx_i+b))\\\\\n& = \\sum_{i=1}^{n}x_i(p_{m,b}(x_i)-y_i)=\\sum_{i=1}^{n} x_i(\\hat{y_i}-y_i)\\\\\n& = \\mathbf{x_i}\\cdot(\\mathbf{\\hat{y_i}}-\\mathbf{y_i})\\\\\n\\text{ and } & \\\\\n& \\\\\n\\frac{\\partial \\ell}{\\partial b} & = -\\sum_{i=1}^{n} y_i +\\frac{1}{\\sigma(-(mx_i+b))}\\frac{d}{dx}(\\sigma(-(mx_i+b)))\\\\\n& =  -\\sum_{i=1}^{n} y_i - \\frac{1}{\\sigma(-(mx_i+b))}\\sigma(-(mx_i+b))\\sigma(mx_i+b)\\\\\n& = \\sum_{i=1}^{n} p_{m,b}(x_i)-y_i= \\sum_{i=1}^{n} \\hat{y}_i-y_i\\\\\n& = \\hat{\\mathbf{y}}_i-\\mathbf{y}_i\n\\end{align*}\\]\nUsing this gradient, we update the parameter vector \\(\\theta\\) iteratively:\n\\[\n\\theta_{j+1} := \\theta_j - \\alpha \\nabla \\ell (\\theta_j)\n\\]\nWhere:\n\n\\(\\alpha\\) is the learning rate\n\\(\\nabla \\ell (\\theta_j)\\) is the partial derivative of the cost function with respect to \\(\\theta_j\\) and \\[\n\\nabla \\ell (\\theta) = \\begin{bmatrix}\\sum_{i=1}^{n} \\hat{y}_i-y_i \\\\\n\\sum_{i=1}^{n} x_i(\\hat{y_i}-y_i) \\end{bmatrix}  =\\begin{bmatrix}\\hat{\\mathbf{y}}_i-\\mathbf{y}_i \\\\\n\\mathbf{x_i}\\cdot(\\mathbf{\\hat{y_i}}-\\mathbf{y_i}) \\end{bmatrix}= X^T(\\hat{\\mathbf{y}}_i-\\mathbf{y}_i)=X^T(\\sigma(X\\vec{\\theta})-\\vec{y})\n\\]"
  },
  {
    "objectID": "dsandml/logreg/index.html#python-code-implementation-from-scratch",
    "href": "dsandml/logreg/index.html#python-code-implementation-from-scratch",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "Python Code Implementation from Scratch",
    "text": "Python Code Implementation from Scratch\nHere’s how to implement Logistic Regression from scratch in Python. We will use two different forms for our class\n\nimport numpy as np\n\nclass LogisticRegression1:\n    def __init__(self, learning_rate = 0.1, n_iterations = 1000):\n        \"\"\"\n        Hyper Parameters\n        - learning_rate: learning rate; float; default 0.01\n        - n_itearations: number of iterations; int; default 1000\n        Model Parameters\n        - weights: weights of the features; float or int\n        - bias: bias of the model; float or int\n        \"\"\"\n        self.learning_rate = learning_rate\n        self.n_iterations = n_iterations \n        self.weights = None\n        self.bias = None \n    \n    def _sigmoid(self, x):\n        return 1/(1+np.exp(-x))\n\n    def fit(self, X,y):\n        \"\"\"\n        n_sample = number of samples in the data set: the value n\n        n_features = number of features or the dimension of the data set: the value d\n        \"\"\"\n        n_sample,n_features = X.shape\n        self.weights = np.zeros(n_features) \n        self.bias = 0\n\n        for _ in range(self.n_iterations):\n            linear = np.dot(X, self.weights) + self.bias\n            pred = self._sigmoid(linear)\n\n            dw = (1/n_sample)* np.dot(X.T,(pred-y))\n            db = (1/n_sample) * np.sum(pred-y)\n\n            self.weights = self.weights - self.learning_rate * dw \n            self.bias = self.bias - self.learning_rate * db\n    \n    def predict(self, X):\n        linear = np.dot(X, self.weights) + self.bias\n        predicted_y = self._sigmoid(linear)\n        class_of_y = [0 if y&lt;=0.5 else 1 for y in predicted_y]\n        return class_of_y\n\nNow let’s use this using the scikit-learn breast cancer data set.\n\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nb_cancer = load_breast_cancer()\nX, y = b_cancer.data, b_cancer.target\nX_train, X_test, y_train, y_test = train_test_split(X,y, random_state=123, stratify=y, test_size=0.30)\n\nclf1 = LogisticRegression1(learning_rate=0.01)\nclf1.fit(X_train, y_train)\npredicted_y = clf1.predict(X_test)\nprint(np.round(accuracy_score(predicted_y, y_test),2))\n\n0.91\n\n\nNow lets compare this with the standard scikit-learn library\n\nfrom sklearn.linear_model import LogisticRegression\n\nclf2 = LogisticRegression()\nclf2.fit(X_train, y_train)\npredicted_y = clf2.predict(X_test)\nprint(np.round(accuracy_score(predicted_y, y_test),2))\n\n0.96"
  },
  {
    "objectID": "dsandml/logreg/index.html#references",
    "href": "dsandml/logreg/index.html#references",
    "title": "Classification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code",
    "section": "References",
    "text": "References\n\nBishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer.\nHastie, T., Tibshirani, R., & Friedman, J. (2009). The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer.\nGradient descent is a widely used optimization technique in machine learning.\nGoodfellow, I., Bengio, Y., & Courville, A. (2016). Deep Learning. MIT Press.\nNocedal, J., & Wright, S. (2006). Numerical Optimization (2nd ed.). Springer.\nRegularization techniques like L2 (Ridge) and L1 (Lasso) are commonly used in logistic regression to prevent overfitting.\nNg, A. (2004). Feature Selection, L1 vs. L2 Regularization, and Rotational Invariance. ICML Proceedings.\nFriedman, J., Hastie, T., & Tibshirani, R. (2010). Regularization Paths for Generalized Linear Models via Coordinate Descent. Journal of Statistical Software, 33(1), 1-22.\nThe extension of logistic regression to multiclass classification via the softmax function is part of the core material for understanding classification tasks.\nMurphy, K. P. (2012). Machine Learning: A Probabilistic Perspective. MIT Press.\nBishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer.\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O’Reilly Media.\nRaschka, S., & Mirjalili, V. (2017). Python Machine Learning: Machine Learning and Deep Learning with Python, scikit-learn, and TensorFlow 2. Packt Publishing.\n\n\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/regularization/index.html",
    "href": "dsandml/regularization/index.html",
    "title": "Model Fine Tuning: Regularization",
    "section": "",
    "text": "Regularization is a key concept in machine learning that helps prevent overfitting, improve model generalization, and make models more robust to new data. It adds a penalty to the loss function to discourage the model from fitting the noise in the training data, which leads to overfitting.\n\n\nOverfitting occurs when a model performs well on the training data but fails to generalize to new, unseen data. This happens when the model is too complex and captures both the signal and the noise in the data.\nUnderfitting, on the other hand, happens when a model is too simple to capture the underlying patterns in the data, resulting in poor performance even on the training set.\n\n\nRegularization helps strike a balance between overfitting and underfitting by controlling model complexity and encouraging simpler models that generalize better."
  },
  {
    "objectID": "dsandml/regularization/index.html#introduction",
    "href": "dsandml/regularization/index.html#introduction",
    "title": "Model Fine Tuning: Regularization",
    "section": "",
    "text": "Regularization is a key concept in machine learning that helps prevent overfitting, improve model generalization, and make models more robust to new data. It adds a penalty to the loss function to discourage the model from fitting the noise in the training data, which leads to overfitting.\n\n\nOverfitting occurs when a model performs well on the training data but fails to generalize to new, unseen data. This happens when the model is too complex and captures both the signal and the noise in the data.\nUnderfitting, on the other hand, happens when a model is too simple to capture the underlying patterns in the data, resulting in poor performance even on the training set.\n\n\nRegularization helps strike a balance between overfitting and underfitting by controlling model complexity and encouraging simpler models that generalize better."
  },
  {
    "objectID": "dsandml/regularization/index.html#types-of-regularization",
    "href": "dsandml/regularization/index.html#types-of-regularization",
    "title": "Model Fine Tuning: Regularization",
    "section": "Types of Regularization",
    "text": "Types of Regularization\nThere are several types of regularization techniques used in machine learning, with the most common being:\n\n\\(L_2\\) Regularization (Ridge Regression)\n\\(L_1\\) Regularization (Lasso Regression)\nElastic Net Regularization\nDropout (for neural networks)\n\nHere we will discus the first two kind only."
  },
  {
    "objectID": "dsandml/regularization/index.html#l_2-regularization-ridge-regression",
    "href": "dsandml/regularization/index.html#l_2-regularization-ridge-regression",
    "title": "Model Fine Tuning: Regularization",
    "section": "\\(L_2\\) Regularization (Ridge Regression)",
    "text": "\\(L_2\\) Regularization (Ridge Regression)\n\n\\(L_2\\) regularization (also known as Ridge regression in linear models) adds a penalty term to the loss function proportional to the sum of the squared coefficients (weights) of the model. The goal is to minimize both the original loss function and the magnitude of the coefficients.\n\nFor a linear regression model, the objective is to minimize the following regularized loss function:\n\\[\nJ(\\theta) = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y_i})^2 + \\lambda \\sum_{j=1}^{p} \\theta_j^2\n\\]\nWhere:\n\n\\(\\hat{y_i}\\) is the model’s predicted output for input \\(x_i\\).\n\\(y_i\\) is the true target value.\n\\(\\theta_j\\) are the model parameters (coefficients).\n\\(\\lambda\\) is the regularization strength, controlling the magnitude of the penalty (higher \\(\\lambda\\) increases regularization).\n\nMore about \\(\\lambda\\)\n\n\\(\\lambda\\) is a continuous non-negative scaler value, typically a floating-point number.\n\nMinimum \\(\\lambda=0\\), model becomes the standard linear regression model. For smaller \\(\\lambda\\) the regularization effect is minimal, allowing the model to fit the training data more closely.\nIn theory, there is no upper bound for \\(\\lambda\\). However, as \\(\\lambda\\) increases, the model becomes more regularized, and the coefficients tend to shrink toward zero.\n\n\nSelecting the optimal value of \\(\\lambda\\) is crucial. Typically, it’s done via cross-validation, where different values of \\(\\lambda\\) are tried, and the model is evaluated based on its performance on the validation set. The value that results in the best generalization is selected.\n\n\\(L_2\\) regularization shrinks the coefficients towards zero but doesn’t force them to be exactly zero, thus retaining all features in the model.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import Ridge,LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\n\n# Generate synthetic data\nnp.random.seed(0)\nX = 2 * np.random.rand(100, 1)\ny = 4 + 3 * X + np.random.randn(100, 1)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# LinearRegression model \nlinear_model = LinearRegression()\nlinear_model.fit(X_train,y_train)\ny_pred_linear = linear_model.predict(X_test)\nmse_linear = mean_squared_error(y_test, y_pred_linear)\nprint(f\"Mean Squared Error (Linear Regression): {mse_linear:.2f}\")\n\n# Train Ridge regression model (L2 Regularization)\nsc = StandardScaler()\nX_train_sc = sc.fit_transform(X_train)\nX_test_sc = sc.transform(X_test)\nridge_model = Ridge(alpha=10)  # alpha is the regularization strength (lambda)\nridge_model.fit(X_train_sc, y_train)\n\n# Predictions and evaluation\ny_pred_ridge = ridge_model.predict(X_test_sc)\nmse_ridge = mean_squared_error(y_test, y_pred_ridge)\nprint(f\"Mean Squared Error (Ridge Regression): {mse_ridge:.2f}\")\n\n# Plot the results\nplt.scatter(X_test, y_test, color='blue', label='True Data')\nplt.plot(X_test, y_pred_linear, color='green', label='Linear Prediction')\nplt.plot(X_test, y_pred_ridge, color='red', label='Ridge Prediction')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.title('Ridge Regularization')\nplt.legend()\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.savefig('rg.png')\nplt.show()\n\nMean Squared Error (Linear Regression): 0.92\nMean Squared Error (Ridge Regression): 0.92\n\n\n\n\n\n\n\n\n\nIn this example, alpha corresponds to \\(\\lambda\\), the regularization strength. A higher value of alpha will result in stronger regularization, shrinking the model coefficients more."
  },
  {
    "objectID": "dsandml/regularization/index.html#l_1-regularization-lasso-regression",
    "href": "dsandml/regularization/index.html#l_1-regularization-lasso-regression",
    "title": "Model Fine Tuning: Regularization",
    "section": "\\(L_1\\) Regularization (Lasso Regression)",
    "text": "\\(L_1\\) Regularization (Lasso Regression)\n\\(L_1\\) regularization (also known as Lasso regression) adds a penalty term proportional to the sum of the absolute values of the coefficients. This type of regularization can force some coefficients to be exactly zero, effectively performing feature selection.\nThe objective function for L1 regularization is:\n\\[\nJ(\\theta) = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y_i})^2 + \\lambda \\sum_{j=1}^{p} |\\theta_j|\n\\]\nWhere:\n\nThe terms are the same as those for \\(L_2\\) regularization.\nThe penalty is the absolute value of the coefficients instead of the squared value.\n\n\\(L_1\\) regularization has the effect of making some coefficients exactly zero, which means it can be used to reduce the number of features in the model.\n\nfrom sklearn.linear_model import Lasso\n\nprint(f\"Mean Squared Error (Linear Regression): {mse_linear:.2f}\")\n\n# Train Lasso regression model (L1 Regularization)\nlasso_model = Lasso(alpha=.5)  # alpha is the regularization strength (lambda)\nlasso_model.fit(X_train_sc, y_train)\n\n# Predictions and evaluation\ny_pred_lasso = lasso_model.predict(X_test_sc)\nmse_lasso = mean_squared_error(y_test, y_pred_lasso)\nprint(f\"Mean Squared Error (Lasso Regression): {mse_lasso:.2f}\")\n\n# Plot the results\nplt.scatter(X_test, y_test, color='blue', label='Data')\nplt.plot(X_test, y_pred_linear, color='red', label='Linear Prediction')\nplt.plot(X_test, y_pred_lasso, color='green', label='Lasso Prediction')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.title('Lasso Regularization')\nplt.legend()\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\nMean Squared Error (Linear Regression): 0.92\nMean Squared Error (Lasso Regression): 1.02"
  },
  {
    "objectID": "dsandml/regularization/index.html#discussion",
    "href": "dsandml/regularization/index.html#discussion",
    "title": "Model Fine Tuning: Regularization",
    "section": "Discussion",
    "text": "Discussion\n\nChoosing the Right \\(\\lambda\\)\nSelecting the optimal value of \\(\\lambda\\) is crucial. Typically, it’s done via cross-validation, where different values of \\(\\lambda\\) are tried, and the model is evaluated based on its performance on the validation set. The value that results in the best generalization is selected.\n\n\nImpact of \\(\\lambda\\) on Bias-Variance Trade-off\n\nLow \\(\\lambda\\): Leads to a low bias and high variance model because the model closely fits the training data.\nHigh \\(\\lambda\\): Leads to a high bias and low variance model, as the regularization prevents the model from fitting the training data too closely, reducing the variance but increasing the bias.\n\n\n\nFacts\nScaling is required for both Ridge and Lasso regression as they are not scale invariant due to the different norms in the definition.\n\n\n\n\n\n\n\n\nCriteria\nL1 Regularization (Lasso)\nL2 Regularization (Ridge)\n\n\n\n\nFeature Selection\nCan set some coefficients exactly to zero, effectively performing feature selection.\nDoes not set coefficients to zero; shrinks them but retains all features.\n\n\nHandling Multicollinearity\nNot ideal for handling highly correlated features, as it may arbitrarily select one feature and discard the others.\nWorks better in the presence of multicollinearity, as it tends to spread the penalty across correlated features.\n\n\nEffect on Coefficients\nSparse solutions; coefficients are either zero or relatively large, favoring simpler models with fewer features.\nCoefficients are small and distributed more evenly across all features, leading to less sparse solutions.\n\n\nInterpretability\nEasier to interpret, as some features are removed, simplifying the model.\nAll features remain in the model, making it harder to interpret when there are many features.\n\n\nComputational Complexity\nCan be computationally intensive with a large number of features due to the non-smooth nature of the L1 penalty.\nLess computationally expensive due to its smooth penalty term (squared coefficients).\n\n\nBest Suited For\nWhen you want a sparse model with feature selection, and when the number of irrelevant features is large.\nWhen you want to retain all features, especially in cases of multicollinearity, and avoid overfitting by shrinking coefficients.\n\n\nWhen to Use\n\nWhen you expect only a few features to be important.\nWhen you want automatic feature selection.\nWhen you need a simple, interpretable model.\n\n\nWhen you believe all features contribute to the target.\n\n\nWhen dealing with multicollinear data.\n\n\nWhen you want to prevent overfitting but don’t want feature elimination."
  },
  {
    "objectID": "dsandml/regularization/index.html#references",
    "href": "dsandml/regularization/index.html#references",
    "title": "Model Fine Tuning: Regularization",
    "section": "References",
    "text": "References\n\nTibshirani, R. (1996). Regression shrinkage and selection via the lasso. Journal of the Royal Statistical Society: Series B (Methodological), 58(1), 267-288.\nHoerl, A. E., & Kennard, R. W. (1970). Ridge regression: Biased estimation for nonorthogonal problems. Technometrics, 12(1), 55-67.\nZou, H., & Hastie, T. (2005). Regularization and variable selection via the elastic net. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 67(2), 301-320.\nSrivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., & Salakhutdinov, R. (2014). Dropout: A simple way to prevent neural networks from overfitting. Journal of Machine Learning Research, 15(1), 1929-1958.\nGoodfellow, I., Bengio, Y., & Courville, A. (2016). Deep Learning. MIT Press.\nMurphy, K. P. (2012). Machine Learning: A Probabilistic Perspective. MIT Press.\n\n\nShare on\n\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html",
    "href": "dsandml/classificationmetrics/index.html",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "",
    "text": "In any classification problem, the goal is to build a model that accurately predicts labels or classes from input data. Once the model is built, it is important to evaluate its performance using a variety of metrics. Some of the most commonly used metrics are the confusion matrix, accuracy, precision, recall, F1 score, and ROC-AUC curve. This post will explain each metric and show how to compute them using real data in Python.\n\n\n\nA confusion matrix is a tabular summary of the performance of a classification algorithm. It shows the number of correct and incorrect predictions broken down by each class.\nFor a binary classification, the confusion matrix looks like this:\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\ndef plot_confusion_matrix():\n    \n    matrix_data = np.array([[100, 5], [10, 50]])\n\n    \n    extended_matrix = np.zeros((3, 3))  \n    extended_matrix[:2, :2] = matrix_data  \n\n    mask = np.zeros_like(extended_matrix, dtype=bool)\n    mask[2,:] = True\n    mask[:,2] = True\n\n    # Create a plot\n    fig, ax = plt.subplots(figsize=(8, 5.2))\n\n    fig.patch.set_facecolor('#f4f4f4') \n    ax.set_facecolor('#f4f4f4')\n\n    sns.heatmap(extended_matrix, mask=mask,annot=False, cmap=\"RdYlGn\", cbar=False, ax=ax, linewidths=2, linecolor='black')\n\n    # Add the original confusion matrix values (True Positive, False Negative, etc.)\n    ax.text(0.4, 0.3, 'True Positive (TP)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(1.45, 0.3, 'False Negative (FN)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(1.45, 0.60, '(Type II Error)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(0.45, 1.25, 'False Positive (FP)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(0.45, 1.40, '(Type I Error)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(1.45, 1.4, 'True Negative (TN)', ha='center', va='center', fontsize=12, color=\"red\")\n    ax.text(0.4, -0.1, 'Positive', ha='center', va='center', fontsize=12)\n    ax.text(1.45, -0.1, 'Negative', ha='center', va='center', fontsize=12)\n    ax.text(1, -0.3, 'Predicted Class', ha='center', va='center', fontsize=14)\n\n    # Add Precision and NPV in the bottom row of the confusion matrix\n    ax.text(0.17, 0.2, r'Precision= $\\frac{TP}{TP + FP}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.5, 0.2, r'NPV= $\\frac{TN}{TN + FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n\n    # Add Sensitivity and Specificity in the right column of the confusion matrix\n    ax.text(0.83, .95, r'TPR=Sensitivity= $\\frac{TP}{TP + FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .89, 'or Recall', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .8, 'False Neg. Rate (FNR)', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .75, r'Type II Error rate= $\\frac{FN}{TP + FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .6, r'TNR=Specificity= $\\frac{TN}{TN + FP}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .48, 'False Positive Rate', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .43, r'FPR= $\\frac{FP}{TN + FP}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .37, 'Type I Error Rate', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n\n    # Add Accuracy in the bottom-right corner of the extended grid\n    ax.text(0.83, 0.2, r'Accuracy= $\\frac{TP + TN}{TP+TN+FP+FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n\n    # Titles and labels\n    ax.set_ylabel('Actual Class', fontsize=14)\n    \n\n    # Set tick labels for actual and predicted\n    ax.xaxis.set_ticklabels([' ', ' ', ''], fontsize=12)\n    ax.yaxis.set_ticklabels(['Positive', 'Negative', ''], fontsize=12, rotation=0)\n\n    plt.tight_layout()\n    plt.savefig('conf.png')\n    plt.show()\n\n# Generate the confusion matrix plot\nplot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\nTrue Positive (TP): The model correctly predicted the positive class.\nFalse Positive (FP): The model incorrectly predicted the positive class (also known as a Type I error).\nTrue Negative (TN): The model correctly predicted the negative class.\nFalse Negative (FN): The model incorrectly predicted the negative class (also known as a Type II error).\n\n\n\n\nAccuracy is the ratio of correctly predicted observations to the total observations.\n\\[\n\\text{Accuracy} = \\frac{TP + TN}{TP + TN + FP + FN}\n\\]\nIt is one of the most intuitive metrics, but it can be misleading if the classes are imbalanced.\n\n\n\nPrecision measures the proportion of positive predictions that are actually correct.\n\\[\n\\text{Precision} = \\frac{TP}{TP + FP}\n\\]\nIt is useful when the cost of a false positive is high, such as in fraud detection.\n\n\n\nRecall measures the proportion of actual positives that are correctly predicted.\n\\[\n\\text{Recall} = \\frac{TP}{TP + FN}\n\\]\nIt is important in cases where missing a positive is more costly, like in medical diagnoses.\n\n\n\nThe F1 score is the harmonic mean of precision and recall, giving a balanced measure when both metrics are important.\n\\[\n\\text{F1 Score} = 2 \\times \\frac{\\text{Precision} \\times \\text{Recall}}{\\text{Precision} + \\text{Recall}}\n\\]\n\n\n\n\nThe ROC-AUC curve helps visualize the performance of a classification model by plotting the true positive rate (recall) against the false positive rate (1 - specificity) at various threshold settings. The AUC (Area Under the Curve) gives a single number that summarizes the performance. A model with an AUC of 1 is perfect, while a model with an AUC of 0.5 is as good as random guessing.\n\n\n\n\n\n\n\n\n\n\n\nMetric\nFormula\n\n\n\n\nPrecision:\n\\(\\frac{TP}{TP+FP}\\)\n\n\nSensitivity or Recall or True Positive Rate (TPR):\n\\(\\frac{TP}{TP+FN}\\)\n\n\nType II Error Rate or False Negative Rate (FNR):\n\\(\\frac{FN}{FN+TP}\\)\n\n\nSepecificity or Selectivity or True Negative Rate (TNR):\n\\(\\frac{TN}{TN+FP}\\)\n\n\nType I Error Rate or False Positive Rate (FPR):\n\\(\\frac{FP}{FP+TN}\\)\n\n\nTotal Error Rate:\n\\(\\frac{FP+FN}{TN+TP+FN+FP}\\)\n\n\nAccuracy:\n\\(\\frac{TP+TN}{TN+TP+FN+FP}\\)"
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#introduction",
    "href": "dsandml/classificationmetrics/index.html#introduction",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "",
    "text": "In any classification problem, the goal is to build a model that accurately predicts labels or classes from input data. Once the model is built, it is important to evaluate its performance using a variety of metrics. Some of the most commonly used metrics are the confusion matrix, accuracy, precision, recall, F1 score, and ROC-AUC curve. This post will explain each metric and show how to compute them using real data in Python.\n\n\n\nA confusion matrix is a tabular summary of the performance of a classification algorithm. It shows the number of correct and incorrect predictions broken down by each class.\nFor a binary classification, the confusion matrix looks like this:\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\ndef plot_confusion_matrix():\n    \n    matrix_data = np.array([[100, 5], [10, 50]])\n\n    \n    extended_matrix = np.zeros((3, 3))  \n    extended_matrix[:2, :2] = matrix_data  \n\n    mask = np.zeros_like(extended_matrix, dtype=bool)\n    mask[2,:] = True\n    mask[:,2] = True\n\n    # Create a plot\n    fig, ax = plt.subplots(figsize=(8, 5.2))\n\n    fig.patch.set_facecolor('#f4f4f4') \n    ax.set_facecolor('#f4f4f4')\n\n    sns.heatmap(extended_matrix, mask=mask,annot=False, cmap=\"RdYlGn\", cbar=False, ax=ax, linewidths=2, linecolor='black')\n\n    # Add the original confusion matrix values (True Positive, False Negative, etc.)\n    ax.text(0.4, 0.3, 'True Positive (TP)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(1.45, 0.3, 'False Negative (FN)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(1.45, 0.60, '(Type II Error)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(0.45, 1.25, 'False Positive (FP)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(0.45, 1.40, '(Type I Error)', ha='center', va='center', fontsize=12, color=\"white\")\n    ax.text(1.45, 1.4, 'True Negative (TN)', ha='center', va='center', fontsize=12, color=\"red\")\n    ax.text(0.4, -0.1, 'Positive', ha='center', va='center', fontsize=12)\n    ax.text(1.45, -0.1, 'Negative', ha='center', va='center', fontsize=12)\n    ax.text(1, -0.3, 'Predicted Class', ha='center', va='center', fontsize=14)\n\n    # Add Precision and NPV in the bottom row of the confusion matrix\n    ax.text(0.17, 0.2, r'Precision= $\\frac{TP}{TP + FP}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.5, 0.2, r'NPV= $\\frac{TN}{TN + FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n\n    # Add Sensitivity and Specificity in the right column of the confusion matrix\n    ax.text(0.83, .95, r'TPR=Sensitivity= $\\frac{TP}{TP + FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .89, 'or Recall', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .8, 'False Neg. Rate (FNR)', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .75, r'Type II Error rate= $\\frac{FN}{TP + FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .6, r'TNR=Specificity= $\\frac{TN}{TN + FP}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .48, 'False Positive Rate', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .43, r'FPR= $\\frac{FP}{TN + FP}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n    ax.text(0.83, .37, 'Type I Error Rate', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n\n    # Add Accuracy in the bottom-right corner of the extended grid\n    ax.text(0.83, 0.2, r'Accuracy= $\\frac{TP + TN}{TP+TN+FP+FN}$', ha='center', va='center', transform=ax.transAxes, fontsize=12)\n\n    # Titles and labels\n    ax.set_ylabel('Actual Class', fontsize=14)\n    \n\n    # Set tick labels for actual and predicted\n    ax.xaxis.set_ticklabels([' ', ' ', ''], fontsize=12)\n    ax.yaxis.set_ticklabels(['Positive', 'Negative', ''], fontsize=12, rotation=0)\n\n    plt.tight_layout()\n    plt.savefig('conf.png')\n    plt.show()\n\n# Generate the confusion matrix plot\nplot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\nTrue Positive (TP): The model correctly predicted the positive class.\nFalse Positive (FP): The model incorrectly predicted the positive class (also known as a Type I error).\nTrue Negative (TN): The model correctly predicted the negative class.\nFalse Negative (FN): The model incorrectly predicted the negative class (also known as a Type II error).\n\n\n\n\nAccuracy is the ratio of correctly predicted observations to the total observations.\n\\[\n\\text{Accuracy} = \\frac{TP + TN}{TP + TN + FP + FN}\n\\]\nIt is one of the most intuitive metrics, but it can be misleading if the classes are imbalanced.\n\n\n\nPrecision measures the proportion of positive predictions that are actually correct.\n\\[\n\\text{Precision} = \\frac{TP}{TP + FP}\n\\]\nIt is useful when the cost of a false positive is high, such as in fraud detection.\n\n\n\nRecall measures the proportion of actual positives that are correctly predicted.\n\\[\n\\text{Recall} = \\frac{TP}{TP + FN}\n\\]\nIt is important in cases where missing a positive is more costly, like in medical diagnoses.\n\n\n\nThe F1 score is the harmonic mean of precision and recall, giving a balanced measure when both metrics are important.\n\\[\n\\text{F1 Score} = 2 \\times \\frac{\\text{Precision} \\times \\text{Recall}}{\\text{Precision} + \\text{Recall}}\n\\]\n\n\n\n\nThe ROC-AUC curve helps visualize the performance of a classification model by plotting the true positive rate (recall) against the false positive rate (1 - specificity) at various threshold settings. The AUC (Area Under the Curve) gives a single number that summarizes the performance. A model with an AUC of 1 is perfect, while a model with an AUC of 0.5 is as good as random guessing.\n\n\n\n\n\n\n\n\n\n\n\nMetric\nFormula\n\n\n\n\nPrecision:\n\\(\\frac{TP}{TP+FP}\\)\n\n\nSensitivity or Recall or True Positive Rate (TPR):\n\\(\\frac{TP}{TP+FN}\\)\n\n\nType II Error Rate or False Negative Rate (FNR):\n\\(\\frac{FN}{FN+TP}\\)\n\n\nSepecificity or Selectivity or True Negative Rate (TNR):\n\\(\\frac{TN}{TN+FP}\\)\n\n\nType I Error Rate or False Positive Rate (FPR):\n\\(\\frac{FP}{FP+TN}\\)\n\n\nTotal Error Rate:\n\\(\\frac{FP+FN}{TN+TP+FN+FP}\\)\n\n\nAccuracy:\n\\(\\frac{TP+TN}{TN+TP+FN+FP}\\)"
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#example-in-python",
    "href": "dsandml/classificationmetrics/index.html#example-in-python",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "Example in Python",
    "text": "Example in Python\nLet’s use a real dataset and compute these metrics using Python. In python the actual confusion matrix looks like this\n\nWe’ll use the breast cancer dataset from sklearn, which is a binary classification problem where the task is to predict whether a tumor is malignant or benign.\n\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve\n\n# Load dataset\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train a RandomForest Classifier\nclf = RandomForestClassifier(random_state=42)\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\ny_pred_proba = clf.predict_proba(X_test)[:, 1]\n\n# Compute the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n# Plot confusion matrix\nplt.figure(figsize=(8,5))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Predicted Benign', 'Predicted Malignant'], yticklabels=['Actual Benign', 'Actual Malignant'])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.gca().set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nNext, Compute Accuracy, Precision, Recall, F1 Score, ROC-AUC\n\ntn = cm[0,0]\nfp = cm[0,1]\nfn = cm[1,0]\ntp = cm[1,1]\naccuracy1 = np.round(accuracy_score(y_test, y_pred),4)\naccuracy2 = np.round(((tp+tn)/(tp+tn+fp+fn)),4)\n\nprecision1 = np.round(precision_score(y_test, y_pred),4)\nprecision2 = np.round(((tp)/(tp+fp)),4)\n\nrecall1 = np.round(recall_score(y_test, y_pred),4)\nrecall2 = np.round(((tp)/(tp+fn)),4)\n\nf1_1 = np.round(f1_score(y_test, y_pred),4) \nf1_2 = np.round((2*precision2*recall2)/(precision2+recall2),4)\n\nroc_auc = roc_auc_score(y_test, y_pred_proba)\n\nprint('Accuracy Using Library = {}, and Accuracy Using Formula = {}'.format(accuracy1,accuracy2))\nprint('Precision Using Library = {}, and Precision Using Formula = {}'.format(precision1,precision2))\nprint('Recall Using Library = {}, and Recall Using Formula = {}'.format(recall1,recall2))\nprint('F1 Score Using Library = {}, and F1 Score Using Formula = {}'.format(f1_1,f1_2))\nprint(f'ROC-AUC score={roc_auc:.4f}')\n\nAccuracy Using Library = 0.9708, and Accuracy Using Formula = 0.9708\nPrecision Using Library = 0.964, and Precision Using Formula = 0.964\nRecall Using Library = 0.9907, and Recall Using Formula = 0.9907\nF1 Score Using Library = 0.9772, and F1 Score Using Formula = 0.9772\nROC-AUC score=0.9968\n\n\nPlot ROC curve. ROC curve is found from plotting True Positive Rate (TPRs) against False Positive Rate (FPRs) for different cutoffs of probability values. To plot the ROC curve using the built-in function from sklearn we do the following:\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nplt.figure(figsize=(8,5))\nplt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\nplt.plot([0, 1], [0, 1], color='red', linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend()\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.gca().set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nTo build our own\n\ncutoff_values = np.arange(0,0.99,0.001)\ntrue_pos_rates = []\nfalse_pos_rates = []\n\nfor cutoff in cutoff_values:\n    prediction = 1*(clf.predict_proba(X_test)[:,1] &gt;= cutoff)\n    conf_matrix = confusion_matrix(y_test, prediction)\n    tn = conf_matrix[0,0]\n    fp = conf_matrix[0,1]\n    fn = conf_matrix[1,0]\n    tp = conf_matrix[1,1]\n\n    true_pos_rates.append(tp/(tp+fn))\n    false_pos_rates.append(fp/(fp+tn))\n\nplt.figure(figsize=(8,5))\nplt.plot(false_pos_rates, true_pos_rates, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\nplt.plot([0, 1], [0, 1], color='red', linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend()\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.gca().set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nNext, precision-recall score\n\ncutoff_values = np.arange(0,0.99,0.001)\nprecisions = []\nrecalls = []\n\nfor cutoff in cutoff_values:\n    prediction = 1*(clf.predict_proba(X_test)[:,1] &gt;= cutoff)\n\n    precisions.append(precision_score(y_test, prediction))\n    recalls.append(recall_score(y_test, prediction))\n\nplt.figure(figsize=(8,5))\nplt.plot(recalls, precisions, color='blue')\nplt.plot([0, 1], [0, 1], color='red', linestyle='--')\nplt.xlabel('Recalls')\nplt.ylabel('Precisions')\nplt.title('Precision-Recall Curve')\nplt.legend()\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.gca().set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\nExplanation of Results\n\nConfusion Matrix: The heatmap shows the number of true positives, false positives, true negatives, and false negatives, which gives a detailed insight into the model’s performance.\nAccuracy: This value tells us the overall correctness of the model. It may not always be reliable if the data is imbalanced.\nPrecision: A higher precision indicates fewer false positives. In this dataset, it tells us how well the model identifies malignant tumors correctly.\nRecall: A higher recall indicates fewer false negatives. This is particularly important in medical settings where missing a positive case (malignant tumor) can be dangerous.\nF1 Score: The F1 score balances precision and recall, especially when the class distribution is uneven.\nROC-AUC Curve: The ROC curve gives a visualization of the trade-off between sensitivity and specificity. The AUC gives a single number summarizing the overall ability of the model to distinguish between classes."
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#when-to-use-each-metric",
    "href": "dsandml/classificationmetrics/index.html#when-to-use-each-metric",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "When to Use Each Metric?",
    "text": "When to Use Each Metric?\nIt’s important to explain when to prioritize specific metrics based on the problem context:\n\nAccuracy: Use when classes are balanced and misclassification costs are similar across classes. Avoid if the dataset is imbalanced.\nPrecision: Useful when false positives are costly. For example, in spam detection, it’s better to have a few missed spams than to mark important emails as spam.\nRecall: Use when false negatives are costly. In medical diagnoses (e.g., cancer detection), it’s crucial to minimize missed positive cases (false negatives).\nF1 Score: Best when you need a balance between precision and recall, especially with imbalanced classes.\nROC-AUC: Useful for evaluating how well your model separates the two classes across various thresholds. Works well when you want an overall measure of performance."
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#threshold-tuning-and-decision-making",
    "href": "dsandml/classificationmetrics/index.html#threshold-tuning-and-decision-making",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "Threshold Tuning and Decision Making",
    "text": "Threshold Tuning and Decision Making\n\nFor classification problems, the decision threshold is crucial, especially for metrics like ROC-AUC. Often, models use a default threshold of 0.5 to classify whether an instance belongs to the positive class or not, but you can adjust this threshold to prioritize recall over precision or vice versa. You could add a section showing how adjusting the threshold can change model performance.\n\nHere’s an additional Python example showing how to adjust thresholds:\n\n# Adjust threshold\nthreshold = 0.4\ny_pred_thresholded = (y_pred_proba &gt;= threshold).astype(int)\n\n# Recompute metrics\nnew_precision = precision_score(y_test, y_pred_thresholded)\nnew_recall = recall_score(y_test, y_pred_thresholded)\nnew_f1 = f1_score(y_test, y_pred_thresholded)\n\nprint(f'New Precision: {new_precision:.4f}')\nprint(f'New Recall: {new_recall:.4f}')\nprint(f'New F1 Score: {new_f1:.4f}')\n\nNew Precision: 0.9554\nNew Recall: 0.9907\nNew F1 Score: 0.9727\n\n\nThis shows that the default threshold isn’t set in stone, and adjusting it can significantly affect precision, recall, and other metrics."
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#class-imbalance-and-its-effect-on-metrics",
    "href": "dsandml/classificationmetrics/index.html#class-imbalance-and-its-effect-on-metrics",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "Class Imbalance and Its Effect on Metrics",
    "text": "Class Imbalance and Its Effect on Metrics\n\nClass imbalance can skew metrics like accuracy. A discussion on how to handle imbalance through methods such as resampling (oversampling/undersampling) or using techniques like SMOTE (Synthetic Minority Over-sampling Technique) could provide further depth.\n\nFor example:\n\nfrom imblearn.over_sampling import SMOTE\n\n# Handling class imbalance using SMOTE\nsmote = SMOTE(random_state=42)\nX_resampled, y_resampled = smote.fit_resample(X_train, y_train)\n\n# Retrain the model on resampled data\nclf_resampled = RandomForestClassifier(random_state=42)\nclf_resampled.fit(X_resampled, y_resampled)\n\n# Predictions and metrics\ny_pred_resampled = clf_resampled.predict(X_test)\naccuracy_resampled = accuracy_score(y_test, y_pred_resampled)\nprecision_resampled = precision_score(y_test, y_pred_resampled)\nrecall_resampled = recall_score(y_test, y_pred_resampled)\n\nprint(f'Resampled Accuracy: {accuracy_resampled:.4f}')\nprint(f'Resampled Precision: {precision_resampled:.4f}')\nprint(f'Resampled Recall: {recall_resampled:.4f}')\n\nResampled Accuracy: 0.9708\nResampled Precision: 0.9813\nResampled Recall: 0.9722\n\n\nThis demonstrates the effect of handling class imbalance on model performance."
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#precision-recall-curve",
    "href": "dsandml/classificationmetrics/index.html#precision-recall-curve",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "Precision-Recall Curve",
    "text": "Precision-Recall Curve\n\nWhile the ROC curve is useful, the Precision-Recall (PR) curve is often more informative when dealing with imbalanced datasets because it focuses on the performance of the positive class. Including a section on this can enhance the evaluation process.\n\n\nfrom sklearn.metrics import precision_recall_curve\n\n# Compute Precision-Recall curve\nprecision_vals, recall_vals, _ = precision_recall_curve(y_test, y_pred_proba)\n\n# Plot Precision-Recall curve\nplt.figure(figsize=(8, 5))\nplt.plot(recall_vals, precision_vals, marker='.')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.gca().set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nThe PR curve shows how precision and recall change with different classification thresholds."
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#kappa-score-and-matthews-correlation-coefficient-mcc",
    "href": "dsandml/classificationmetrics/index.html#kappa-score-and-matthews-correlation-coefficient-mcc",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "Kappa Score and Matthews Correlation Coefficient (MCC)",
    "text": "Kappa Score and Matthews Correlation Coefficient (MCC)\n\nCohen’s Kappa measures agreement between observed accuracy and expected accuracy.\nMatthews Correlation Coefficient (MCC) provides a balanced metric even when classes are imbalanced. It considers true and false positives and negatives, giving a correlation-like score between predictions and actuals.\n\n\nfrom sklearn.metrics import cohen_kappa_score, matthews_corrcoef\n\nkappa = cohen_kappa_score(y_test, y_pred)\nmcc = matthews_corrcoef(y_test, y_pred)\n\nprint(f'Cohen\\'s Kappa: {kappa:.4f}')\nprint(f'MCC: {mcc:.4f}')\n\nCohen's Kappa: 0.9365\nMCC: 0.9372"
  },
  {
    "objectID": "dsandml/classificationmetrics/index.html#references",
    "href": "dsandml/classificationmetrics/index.html#references",
    "title": "Model Evaluation and Fine Tuning: Classification Metrices",
    "section": "References",
    "text": "References\n\nScikit-learn Documentation\nPrecision-Recall vs ROC Curves article by Sebastian Raschka\n\nF1 Score Explained towardsdatascience.com blog post\n\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/datacollection/index.html",
    "href": "dsandml/datacollection/index.html",
    "title": "Data collection through Webscraping",
    "section": "",
    "text": "Collecting data and preparing it for a project is one of the most important tasks in any data science or machine learning project. There are many sources from where we can collect data for a project, such as\n\nConnecting to a SQL database server\n\nData Source Websites such as Kaggle, Google Dataset Search, UCI Machine Learning Repo etc\n\nWeb Scraping with Beautiful Soup\nUsing Python API"
  },
  {
    "objectID": "dsandml/datacollection/index.html#introduction",
    "href": "dsandml/datacollection/index.html#introduction",
    "title": "Data collection through Webscraping",
    "section": "",
    "text": "Collecting data and preparing it for a project is one of the most important tasks in any data science or machine learning project. There are many sources from where we can collect data for a project, such as\n\nConnecting to a SQL database server\n\nData Source Websites such as Kaggle, Google Dataset Search, UCI Machine Learning Repo etc\n\nWeb Scraping with Beautiful Soup\nUsing Python API"
  },
  {
    "objectID": "dsandml/datacollection/index.html#data-source-websites",
    "href": "dsandml/datacollection/index.html#data-source-websites",
    "title": "Data collection through Webscraping",
    "section": "Data Source Websites",
    "text": "Data Source Websites\nData source websites mainly falls into two categories such as data repositories and data science competitions. There are many such websites.\n\nThe UCI Machine Learning Repository\n\nThe Harvard Dataverse\nThe Mendeley Data Repository\nThe 538\nThe New Yourk Times\n\nThe International Data Analysis Olympiad\nKaggle Competition\n\nExample of collecting data from UCI Machine Learning Repository\n\nfrom ucimlrepo import fetch_ucirepo \n  \n# fetch dataset \niris = fetch_ucirepo(id=53) \n  \n# data (as pandas dataframes) \nX = iris.data.features \ny = iris.data.targets \n  \n# metadata \nprint(iris.metadata) \n  \n# variable information \nprint(iris.variables) \n\n{'uci_id': 53, 'name': 'Iris', 'repository_url': 'https://archive.ics.uci.edu/dataset/53/iris', 'data_url': 'https://archive.ics.uci.edu/static/public/53/data.csv', 'abstract': 'A small classic dataset from Fisher, 1936. One of the earliest known datasets used for evaluating classification methods.\\n', 'area': 'Biology', 'tasks': ['Classification'], 'characteristics': ['Tabular'], 'num_instances': 150, 'num_features': 4, 'feature_types': ['Real'], 'demographics': [], 'target_col': ['class'], 'index_col': None, 'has_missing_values': 'no', 'missing_values_symbol': None, 'year_of_dataset_creation': 1936, 'last_updated': 'Tue Sep 12 2023', 'dataset_doi': '10.24432/C56C76', 'creators': ['R. A. Fisher'], 'intro_paper': {'ID': 191, 'type': 'NATIVE', 'title': 'The Iris data set: In search of the source of virginica', 'authors': 'A. Unwin, K. Kleinman', 'venue': 'Significance, 2021', 'year': 2021, 'journal': 'Significance, 2021', 'DOI': '1740-9713.01589', 'URL': 'https://www.semanticscholar.org/paper/4599862ea877863669a6a8e63a3c707a787d5d7e', 'sha': None, 'corpus': None, 'arxiv': None, 'mag': None, 'acl': None, 'pmid': None, 'pmcid': None}, 'additional_info': {'summary': 'This is one of the earliest datasets used in the literature on classification methods and widely used in statistics and machine learning.  The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant.  One class is linearly separable from the other 2; the latter are not linearly separable from each other.\\n\\nPredicted attribute: class of iris plant.\\n\\nThis is an exceedingly simple domain.\\n\\nThis data differs from the data presented in Fishers article (identified by Steve Chadwick,  spchadwick@espeedaz.net ).  The 35th sample should be: 4.9,3.1,1.5,0.2,\"Iris-setosa\" where the error is in the fourth feature. The 38th sample: 4.9,3.6,1.4,0.1,\"Iris-setosa\" where the errors are in the second and third features.  ', 'purpose': 'N/A', 'funded_by': None, 'instances_represent': 'Each instance is a plant', 'recommended_data_splits': None, 'sensitive_data': None, 'preprocessing_description': None, 'variable_info': None, 'citation': None}}\n           name     role         type demographic  \\\n0  sepal length  Feature   Continuous        None   \n1   sepal width  Feature   Continuous        None   \n2  petal length  Feature   Continuous        None   \n3   petal width  Feature   Continuous        None   \n4         class   Target  Categorical        None   \n\n                                         description units missing_values  \n0                                               None    cm             no  \n1                                               None    cm             no  \n2                                               None    cm             no  \n3                                               None    cm             no  \n4  class of iris plant: Iris Setosa, Iris Versico...  None             no  \n\n\nyou may need to install the UCI Machine Learning Repository as a package using pip.\npip install ucimlrepo\n\nX.head()\n\n\n\n\n\n\n\n\nsepal length\nsepal width\npetal length\npetal width\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\n\n\n1\n4.9\n3.0\n1.4\n0.2\n\n\n2\n4.7\n3.2\n1.3\n0.2\n\n\n3\n4.6\n3.1\n1.5\n0.2\n\n\n4\n5.0\n3.6\n1.4\n0.2"
  },
  {
    "objectID": "dsandml/datacollection/index.html#web-scraping",
    "href": "dsandml/datacollection/index.html#web-scraping",
    "title": "Data collection through Webscraping",
    "section": "Web Scraping",
    "text": "Web Scraping\nWe scrapping is another way of collecting the data for the research if the data is not available in any repositiory. We can collect the data from a website using a library called BeautifulSoup if the website has permision for other people to collect data from the website.\n\nimport bs4                      # library for BeautifulSoup\nfrom bs4 import BeautifulSoup   # import the BeautifulSoup object\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom seaborn import set_style\nset_style(\"whitegrid\")\n\nNow let’s make a html object using BeautifulSoup. Let’s say we have a html website that looks like below\n\nhtml_doc=\"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;My Dummy HTML Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Dummy HTML Document&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph in my dummy HTML document.&lt;/p&gt;\n    &lt;a href=\"https://mrislambd.github.io/blog\" class=\"blog\" id=\"blog\"&gt; Blog &lt;/a&gt;\n    &lt;a href=\"htpps://mrislambd.github.io/research\" class=\"research\" id=\"research\"&gt; Research &lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nNow we want to grab information from the dummy html documnet above.\n\nsoup=BeautifulSoup(html_doc, features='html.parser')\n\nNow that we have the object soup we can walk through each elements in this object. For example, if we want to grab the title element,\n\nsoup.html.head.title\n\n&lt;title&gt;My Dummy HTML Document&lt;/title&gt;\n\n\nSince the html document has only one title, therefore, we can simply use the following command\n\nsoup.title \n\n&lt;title&gt;My Dummy HTML Document&lt;/title&gt;\n\n\nor this command to get the text only\n\nsoup.title.text\n\n'My Dummy HTML Document'\n\n\nThis soup object is like a family tree. It has parents, children, greatgrand parents etc.\n\nsoup.title.parent\n\n&lt;head&gt;\n&lt;title&gt;My Dummy HTML Document&lt;/title&gt;\n&lt;/head&gt;\n\n\nNow to grab an attribute from the soup object we can use\n\nsoup.a\n\n&lt;a class=\"blog\" href=\"https://mrislambd.github.io/blog\" id=\"blog\"&gt; Blog &lt;/a&gt;\n\n\nor any particular thing from the attribute\n\nsoup.a['class']\n\n['blog']\n\n\nWe can also find multiple attribute of the same kind\n\nsoup.findAll('a')\n\n[&lt;a class=\"blog\" href=\"https://mrislambd.github.io/blog\" id=\"blog\"&gt; Blog &lt;/a&gt;,\n &lt;a class=\"research\" href=\"htpps://mrislambd.github.io/research\" id=\"research\"&gt; Research &lt;/a&gt;]\n\n\nThen if we want any particular object from all a attribute\n\nsoup.findAll('a')[0]['id']\n\n'blog'\n\n\nFor any p tag\n\nsoup.p.text \n\n'This is a paragraph in my dummy HTML document.'\n\n\nSimilarly, if we want to grab all the hrefs from the a tags\n\n[h['href'] for h in soup.findAll('a')]\n\n['https://mrislambd.github.io/blog', 'htpps://mrislambd.github.io/research']"
  },
  {
    "objectID": "dsandml/datacollection/index.html#example-of-webscraping-from-a-real-website",
    "href": "dsandml/datacollection/index.html#example-of-webscraping-from-a-real-website",
    "title": "Data collection through Webscraping",
    "section": "Example of Webscraping from a real website",
    "text": "Example of Webscraping from a real website\nIn this example we want to obtain some information from NVIDIA Graduate Fellowship Program. Before accessing this website we need to know if we have permision to access their data through webscraping.\n\nimport requests\nresponse = requests.get(url=\"https://research.nvidia.com/graduate-fellowships/archive\")\nresponse.status_code\n\n200\n\n\nThe status_code \\(200\\) ensures that we have enough permision to acccess their website data. However, if we obtain status_code of \\(403, 400,\\) or \\(500\\) then we do not permision or a bad request. For more about the status codes click here.\n\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nWe want to make an analysis based on the institution of the past graduate fellows. Insepecting the elements in this website we see that the div those have class=\"archive-group\" contains the information of the past graduate fellows.\n\npf = soup.find_all(\"div\", class_=\"archive-group\")\n\nand the first element of this pf contains the information of the graduate fellows in the year of 2021.\n\npf[0]\n\n&lt;div class=\"archive-group\"&gt;\n&lt;h4 class=\"archive-group__title\"&gt;2021 Grad Fellows&lt;/h4&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Alexander Sax&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;University of California, Berkeley&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Hanrui Wang&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Massachusetts Institute of Technology&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Ji Lin&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Massachusetts Institute of Technology&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Krishna Murthy Jatavallabhula&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;University of Montreal&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Rohan Sawhney&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Carnegie Mellon University&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Sana Damani&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Georgia Institute of Technology&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Thierry Tambe&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Harvard University&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Ye Yuan&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Carnegie Mellon University&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Yunzhu Li&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Massachusetts Institute of Technology&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div class=\"views-row\"&gt;&lt;div class=\"views-field views-field-title\"&gt;&lt;span class=\"field-content\"&gt;Zhiqin Chen&lt;/span&gt;&lt;/div&gt;&lt;div class=\"views-field views-field-field-grad-fellow-institution\"&gt;&lt;div class=\"field-content\"&gt;Simon Fraser University&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\nNow let’s make a pandas dataframe using the information in this page. We can make an use of the output from the above chunk. To grab the year, we see that archive-group__title class with a h4 tag contains the year for all years. With strip=True, the text is cleaned by removing extra whitespace from the beginning and end. We need the first element so a split()[0] will do the job. Then we make another group called fellows that contains the fellows in a certian year by using the div and class\"views-row\". Once the new group created, we then iterate through this group to extract their names and corresponding institutions.\n\ndata=[]\n\nfor group in pf:\n    year = group.find(\n        \"h4\",class_=\"archive-group__title\"\n        ).get_text(strip=True).split()[0]\n\n    fellows = group.find_all(\"div\", class_=\"views-row\")\n    for fellow in fellows:\n        name = fellow.find(\n            \"div\", class_=\"views-field-title\"\n            ).get_text(strip=True) \n        institute = fellow.find(\n            \"div\", class_=\"views-field-field-grad-fellow-institution\"\n            ).get_text(strip=True)\n\n        data.append({\"Name\": name, \"Year\": year, \"Institute\": institute})\n\ndata=pd.DataFrame(data)\ndata.head()\n\n\n\n\n\n\n\n\nName\nYear\nInstitute\n\n\n\n\n0\nAlexander Sax\n2021\nUniversity of California, Berkeley\n\n\n1\nHanrui Wang\n2021\nMassachusetts Institute of Technology\n\n\n2\nJi Lin\n2021\nMassachusetts Institute of Technology\n\n\n3\nKrishna Murthy Jatavallabhula\n2021\nUniversity of Montreal\n\n\n4\nRohan Sawhney\n2021\nCarnegie Mellon University\n\n\n\n\n\n\n\nNow let’s perform some Exploratory Data Analysis (EDA). First, we analyze the unique values and distributions.\n\n# Count the number of fellows each year\nyear_counts = data['Year'].value_counts().sort_values(ascending=False)\n# Create a DataFrame where years are columns and counts are values in the next row\nyear_data = {\n    'Year': year_counts.index,\n    'Count': year_counts.values\n}\n# Create the DataFrame\nyear_data_counts = pd.DataFrame(year_data)\n\n# Transpose the DataFrame and reset index to get years as columns\nyear_data_counts = year_data_counts.set_index('Year').T\n\n# Display the DataFrame\nprint(year_data_counts)\n\nYear   2006  2018  2017  2007  2013  2012  2011  2008  2019  2021  2003  2009  \\\nCount    12    11    11    11    11    11    11    10    10    10    10    10   \n\nYear   2010  2005  2015  2004  2016  2002  2020  2014  \nCount     9     8     7     7     6     6     5     5  \n\n\nNext we see that most represented universities\n\nuniversity_counts = data['Institute'].value_counts()\nprint(university_counts.head(10))  # Display the top 10 universities\n\nInstitute\nStanford University                          24\nMassachusetts Institute of Technology        15\nUniversity of California, Berkeley           14\nCarnegie Mellon University                   13\nUniversity of Utah                           10\nUniversity of Washington                      9\nUniversity of Illinois, Urbana-Champaign      9\nUniversity of California, Davis               8\nGeorgia Institute of Technology               8\nUniversity of North Carolina, Chapel Hill     6\nName: count, dtype: int64\n\n\nTo visualize the award distributions per year,\n\nplt.figure(figsize=(9,5))\nsns.countplot(x='Year', data=data, order=sorted(data['Year'].unique()))\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.title('Number of Fellows Per Year')\nplt.show()\n\n\n\n\n\n\n\n\nTop 10 universities visualization\n\nplt.figure(figsize=(6,4))\ntop_universities = data['Institute'].value_counts().head(10)\nsns.barplot(y=top_universities.index, x=top_universities.values)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.title('Top 10 Universities by Number of Fellows')\nplt.xlabel('Number of Fellows')\nplt.ylabel('University')\nplt.show()\n\n\n\n\n\n\n\n\nTrend over time\n\nplt.figure(figsize=(9,5))\ndata['Year'] = data['Year'].astype(int)  \nyearly_trend = data.groupby('Year').size()\nyearly_trend.plot(kind='line', marker='o')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.title('Trend of Fellows Over Time')\nplt.xlabel('Year')\nplt.ylabel('Number of Fellows')\nplt.show()\n\n\n\n\n\n\n\n\nThis is just a simple example of collecting data through webscraping. This BeautifulSoup has endless potentials to use in many projects to collect the data that are not publicly available in cleaned or organized form. Thank you for reading."
  },
  {
    "objectID": "dsandml/datacollection/index.html#references",
    "href": "dsandml/datacollection/index.html#references",
    "title": "Data collection through Webscraping",
    "section": "References",
    "text": "References\n\nFisher,R. A.. (1988). Iris. UCI Machine Learning Repository.\n\nShare on\n\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/simplelinreg/index.html",
    "href": "dsandml/simplelinreg/index.html",
    "title": "Simple Linear Regression",
    "section": "",
    "text": "A simple linear regression in multiple predictors/input variables/features/independent variables/ explanatory variables/regressors/ covariates (many names) often takes the form\n\n\\[\ny=f(\\mathbf{x})+\\epsilon =\\mathbf{\\beta}\\mathbf{x}+\\epsilon\n\\]\n\nwhere \\(\\mathbf{\\beta} \\in \\mathbb{R}^d\\) are regression parameters or constant values that we aim to estimate and \\(\\epsilon \\sim \\mathcal{N}(0,1)\\) is a normally distributed error term independent of \\(x\\) or also called the white noise.\n\nIn this case, the model:\n\\[\ny=f(x)+\\epsilon=\\beta_0+\\beta_1 x+\\epsilon\n\\]\n\nTherefore, in our model we need to estimate the parameters \\(\\beta_0,\\beta_1\\). The true relationship between the explanatory variables and the dependent variable is \\(y=f(x)\\). But our model is \\(y=f(x)+\\epsilon\\). Here, this \\(f(x)\\) is the working model with the data. In other words, \\(\\hat{y}=f(x)=\\hat{\\beta}_0+\\hat{\\beta}_1 x\\). Therefore, there should be some error in the model prediction which we are calling \\(\\epsilon=\\|y-\\hat{y}\\|\\) where \\(y\\) is the true value and \\(\\hat{y}\\) is the predicted value. This error term is normally distributed with mean 0 and variance 1. To get the best estimate of the parameters \\(\\beta_0,\\beta_1\\) we can minimize the error term as much as possible. So, we define the residual sum of squares (RSS) as:\n\n\\[\\begin{align}\nRSS &=\\epsilon_1^2+\\epsilon_2^2+\\cdots+\\epsilon_{10}^2\\\\\n&= \\sum_{i=1}^{10}(y_i-\\hat{\\beta}_0-\\hat{\\beta}_1 x_i)^2\\\\\n\\hat{\\mathcal{l}}(\\bar{\\beta})&=\\sum_{i=1}^{10}(y_i-\\hat{\\beta}_0-\\hat{\\beta}_1 x_i)^2\\\\\n\\end{align}\\]\nUsing multivariate calculus we see\n\\[\\begin{align}\n    \\frac{\\partial l}{\\partial \\beta_0}&=\\sum_{i=1}^{10} 2(y_i-\\hat{\\beta}_0-\\hat{\\beta}_1 x_i)(-1)\\\\\n    \\frac{\\partial l}{\\partial \\beta_1}&= \\sum_{i=1}^{10} 2(y_i-\\hat{\\beta}_0-\\hat{\\beta}_1 x_i)(-x_i)\n\\end{align}\\]\nSetting the partial derivatives to zero we solve for \\(\\hat{\\beta_0},\\hat{\\beta_1}\\) as follows\n\\[\\begin{align*}\n    \\frac{\\partial l}{\\partial \\beta_0}&=0\\\\\n    \\implies \\sum_{i=1}^{10} y_i-10 \\hat{\\beta_0}-\\hat{\\beta_1}\\left(\\sum_{i=1}^{10} x_i\\right)&=0\\\\\n    \\implies \\hat{\\beta_0}&=\\bar{y}-\\hat{\\beta_1}\\bar{x}\n\\end{align*}\\]\nand,\n\\[\\begin{align*}\n    \\frac{\\partial l}{\\partial \\beta_1}&=0\\\\\n    \\implies \\sum_{i=1}^{10} 2(y_i-\\hat{\\beta}_0-\\hat{\\beta}_1 x_i)(-x_i)&=0\\\\\n    \\implies \\sum_{i=1}^{10} (y_i-\\hat{\\beta}_0-\\hat{\\beta}_1 x_i)(x_i)&=0\\\\\n    \\implies \\sum_{i=1}^{10} x_iy_i-\\hat{\\beta_0}\\left(\\sum_{i=1}^{10} x_i\\right)-\\hat{\\beta_1}\\left(\\sum_{i=1}^{10} x_i^2\\right)&=0\\\\\n    \\implies \\sum_{i=1}^{10} x_iy_i-\\left(\\bar{y}-\\hat{\\beta_1}\\bar{x}\\right)\\left(\\sum_{i=1}^{10} x_i\\right)-\\hat{\\beta_1}\\left(\\sum_{i=1}^{10} x_i^2\\right)&=0\\\\\n    \\implies \\sum_{i=1}^{10} x_iy_i-\\bar{y}\\left(\\sum_{i=1}^{10} x_i\\right)+\\hat{\\beta_1}\\bar{x}\\left(\\sum_{i=1}^{10} x_i\\right)-\\hat{\\beta_1}\\left(\\sum_{i=1}^{10} x_i^2\\right)&=0\\\\\n    \\implies \\sum_{i=1}^{10} x_iy_i-\\bar{y}\\left(\\sum_{i=1}^{10} x_i\\right) -\\hat{\\beta_1}\\left(\\sum_{i=1}^{10}x_i^2-\\bar{x}\\sum_{i=1}^{10}x_i\\right)&=0\\\\\n    \\implies \\sum_{i=1}^{10} x_iy_i-\\bar{y}\\left(\\sum_{i=1}^{10} x_i\\right) -\\hat{\\beta_1}\\left(\\sum_{i=1}^{10}x_i^2-10\\bar{x}^2\\right)&=0\\\\\n    \\implies \\sum_{i=1}^{10} x_iy_i-\\bar{y}\\left(\\sum_{i=1}^{10} x_i\\right) -\\hat{\\beta_1}\\left(\\sum_{i=1}^{10}x_i^2-2\\times 10\\times \\bar{x}^2+10\\bar{x}^2\\right)&=0\\\\\n    \\implies \\hat{\\beta_1}&=\\frac{\\sum_{i=1}^{10} x_iy_i-10\\bar{x}\\bar{y}}{\\sum_{i=1}^{10}x_i^2-2\\times 10\\times \\bar{x}^2+10\\bar{x}^2}\\\\\n    \\implies \\hat{\\beta_1}&=\\frac{\\sum_{i=1}^{10} x_iy_i -10\\bar{x}\\bar{y}-10\\bar{x}\\bar{y}+10\\bar{x}\\bar{y}}{\\sum_{i=1}^{10}x_i^2-2\\bar{x}\\times 10\\times\\frac{1}{10}\\sum_{i=1}^{10}x_i +10\\bar{x}^2}\\\\\n    \\implies \\hat{\\beta_1}&=\\frac{\\sum_{i=1}^{10} x_iy_i-\\bar{y}\\left(\\sum_{i=1}^{10} x_i\\right)-\\bar{x}\\left(\\sum_{i=1}^{10} y_i\\right)+10\\bar{x}\\bar{y}}{\\sum_{i=1}^{10}(x_i-\\bar{x})^2}\\\\\n    \\implies \\hat{\\beta_1}&=\\frac{\\sum_{i=1}^{10}\\left(x_iy_i-x_i\\bar{y}-\\bar{x}y_i+\\bar{x}\\bar{y}\\right)}{\\sum_{i=1}^{10}(x_i-\\bar{x})^2}\\\\\n    \\implies \\hat{\\beta_1}&=\\frac{\\sum_{i=1}^{10}(x_i-\\bar{x})(y_i-\\bar{y})}{\\sum_{i=1}^{10}(x_i-\\bar{x})^2}\\\\\n\\end{align*}\\]\nTherefore, we have the following\n\\[\\begin{align*}\n     \\hat{\\beta_0}&=\\bar{y}-\\hat{\\beta_1}\\bar{x}\\\\\n     \\hat{\\beta_1}&=\\frac{\\sum_{i=1}^{10}(x_i-\\bar{x})(y_i-\\bar{y})}{\\sum_{i=1}^{10}(x_i-\\bar{x})^2}\n\\end{align*}\\]\nSimple Linear Regression slr is applicable for a single feature data set with contineous response variable.\n\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom sklearn.linear_model import LinearRegression\n\n\n\n\nLinearity: The relationship between the feature set and the target variable has to be linear.\n\nHomoscedasticity: The variance of the residuals has to be constant.\n\nIndependence: All the observations are independent of each other.\n\nNormality: The distribution of the dependent variable \\(y\\) has to be normal.\n\n\n\n\nTo implement the algorithm, we need some synthetic data. To generate the synthetic data we use the linear equation \\(y(x)=2x+\\frac{1}{2}+\\xi\\) where \\(\\xi\\sim \\mathbf{N}(0,1)\\)\n\nX=np.random.random(100)\ny=2*X+0.5+np.random.randn(100)\n\nNote that we used two random number generators, np.random.random(n) and np.random.randn(n). The first one generates \\(n\\) random numbers of values from the range (0,1) and the second one generates values from the standard normal distribution with mean 0 and variance or standard deviation 1.\n\nplt.figure(figsize=(9,6))\nplt.scatter(X,y)\nplt.xlabel('$X$')\nplt.ylabel('y')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nWe want to fit a simple linear regression to the above data.\n\nslr=LinearRegression()\n\nNow to fit our data \\(X\\) and \\(y\\) we need to reshape the input variable. Because if we look at \\(X\\),\n\nX\n\narray([0.48051914, 0.83663871, 0.00839392, 0.49865796, 0.85973417,\n       0.3524113 , 0.56821544, 0.37978613, 0.11099662, 0.31749812,\n       0.76780092, 0.8642125 , 0.60759347, 0.13801598, 0.8160431 ,\n       0.81006705, 0.24374317, 0.30725291, 0.14864525, 0.20610033,\n       0.60066881, 0.23807339, 0.58382358, 0.52997297, 0.71004883,\n       0.16944155, 0.56067337, 0.5557852 , 0.11593073, 0.93982351,\n       0.38667181, 0.53713816, 0.47291598, 0.75258796, 0.17566926,\n       0.05411148, 0.15290267, 0.32788957, 0.93338526, 0.82321726,\n       0.17498652, 0.22433983, 0.92114675, 0.50825543, 0.11156685,\n       0.25714402, 0.93385436, 0.50893579, 0.6104701 , 0.37445236,\n       0.86218307, 0.43624154, 0.36632479, 0.14486874, 0.3212942 ,\n       0.89267526, 0.36616891, 0.78813188, 0.19978799, 0.83402017,\n       0.92074615, 0.86339727, 0.64240345, 0.10832588, 0.87007445,\n       0.70921235, 0.16451816, 0.31305643, 0.69398905, 0.82489824,\n       0.28617387, 0.58412133, 0.40744193, 0.91295055, 0.34701026,\n       0.18190355, 0.40228985, 0.05297423, 0.01105978, 0.62994937,\n       0.55706481, 0.22379492, 0.43944305, 0.97097578, 0.85648822,\n       0.64293638, 0.52534223, 0.57421711, 0.03541468, 0.94941938,\n       0.331681  , 0.698258  , 0.48443411, 0.32936999, 0.68935365,\n       0.02686729, 0.17252149, 0.42239433, 0.84675015, 0.14127677])\n\n\nIt is a one-dimensional array/vector but the slr object accepts input variable as matrix or two-dimensional format.\n\nX=X.reshape(-1,1)\nX[:10]\n\narray([[0.48051914],\n       [0.83663871],\n       [0.00839392],\n       [0.49865796],\n       [0.85973417],\n       [0.3524113 ],\n       [0.56821544],\n       [0.37978613],\n       [0.11099662],\n       [0.31749812]])\n\n\nNow we fit the data to our model\n\nslr.fit(X,y)\nslr.predict([[2],[3]])\n\narray([3.90774092, 5.54930273])\n\n\nWe have our \\(X=2,3\\) and the corresponding \\(y\\) values are from the above cell output, which are pretty close to the model \\(y=2x+\\frac{1}{2}\\).\n\nintercept = round(slr.intercept_,4)\nslope = slr.coef_\n\nNow our model parameters are: intercept \\(\\beta_0=\\) 0.6246 and slope \\(\\beta_1=\\) array([1.64156181]).\n\nplt.figure(figsize=(9,6))\nplt.scatter(X,y, alpha=0.7,label=\"Sample Data\")\nplt.plot(np.linspace(0,1,100),\n    slr.predict(np.linspace(0,1,100).reshape(-1,1)),\n    'k',\n    label='Model $\\hat{f}$'\n)\nplt.plot(np.linspace(0,1,100),\n    2*np.linspace(0,1,100)+0.5,\n    'r--',\n    label='$f$'\n)\nplt.xlabel('$X$')\nplt.ylabel('y')\nplt.legend(fontsize=10)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nSo the model fits the data almost perfectly.\nUp next multiple linear regression.\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/simplelinreg/index.html#assumptions-of-linear-regressions",
    "href": "dsandml/simplelinreg/index.html#assumptions-of-linear-regressions",
    "title": "Simple Linear Regression",
    "section": "",
    "text": "Linearity: The relationship between the feature set and the target variable has to be linear.\n\nHomoscedasticity: The variance of the residuals has to be constant.\n\nIndependence: All the observations are independent of each other.\n\nNormality: The distribution of the dependent variable \\(y\\) has to be normal."
  },
  {
    "objectID": "dsandml/simplelinreg/index.html#synthetic-data",
    "href": "dsandml/simplelinreg/index.html#synthetic-data",
    "title": "Simple Linear Regression",
    "section": "",
    "text": "To implement the algorithm, we need some synthetic data. To generate the synthetic data we use the linear equation \\(y(x)=2x+\\frac{1}{2}+\\xi\\) where \\(\\xi\\sim \\mathbf{N}(0,1)\\)\n\nX=np.random.random(100)\ny=2*X+0.5+np.random.randn(100)\n\nNote that we used two random number generators, np.random.random(n) and np.random.randn(n). The first one generates \\(n\\) random numbers of values from the range (0,1) and the second one generates values from the standard normal distribution with mean 0 and variance or standard deviation 1.\n\nplt.figure(figsize=(9,6))\nplt.scatter(X,y)\nplt.xlabel('$X$')\nplt.ylabel('y')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()"
  },
  {
    "objectID": "dsandml/simplelinreg/index.html#model",
    "href": "dsandml/simplelinreg/index.html#model",
    "title": "Simple Linear Regression",
    "section": "",
    "text": "We want to fit a simple linear regression to the above data.\n\nslr=LinearRegression()\n\nNow to fit our data \\(X\\) and \\(y\\) we need to reshape the input variable. Because if we look at \\(X\\),\n\nX\n\narray([0.48051914, 0.83663871, 0.00839392, 0.49865796, 0.85973417,\n       0.3524113 , 0.56821544, 0.37978613, 0.11099662, 0.31749812,\n       0.76780092, 0.8642125 , 0.60759347, 0.13801598, 0.8160431 ,\n       0.81006705, 0.24374317, 0.30725291, 0.14864525, 0.20610033,\n       0.60066881, 0.23807339, 0.58382358, 0.52997297, 0.71004883,\n       0.16944155, 0.56067337, 0.5557852 , 0.11593073, 0.93982351,\n       0.38667181, 0.53713816, 0.47291598, 0.75258796, 0.17566926,\n       0.05411148, 0.15290267, 0.32788957, 0.93338526, 0.82321726,\n       0.17498652, 0.22433983, 0.92114675, 0.50825543, 0.11156685,\n       0.25714402, 0.93385436, 0.50893579, 0.6104701 , 0.37445236,\n       0.86218307, 0.43624154, 0.36632479, 0.14486874, 0.3212942 ,\n       0.89267526, 0.36616891, 0.78813188, 0.19978799, 0.83402017,\n       0.92074615, 0.86339727, 0.64240345, 0.10832588, 0.87007445,\n       0.70921235, 0.16451816, 0.31305643, 0.69398905, 0.82489824,\n       0.28617387, 0.58412133, 0.40744193, 0.91295055, 0.34701026,\n       0.18190355, 0.40228985, 0.05297423, 0.01105978, 0.62994937,\n       0.55706481, 0.22379492, 0.43944305, 0.97097578, 0.85648822,\n       0.64293638, 0.52534223, 0.57421711, 0.03541468, 0.94941938,\n       0.331681  , 0.698258  , 0.48443411, 0.32936999, 0.68935365,\n       0.02686729, 0.17252149, 0.42239433, 0.84675015, 0.14127677])\n\n\nIt is a one-dimensional array/vector but the slr object accepts input variable as matrix or two-dimensional format.\n\nX=X.reshape(-1,1)\nX[:10]\n\narray([[0.48051914],\n       [0.83663871],\n       [0.00839392],\n       [0.49865796],\n       [0.85973417],\n       [0.3524113 ],\n       [0.56821544],\n       [0.37978613],\n       [0.11099662],\n       [0.31749812]])\n\n\nNow we fit the data to our model\n\nslr.fit(X,y)\nslr.predict([[2],[3]])\n\narray([3.90774092, 5.54930273])\n\n\nWe have our \\(X=2,3\\) and the corresponding \\(y\\) values are from the above cell output, which are pretty close to the model \\(y=2x+\\frac{1}{2}\\).\n\nintercept = round(slr.intercept_,4)\nslope = slr.coef_\n\nNow our model parameters are: intercept \\(\\beta_0=\\) 0.6246 and slope \\(\\beta_1=\\) array([1.64156181]).\n\nplt.figure(figsize=(9,6))\nplt.scatter(X,y, alpha=0.7,label=\"Sample Data\")\nplt.plot(np.linspace(0,1,100),\n    slr.predict(np.linspace(0,1,100).reshape(-1,1)),\n    'k',\n    label='Model $\\hat{f}$'\n)\nplt.plot(np.linspace(0,1,100),\n    2*np.linspace(0,1,100)+0.5,\n    'r--',\n    label='$f$'\n)\nplt.xlabel('$X$')\nplt.ylabel('y')\nplt.legend(fontsize=10)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nSo the model fits the data almost perfectly.\nUp next multiple linear regression.\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/polyreg/index.html",
    "href": "dsandml/polyreg/index.html",
    "title": "Polynomial Regression",
    "section": "",
    "text": "Polynomial regression is an extension of linear regression that captures the relationship between the dependent and independent variables by fitting a polynomial equation. Unlike linear regression, where the model assumes a straight-line relationship, polynomial regression allows for more complex relationships, enabling the model to fit non-linear data more accurately.\n\n\n\nPolynomial regression is a type of regression where the relationship between the independent variable \\(X\\) and the dependent variable \\(y\\) is modeled as an \\(n\\)th degree polynomial. The general form of a polynomial regression model is:\n\\[\ny = \\beta_0 + \\beta_1 X + \\beta_2 X^2 + \\beta_3 X^3 + \\dots + \\beta_n X^n + \\epsilon\n\\]\nWhere:\n\n\\(y\\) is the predicted output (dependent variable),\n\\(X\\) is the input feature (independent variable),\n\\(\\beta_0, \\beta_1, \\dots, \\beta_n\\) are the coefficients to be learned,\n\\(\\epsilon\\) is the error term (the difference between the actual and predicted values),\n\\(n\\) is the degree of the polynomial.\n\n\nPolynomial regression can model non-linear data by introducing polynomial terms (such as \\(X^2, X^3\\), etc.), but the model is still linear in terms of the coefficients, which is why it is often treated as a type of linear regression.\n\n\n\n\n\nThe objective of polynomial regression, like linear regression, is to minimize the sum of squared errors (SSE) between the observed values \\(y_i\\) and the predicted values \\(\\hat{y}_i\\). This can be done by applying the ordinary least squares (OLS) method.\n\nFor simplicity, let’s assume a second-degree polynomial regression model:\n\\[\n\\hat{y} = \\beta_0 + \\beta_1 X + \\beta_2 X^2\n\\]\nThe error for each data point is the difference between the actual value \\(y_i\\) and the predicted value \\(\\hat{y}_i\\):\n\\[\ne_i = y_i - \\hat{y}_i = y_i - (\\beta_0 + \\beta_1 X_i + \\beta_2 X_i^2)\n\\]\nWe aim to minimize the sum of squared errors (SSE):\n\\[\nSSE = \\sum_{i=1}^{m} (y_i - \\hat{y}_i)^2 = \\sum_{i=1}^{m} (y_i - (\\beta_0 + \\beta_1 X_i + \\beta_2 X_i^2))^2\n\\]\nWhere \\(m\\) is the number of data points.\nWe can represent this problem in matrix form to generalize for higher-degree polynomials and simplify the calculation:\nLet \\(X\\) represent the design matrix, where each column corresponds to a power of the independent variable \\(X\\):\n\\[\nX =\n\\begin{bmatrix}\n1 & X_1 & X_1^2 \\\\\n1 & X_2 & X_2^2 \\\\\n\\vdots & \\vdots & \\vdots \\\\\n1 & X_m & X_m^2\n\\end{bmatrix}\n\\]\nLet \\(\\beta\\) be the coefficient vector:\n\\[\n\\beta =\n\\begin{bmatrix}\n\\beta_0 \\\\\n\\beta_1 \\\\\n\\beta_2\n\\end{bmatrix}\n\\]\nAnd \\(y\\) be the output vector:\n\\[\ny =\n\\begin{bmatrix}\ny_1 \\\\\ny_2 \\\\\n\\vdots \\\\\ny_m\n\\end{bmatrix}\n\\]\nThe predicted values can be written as:\n\\[\n\\hat{y} = X \\beta\n\\]\nTo find the optimal coefficients \\(\\beta\\), we minimize the SSE, which can be rewritten in matrix form as:\n\\[\nSSE = (y - X\\beta)^T(y - X\\beta)\n\\]\nTo minimize this, we take the derivative of the SSE with respect to \\(\\beta\\) and set it to zero:\n\\[\n\\frac{\\partial}{\\partial \\beta} (y - X\\beta)^T(y - X\\beta) = -2X^T(y - X\\beta) = 0\n\\]\nSolving for \\(\\beta\\):\n\\[\n\\beta = (X^T X)^{-1} X^T y\n\\]\nThis gives the optimal solution for the coefficients \\(\\beta\\), which can be used to predict the output \\(\\hat{y}\\). The detail proof of this parameter \\(\\hat{\\beta}\\) can be found in the  multiple linear regression  page.\n\n\n\nWe use PolynomialFeatures from Scikit-learn to transform our input data \\(X\\) to include polynomial terms (e.g., \\(X^2, X^3\\), etc.).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nnp.random.seed(0)\nX = 2 - 3 * np.random.normal(0, 1, 100)\ny = X - 2 * (X ** 2) + np.random.normal(-3, 3, 100)\nX = X[:, np.newaxis]\nplt.scatter(X, y, color='blue')\nplt.title(\"Sample Data\")\nplt.xlabel('x')\nplt.ylabel('y')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\npoly = PolynomialFeatures(degree=2, interaction_only=False, include_bias=True)\nX_poly = poly.fit_transform(X)\n\nNow we fit a linear regression model on the transformed polynomial features.\n\nmodel = LinearRegression()\nmodel.fit(X_poly, y)\n\ny_pred = model.predict(X_poly)\n\nprint(f\"Coefficients: {model.coef_}\")\nprint(f\"Intercept: {model.intercept_}\")\nprint(f\"Mean Squared Error: {mean_squared_error(y, y_pred)}\")\n\nCoefficients: [ 0.          0.96597113 -2.02225052]\nIntercept: -2.414835667353632\nMean Squared Error: 9.44744195245028\n\n\nFinally, let’s plot the polynomial curve that fits the data.\n\nimport operator\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(X, y_pred), key=sort_axis)\nX_sorted, y_pred_sorted = zip(*sorted_zip)\n\n# Plot the polynomial curve\nplt.scatter(X, y, color='blue')\nplt.plot(X_sorted, y_pred_sorted, color='red')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title(\"Polynomial Regression Fit\")\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nWe can evaluate the performance of the model by comparing the mean squared error (MSE) between the actual and predicted values:\n\nmse = mean_squared_error(y, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\n\nMean Squared Error: 9.44744195245028\n\n\n\n\n\nWe’ll generate some non-linear data and try to fit a polynomial regression model to it.\n\nimport pandas as pd\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\nnp.random.seed(0)\nx1 = 2 - 3 * np.random.normal(0, 1, 100)\nx2 = 4*np.random.normal(-2,2,100)\ny = 2+3*x1 -4*x1**2 + 2 * x2 + np.random.normal(-3, 3, 100)\ndf={\n    'x1':x1,\n    'x2':x2,\n    'y':y\n}\ndf = pd.DataFrame(df)\nprint(df.head())\nscatter_matrix(df)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n         x1         x2           y\n0 -3.292157   7.065206  -41.206797\n1  0.799528 -18.782072  -39.440680\n2 -0.936214 -18.163880  -40.343409\n3 -4.722680  -0.244826 -102.906711\n4 -3.602674 -17.384987  -96.574641\n\n\n\n\n\n\n\n\n\nSince it’s clear that the relationships are not linear. So if we fit a linear regression model, it won’t be a good fit.\n\nX = df.drop('y', axis=1)\ny = df.y\nmodel1 = LinearRegression()\nmodel1.fit(X,y)\npred1 = model1.predict(X)\nresidual1 = y - pred1\nsns.scatterplot(residual1)\nplt.axhline(y=0, c='r')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nTherefore, we generate some non linear features from the given data.\n\ndf['x1_squared']=df.x1**2\nscatter_matrix(df)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nFrom this plot, we see that \\(x1\\) is parabolic and \\(x2\\) is linear in relationship with \\(y\\). So, how about a model that combines a linear and quadratic model?\n\nX = df.drop('y', axis=1)\ny = df.y\nmodel2 = LinearRegression()\nmodel2.fit(X,y)\npred2 = model2.predict(X)\nresidual2 = y - pred2\nsns.scatterplot(residual2)\nplt.axhline(y=0, c='r')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nThis one is much better.\n\nPolynomial regression is a powerful technique that extends the basic linear regression model to capture non-linear relationships between variables. By transforming the input data into polynomial terms, the model becomes more flexible, allowing it to better fit data that doesn’t follow a linear pattern.  The mathematical derivation shows that polynomial regression is still linear in terms of its parameters, allowing us to use simple optimization techniques like ordinary least squares (OLS) for parameter estimation.  In Python, using Scikit-learn makes it easy to implement polynomial regression. We can increase the degree of the polynomial to improve model accuracy, but we need to be careful of overfitting, where the model becomes too complex and fits the noise in the data rather than the underlying pattern.\n\nYou may also like"
  },
  {
    "objectID": "dsandml/polyreg/index.html#introduction",
    "href": "dsandml/polyreg/index.html#introduction",
    "title": "Polynomial Regression",
    "section": "",
    "text": "Polynomial regression is an extension of linear regression that captures the relationship between the dependent and independent variables by fitting a polynomial equation. Unlike linear regression, where the model assumes a straight-line relationship, polynomial regression allows for more complex relationships, enabling the model to fit non-linear data more accurately.\n\n\n\nPolynomial regression is a type of regression where the relationship between the independent variable \\(X\\) and the dependent variable \\(y\\) is modeled as an \\(n\\)th degree polynomial. The general form of a polynomial regression model is:\n\\[\ny = \\beta_0 + \\beta_1 X + \\beta_2 X^2 + \\beta_3 X^3 + \\dots + \\beta_n X^n + \\epsilon\n\\]\nWhere:\n\n\\(y\\) is the predicted output (dependent variable),\n\\(X\\) is the input feature (independent variable),\n\\(\\beta_0, \\beta_1, \\dots, \\beta_n\\) are the coefficients to be learned,\n\\(\\epsilon\\) is the error term (the difference between the actual and predicted values),\n\\(n\\) is the degree of the polynomial.\n\n\nPolynomial regression can model non-linear data by introducing polynomial terms (such as \\(X^2, X^3\\), etc.), but the model is still linear in terms of the coefficients, which is why it is often treated as a type of linear regression.\n\n\n\n\n\nThe objective of polynomial regression, like linear regression, is to minimize the sum of squared errors (SSE) between the observed values \\(y_i\\) and the predicted values \\(\\hat{y}_i\\). This can be done by applying the ordinary least squares (OLS) method.\n\nFor simplicity, let’s assume a second-degree polynomial regression model:\n\\[\n\\hat{y} = \\beta_0 + \\beta_1 X + \\beta_2 X^2\n\\]\nThe error for each data point is the difference between the actual value \\(y_i\\) and the predicted value \\(\\hat{y}_i\\):\n\\[\ne_i = y_i - \\hat{y}_i = y_i - (\\beta_0 + \\beta_1 X_i + \\beta_2 X_i^2)\n\\]\nWe aim to minimize the sum of squared errors (SSE):\n\\[\nSSE = \\sum_{i=1}^{m} (y_i - \\hat{y}_i)^2 = \\sum_{i=1}^{m} (y_i - (\\beta_0 + \\beta_1 X_i + \\beta_2 X_i^2))^2\n\\]\nWhere \\(m\\) is the number of data points.\nWe can represent this problem in matrix form to generalize for higher-degree polynomials and simplify the calculation:\nLet \\(X\\) represent the design matrix, where each column corresponds to a power of the independent variable \\(X\\):\n\\[\nX =\n\\begin{bmatrix}\n1 & X_1 & X_1^2 \\\\\n1 & X_2 & X_2^2 \\\\\n\\vdots & \\vdots & \\vdots \\\\\n1 & X_m & X_m^2\n\\end{bmatrix}\n\\]\nLet \\(\\beta\\) be the coefficient vector:\n\\[\n\\beta =\n\\begin{bmatrix}\n\\beta_0 \\\\\n\\beta_1 \\\\\n\\beta_2\n\\end{bmatrix}\n\\]\nAnd \\(y\\) be the output vector:\n\\[\ny =\n\\begin{bmatrix}\ny_1 \\\\\ny_2 \\\\\n\\vdots \\\\\ny_m\n\\end{bmatrix}\n\\]\nThe predicted values can be written as:\n\\[\n\\hat{y} = X \\beta\n\\]\nTo find the optimal coefficients \\(\\beta\\), we minimize the SSE, which can be rewritten in matrix form as:\n\\[\nSSE = (y - X\\beta)^T(y - X\\beta)\n\\]\nTo minimize this, we take the derivative of the SSE with respect to \\(\\beta\\) and set it to zero:\n\\[\n\\frac{\\partial}{\\partial \\beta} (y - X\\beta)^T(y - X\\beta) = -2X^T(y - X\\beta) = 0\n\\]\nSolving for \\(\\beta\\):\n\\[\n\\beta = (X^T X)^{-1} X^T y\n\\]\nThis gives the optimal solution for the coefficients \\(\\beta\\), which can be used to predict the output \\(\\hat{y}\\). The detail proof of this parameter \\(\\hat{\\beta}\\) can be found in the  multiple linear regression  page.\n\n\n\nWe use PolynomialFeatures from Scikit-learn to transform our input data \\(X\\) to include polynomial terms (e.g., \\(X^2, X^3\\), etc.).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nnp.random.seed(0)\nX = 2 - 3 * np.random.normal(0, 1, 100)\ny = X - 2 * (X ** 2) + np.random.normal(-3, 3, 100)\nX = X[:, np.newaxis]\nplt.scatter(X, y, color='blue')\nplt.title(\"Sample Data\")\nplt.xlabel('x')\nplt.ylabel('y')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\npoly = PolynomialFeatures(degree=2, interaction_only=False, include_bias=True)\nX_poly = poly.fit_transform(X)\n\nNow we fit a linear regression model on the transformed polynomial features.\n\nmodel = LinearRegression()\nmodel.fit(X_poly, y)\n\ny_pred = model.predict(X_poly)\n\nprint(f\"Coefficients: {model.coef_}\")\nprint(f\"Intercept: {model.intercept_}\")\nprint(f\"Mean Squared Error: {mean_squared_error(y, y_pred)}\")\n\nCoefficients: [ 0.          0.96597113 -2.02225052]\nIntercept: -2.414835667353632\nMean Squared Error: 9.44744195245028\n\n\nFinally, let’s plot the polynomial curve that fits the data.\n\nimport operator\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(X, y_pred), key=sort_axis)\nX_sorted, y_pred_sorted = zip(*sorted_zip)\n\n# Plot the polynomial curve\nplt.scatter(X, y, color='blue')\nplt.plot(X_sorted, y_pred_sorted, color='red')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title(\"Polynomial Regression Fit\")\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nWe can evaluate the performance of the model by comparing the mean squared error (MSE) between the actual and predicted values:\n\nmse = mean_squared_error(y, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\n\nMean Squared Error: 9.44744195245028\n\n\n\n\n\nWe’ll generate some non-linear data and try to fit a polynomial regression model to it.\n\nimport pandas as pd\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\nnp.random.seed(0)\nx1 = 2 - 3 * np.random.normal(0, 1, 100)\nx2 = 4*np.random.normal(-2,2,100)\ny = 2+3*x1 -4*x1**2 + 2 * x2 + np.random.normal(-3, 3, 100)\ndf={\n    'x1':x1,\n    'x2':x2,\n    'y':y\n}\ndf = pd.DataFrame(df)\nprint(df.head())\nscatter_matrix(df)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n         x1         x2           y\n0 -3.292157   7.065206  -41.206797\n1  0.799528 -18.782072  -39.440680\n2 -0.936214 -18.163880  -40.343409\n3 -4.722680  -0.244826 -102.906711\n4 -3.602674 -17.384987  -96.574641\n\n\n\n\n\n\n\n\n\nSince it’s clear that the relationships are not linear. So if we fit a linear regression model, it won’t be a good fit.\n\nX = df.drop('y', axis=1)\ny = df.y\nmodel1 = LinearRegression()\nmodel1.fit(X,y)\npred1 = model1.predict(X)\nresidual1 = y - pred1\nsns.scatterplot(residual1)\nplt.axhline(y=0, c='r')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nTherefore, we generate some non linear features from the given data.\n\ndf['x1_squared']=df.x1**2\nscatter_matrix(df)\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nFrom this plot, we see that \\(x1\\) is parabolic and \\(x2\\) is linear in relationship with \\(y\\). So, how about a model that combines a linear and quadratic model?\n\nX = df.drop('y', axis=1)\ny = df.y\nmodel2 = LinearRegression()\nmodel2.fit(X,y)\npred2 = model2.predict(X)\nresidual2 = y - pred2\nsns.scatterplot(residual2)\nplt.axhline(y=0, c='r')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nThis one is much better.\n\nPolynomial regression is a powerful technique that extends the basic linear regression model to capture non-linear relationships between variables. By transforming the input data into polynomial terms, the model becomes more flexible, allowing it to better fit data that doesn’t follow a linear pattern.  The mathematical derivation shows that polynomial regression is still linear in terms of its parameters, allowing us to use simple optimization techniques like ordinary least squares (OLS) for parameter estimation.  In Python, using Scikit-learn makes it easy to implement polynomial regression. We can increase the degree of the polynomial to improve model accuracy, but we need to be careful of overfitting, where the model becomes too complex and fits the noise in the data rather than the underlying pattern.\n\nYou may also like"
  },
  {
    "objectID": "dsandml/knn/index.html",
    "href": "dsandml/knn/index.html",
    "title": "K Nearest Neighbors Regression",
    "section": "",
    "text": "Non-parametric model is a statistical model that does not make any assumptions about the underlying data distributions, meaning it does not require specifying functional form for the relationships between variables, instead learning directly from the data points without pre-defined parameters."
  },
  {
    "objectID": "dsandml/knn/index.html#introduction-non-parametric-models",
    "href": "dsandml/knn/index.html#introduction-non-parametric-models",
    "title": "K Nearest Neighbors Regression",
    "section": "",
    "text": "Non-parametric model is a statistical model that does not make any assumptions about the underlying data distributions, meaning it does not require specifying functional form for the relationships between variables, instead learning directly from the data points without pre-defined parameters."
  },
  {
    "objectID": "dsandml/knn/index.html#k-nearest-neighbors-knn-algorithm",
    "href": "dsandml/knn/index.html#k-nearest-neighbors-knn-algorithm",
    "title": "K Nearest Neighbors Regression",
    "section": "\\(K-\\)Nearest Neighbors (KNN) Algorithm",
    "text": "\\(K-\\)Nearest Neighbors (KNN) Algorithm\n\nK-Nearest Neighbors (KNN) is one of the simplest yet effective algorithms used in supervised learning for both classification and regression problems. It’s a lazy learner—meaning it does not perform any specific training of a model but memorizes the training dataset and makes predictions based on proximity in feature space.\n\nWe are given a set of data points \\((\\bar{x}_i,y_i)\\) with \\(\\bar{x}_i\\in \\mathbb{R}^d\\) and \\(y_i\\in \\mathbb{R}\\)\n1. Choose the number of neighbors \\(K\\)\n2. Compute the distance between the new data point and all the training samples\n3. Select the \\(K\\) nearest neighbors based on distance.\n4. For classification, the output is the most common class among the \\(K\\) neighbors.\n5. For regression, the output is the average of the target values of \\(K\\) neighbors\n\n\\(K-\\)Nearest Neighbors Classification\nThe KNN classification algorithm can be summarized with the following steps:\nGiven:\n\n\\(X_{train} = [x_1, x_2, \\ldots, x_n]\\) (the training data features)\n\n\\(y_{train} = [y_1, y_2, \\ldots, y_n]\\) (the training data labels)\n\n\\(x_{test}\\) (the new data point for which we want to predict the class)\n\nSteps\n1. Compute Distance: For each training point \\(x_i\\), calculate the distance \\(d(x_i, x_{test})\\) using a distance metric like Euclidean distance: \\[\n   d(x_i, x_{test}) = \\sqrt{\\sum_{j=1}^{m} (x_{i,j} - x_{test,j})^2}\n   \\] where \\(m\\) is the number of features.\n2. Find K Nearest Neighbors: Sort the distances and pick the K closest points.\n3. Majority Voting: Look at the labels \\(y_i\\) of the K nearest neighbors. The predicted label for \\(x_{test}\\) is the most frequent label (majority vote) among the neighbors.\nFor example, let’s say our data looks like this\n\n\n\n\n\n\n\nTraining Data\n\n\narea\nbedroom\nbathroom\nprice\ncondition\n\n\n\n\n7420\n4\n2\n1300000\n1\n\n\n7520\n3\n3\n1450000\n1\n\n\n6420\n2\n1\n1110000\n0\n\n\n5423\n3\n2\n1363400\n0\n\n\n5423\n3\n1\n1263400\n1\n\n\n\n\n\n\nTest Data\n\n\narea\nbedroom\nbathroom\nprice\ncondition\n\n\n\n\n5420\n3\n2.5\n1302000\n\n\n\n7120\n5\n4\n1453000\n\n\n\n\n\n\n\nFor the data points \\(x_i\\) from the training set and a single test data point \\(xt=[5420,3,2.5,1302000]\\)\n\\[\\begin{align*}\n    d(x_1, xt) & = \\sqrt{(x_{11}-xt_1)^2 + (x_{12}-xt_2)^2 + (x_{13}-xt_3)^2 + (x_{14}-xt_4)^2}\\\\\n               & = \\sqrt{(7420-5420)^2 + (4-5)^2 + (2-2.5)^2 + (1300000-1302000)^2} \\approx 2828.43\\\\\n    d(x_2,xt)  & = \\sqrt{(x_{21}-xt_1)^2 + (x_{22}-xt_2)^2 + (x_{23}-xt_3)^2 + (x_{24}-xt_4)^2} \\\\     \n               & = \\sqrt{(7520-5420)^2 + (3-5)^2 + (3-2.5)^2 + (1450000-1302000)^2} \\approx 14805.92\\\\\n    d(x_3,xt)  & = \\sqrt{(x_{31}-xt_1)^2 + (x_{32}-xt_2)^2 + (x_{33}-xt_3)^2 + (x_{34}-xt_4)^2}   \\\\\n               & = \\sqrt{(6420-5420)^2 + (2-5)^2 + (1-2.5)^2 + (1110000-1302000)^2} \\approx 19209.38\\\\\n    d(x_4,xt)  & = \\sqrt{(x_{41}-xt_1)^2 + (x_{42}-xt_2)^2 + (x_{43}-xt_3)^2 + (x_{44}-xt_4)^2}\\\\\n               & = \\sqrt{(6420-5420)^2 + (2-5)^2 + (1-2.5)^2 + (1110000-1302000)^2} \\approx 19209.38\\\\\n    d(x_5,xt)  & = \\sqrt{(x_{51}-xt_1)^2 + (x_{52}-xt_2)^2 + (x_{53}-xt_3)^2 + (x_{54}-xt_4)^2} \\\\\n               & = \\sqrt{(5423-5420)^2 + (3-5)^2 + (1-2.5)^2 + (1263400-1302000)^2} \\approx 38602.95\n\\end{align*}\\]\nSo the distances\n\n\\(d_1=d(x_1, xt) \\approx 2828.43\\)\n\\(d_2=d(x_2, xt) \\approx 14805.92\\)\n\\(d_3=d(x_3, xt) \\approx 19209.38\\)\n\\(d_4=d(x_4, xt) \\approx 61405.03\\)\n\\(d_5=d(x_5, xt) \\approx 38602.95\\)\n\nIf we sort the above distances, we get \\(d_1&lt;d_2&lt;d_3&lt;d_5&lt;d_4\\) and if we choose \\(K=3\\) nearest neighbors, then \\(d_1&lt;d_2&lt;d_3\\) and\n\nData point \\(x_1\\) has class label condition\\(=1\\)\n\nData point \\(x_2\\) has class label condition\\(=1\\)\n\nData point \\(x_3\\) has class label condition\\(=0\\)\n\nWe can clearly see that the majority class (2 out of 3) is condition\\(=1\\). Therefore, for the given test data, the label would be also condition\\(=1\\).\n\nKNN Classifier Using Python\nHere’s how to implement KNN for classification in Python from scratch:\n\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\n\nclass CustomKNNclassifier:\n\n    def __init__(self, k=3):\n        self.k = k\n    \n    def fit(self, X, Y):\n        self.X = X\n        self.Y = Y\n    \n    def predict(self, X):\n        predictions = [self._predict(x) for x in X.to_numpy()] \n        return np.array(predictions)\n    \n    def _predict(self, x):\n        # Compute the Euclidean distances \n        distances = [np.linalg.norm(x - X_train) for X_train in self.X.to_numpy()]\n\n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:self.k]\n\n        # Get the labels of k nearest neighbors\n        k_nearest_neighbors = [self.Y[i] for i in k_indices]\n\n        # Return the most common label\n        common_label = Counter(k_nearest_neighbors).most_common(1)[0][0]\n        return common_label\n\n# Example usage\ntrain_data = pd.DataFrame(\n    {\n        'area': [7420, 7520, 6420, 5423, 5423],\n        'bedroom': [4, 3, 2, 3, 3],\n        'bathroom': [2, 3, 1, 2, 1],\n        'price': [1300000, 1450000, 1110000, 1363400, 1263400],\n        'condition': [1, 1, 0, 0, 1]\n    }\n)\ntest_data = pd.DataFrame(\n    {\n        'area': [5420, 7120],\n        'bedroom': [3, 5],\n        'bathroom': [2.5, 4],\n        'price': [1302000, 1453000]\n    }\n)\n\nX_train = train_data.drop('condition', axis=1)\ny_train = train_data['condition']\n\nX_test = test_data\n\n# Initialize and train the KNN model\nclassifier = CustomKNNclassifier(k=3)\nclassifier.fit(X_train, y_train)\n\n# Predict on test data\npredictions = classifier.predict(X_test)\nprint(predictions)\n\n[1 1]\n\n\nSo the complete test set would be\n\n\n\narea\nbedroom\nbathroom\nprice\ncondition\n\n\n\n\n5420\n3\n2.5\n1302000\n1\n\n\n7120\n5\n4\n1453000\n1\n\n\n\nNote: We did not scale the data before applying the classifier. If we scaled, the result might have been different (?). In practice, we need to scale the data before applying KNN algorithm. Because computing a large number of distances with big numbers may get us wrong order and also time cosuming.\n\n\n\n\\(K-\\)Nearest Neighbors Regression\nKNN regression is slightly different from classification. Instead of taking a majority vote, we predict the output by averaging the values of the K nearest neighbors.\nGiven:\n\n\\(X_{train} = [x_1, x_2, \\ldots, x_n]\\) (the training data features)\n\\(y_{train} = [y_1, y_2, \\ldots, y_n]\\) (the continuous target values)\n\\(x_{test}\\) (the new data point for which we want to predict the value)\n\nStep-by-Step:\n1. Compute Distance: Calculate the Euclidean distance between \\(x_{test}\\) and each training point \\(x_i\\).\n2. Find K Nearest Neighbors: Sort the distances and select the K nearest points.\n3. Averaging: The predicted value for \\(x_{test}\\) is the average of the target values \\(y_i\\) of the K nearest neighbors:\n\\[\n\\hat{y}_{test} = \\frac{1}{K} \\sum_{i=1}^{K} y_i\n\\]\n\nKNN Regressor Using Python\nNow we use the same training data and test data for this regression. But this time, our target variable is price and test data looks like this\n\n\n\narea\nbedroom\nbathroom\nCondition\nprice\n\n\n\n\n5420\n3\n2.5\n1\n\n\n\n7120\n5\n4\n1\n\n\n\n\nAfter scaling the data looks like this\n\n\n\n\n\n\n\nTraining Data\n\n\narea\nbedroom\nbathroom\ncondition\nprice\n\n\n\n\n1.213\n1.414\n0.267\n0.730\n1300000\n\n\n1.336\n0.000\n1.603\n0.730\n1450000\n\n\n-0.026\n-1.414\n-1.336\n-1.095\n1110000\n\n\n-1.261\n0.000\n0.267\n-1.095\n1363400\n\n\n-1.261\n0.000\n-1.336\n0.730\n1263400\n\n\n\n\n\n\nTest Data\n\n\narea\nbedroom\nbathroom\ncondition\nprice\n\n\n\n\n-1.266\n0.000\n0.803\n0.730\n\n\n\n0.854\n2.828\n3.876\n0.730\n\n\n\n\n\n\n\nNow we see that\n\\[\\begin{align*}\n    d_1=d(x_1, x_t) & = \\sqrt{(1.213 - (-1.266))^2 + (1.414 - 0)^2 + (0.267 - 0.803)^2 + (0.730 - 0.730)^2}  \\approx 2.904\\\\\n    d_2=d(x_2, x_t) & = \\sqrt{(1.336 - (-1.266))^2 + (0.000 - 0)^2 + (1.603 - 0.803)^2 + (0.730 - 0.730)^2} \\approx 2.721\\\\\n    d_3=d(x_3, x_t) & = \\sqrt{(-0.026 - (-1.266))^2 + (-1.414 - 0)^2 + (-1.336 - 0.803)^2 + (-1.095 - 0.730)^2}  \\approx 3.382\\\\\n    d_4=d(x_4, x_t) & = \\sqrt{(-1.261 - (-1.266))^2 + (0.000 - 0)^2 + (0.267 - 0.803)^2 + (-1.095 - 0.730)^2}  \\approx 1.902\\\\\n    d_5=d(x_5, x_t) & = \\sqrt{(-1.261 - (-1.266))^2 + (0.000 - 0)^2 + (-1.336 - 0.803)^2 + (0.730 - 0.730)^2} \\approx 2.140\n\\end{align*}\\]\nBut this time, the order is \\(d_4&lt;d_5&lt;d_2&lt;d_1&lt;d_3\\) and for \\(k=3\\) we have \\(d_4&lt;d_5&lt;d_2\\). The price for this distances\n\nFor data point \\(x_4\\), the price\\(=1363400\\)\n\nFor data point \\(x_5\\), the price\\(=1263400\\)\n\nFor data point \\(x_2\\), the price\\(=1450000\\)\n\nSo the predicted price should be the average of this three prices, that for \\(xt=[5420,3,2.5,1]\\) the price we expect\n\\[\nprice = \\frac{1363400+1263400+1450000}{3}=1358933.33\n\\]\nHere’s how to implement KNN for regression in Python from scratch and we see if we get the same as the hand calculation.\n\nfrom sklearn.preprocessing import StandardScaler\n\nclass CustomKNNRegressor:\n    def __init__(self, k=3):\n        self.k = k\n\n    def fit(self, X_train, y_train):\n        self.X_train = X_train\n        self.y_train = y_train.to_numpy()\n\n    def predict(self, X_test):\n        predictions = [self._predict(x) for x in X_test]\n        return np.array(predictions)\n    \n    def _predict(self, x):\n        distances = [np.linalg.norm(x-x_train) for x_train in self.X_train]\n        k_indices = np.argsort(distances)[:self.k]\n        k_nearest_values = [self.y_train[i] for i in k_indices]\n        return np.mean(k_nearest_values)\n\nX_train = train_data.drop('price', axis=1)\ny_train = train_data['price']\n\ntest_data = pd.DataFrame(\n    {\n        'area': [5420, 7120],\n        'bedroom': [3, 5],\n        'bathroom': [2.5, 4],\n        'condition': [1, 1]\n    }\n)\n\nX_test = test_data\n\nscaler = StandardScaler()\n\nX_train_sc = scaler.fit_transform(X_train)\nX_test_sc = scaler.transform(X_test)\n\n# Initialize and train the KNN regressor\nregressor = CustomKNNRegressor(k=3)\nregressor.fit(X_train_sc, y_train)\n\n# Predict on test data\npredictions = regressor.predict(X_test_sc)\nprint(np.round(predictions,2))\n\n[1358933.33 1371133.33]\n\n\n\n\n\n\nChoosing the Value of K\nThe value of K significantly affects the performance of the KNN algorithm:\n\nSmall K: If K is too small, the model is sensitive to noise, and the predictions can be unstable.\n\nLarge K: If K is too large, the model becomes more biased, and the predictions may be overly smoothed.\n\nA typical way to choose K is by trying different values and using cross-validation to see which value yields the best performance.\n\n\n\nDistance Metrics\nThe default metric for KNN is Euclidean distance, but depending on the dataset, other metrics like Manhattan distance or Minkowski distance might be more suitable.\n\nEuclidean Distance (L2 Norm): \\[\nd(x_i, x_j) = \\sqrt{\\sum_{k=1}^{m} (x_{i,k} - x_{j,k})^2}\n\\]\nManhattan Distance (L1 Norm): \\[\nd(x_i, x_j) = \\sum_{k=1}^{m} |x_{i,k} - x_{j,k}|\n\\]\n\n\n\nKNN Implementation\nIn this section we use KNN regression for Boston Housing dataset and find the optimal \\(K\\) using the KFold cross-validation.\n\ndf = pd.read_csv('HousingData.csv')\n\nNext we see if there is any missing values. If we have any, we will skip those observations.\n\nprint(df.isnull().sum())\ndf.dropna(axis=1,inplace=True)\ndf.head()\n\nCRIM       20\nZN         20\nINDUS      20\nCHAS       20\nNOX         0\nRM          0\nAGE        20\nDIS         0\nRAD         0\nTAX         0\nPTRATIO     0\nB           0\nLSTAT      20\nMEDV        0\ndtype: int64\n\n\n\n\n\n\n\n\n\nNOX\nRM\nDIS\nRAD\nTAX\nPTRATIO\nB\nMEDV\n\n\n\n\n0\n0.538\n6.575\n4.0900\n1\n296\n15.3\n396.90\n24.0\n\n\n1\n0.469\n6.421\n4.9671\n2\n242\n17.8\n396.90\n21.6\n\n\n2\n0.469\n7.185\n4.9671\n2\n242\n17.8\n392.83\n34.7\n\n\n3\n0.458\n6.998\n6.0622\n3\n222\n18.7\n394.63\n33.4\n\n\n4\n0.458\n7.147\n6.0622\n3\n222\n18.7\n396.90\n36.2\n\n\n\n\n\n\n\n\nThe data looks clean and ready to implement to the KNNRegressor. Note that, for predictive modeling we need a lot of things, such as exporatory data analysis (EDA), feature engineering, preprocessing and others. However, we will simply apply the KNNRegressor that we built from scratch and built-in library function from scikit-learn to explore the algorithm and find the optimal \\(K\\).\n\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport matplotlib.pyplot as plt \n\n\nX = df.drop('MEDV',axis=1)\ny = df['MEDV']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,y, test_size=0.30, random_state=123\n)\nscaler = StandardScaler()\nX_train_sc = scaler.fit_transform(X_train)\nX_test_sc = scaler.transform(X_test)\n\nk_values = [5,15,30,40]\n\nkfold = KFold(n_splits=7, shuffle=True, random_state=123)\nmses = np.zeros((7,4))\n\nfor i,(train_index,test_index) in enumerate(kfold.split(X_train_sc)):\n    X_train_train = X_train_sc[train_index]\n    X_train_holdout = X_train_sc[test_index]\n\n    y_train_train = y_train.iloc[train_index]\n    y_train_holdout = y_train.iloc[test_index]\n\n    for j,k in enumerate(k_values):\n        regressor1 = CustomKNNRegressor(k=k)\n        regressor1.fit(X_train_train, y_train_train)\n        preds = regressor1.predict(X_train_holdout)\n        mses[i,j] = mean_squared_error(preds, y_train_holdout)\n\nplt.scatter(np.zeros(7),mses[:,0], s=60, c='white', edgecolors='black', label='Single Split')\nplt.scatter(np.ones(7),mses[:,1],s=60, c='white', edgecolors='black')\nplt.scatter(2*np.ones(7),mses[:,2],s=60, c='white', edgecolors='black')\nplt.scatter(3*np.ones(7),mses[:,3],s=60, c='white', edgecolors='black')\nplt.scatter([0,1,2,3], np.mean(mses, axis=0), s=60,c='r', marker='X', label='Mean')\nplt.legend(loc='upper right')\nplt.xticks([0,1,2,3],['K=5','K=15','K=30','K=40'])\nplt.ylabel('MSE')\nplt.gca().set_facecolor('#f4f4f4')\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nSo, \\(K=5\\) seems optimal based on our custom built regressor. Now if we do the same thing using the scikit-learn library\n\nfrom sklearn.neighbors import KNeighborsRegressor\n\n\nmses = np.zeros((7,4))\n\nfor i,(train_index,test_index) in enumerate(kfold.split(X_train_sc)):\n    X_train_train = X_train_sc[train_index]\n    X_train_holdout = X_train_sc[test_index]\n\n    y_train_train = y_train.iloc[train_index]\n    y_train_holdout = y_train.iloc[test_index]\n\n    for j,k in enumerate(k_values):\n        regressor2 = KNeighborsRegressor(k)\n        regressor2.fit(X_train_train, y_train_train)\n        preds = regressor2.predict(X_train_holdout)\n        mses[i,j] = mean_squared_error(preds, y_train_holdout)\n\nplt.scatter(np.zeros(7),mses[:,0], s=60, c='white', edgecolors='black', label='Single Split')\nplt.scatter(np.ones(7),mses[:,1],s=60, c='white', edgecolors='black')\nplt.scatter(2*np.ones(7),mses[:,2],s=60, c='white', edgecolors='black')\nplt.scatter(3*np.ones(7),mses[:,3],s=60, c='white', edgecolors='black')\nplt.scatter([0,1,2,3], np.mean(mses, axis=0), s=60,c='r', marker='X', label='Mean')\nplt.legend(loc='upper right')\nplt.xticks([0,1,2,3],['K=5','K=15','K=30','K=40'])\nplt.ylabel('MSE')\nplt.gca().set_facecolor('#f4f4f4')\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nIn both method, we got \\(K=5\\) is the optimal number of neighbors for KNN regression. Let’s apply this in our test dataset\n\nregressor = CustomKNNRegressor(k=5)\nregressor.fit(X_train_sc, y_train)\n\npredictions = regressor.predict(X_test_sc)\n\nmse = mean_squared_error(predictions,y_test)\nrsquared = r2_score(predictions,y_test)\nprint('MSE = {}'.format(np.round(mse,2)),' and R-square = {}'.format(np.round(rsquared,2)))\n\nMSE = 41.26  and R-square = 0.23\n\n\n\n\nConclusion\n\nK-Nearest Neighbors is a simple, intuitive algorithm that can be highly effective in both classification and regression problems. Its simplicity comes from the fact that it doesn’t make any assumptions about the underlying data distribution (it’s non-parametric). However, its performance can be sensitive to the choice of K and the distance metric.   Although it’s easy to implement, KNN can become computationally expensive for large datasets, as it requires calculating distances between the test point and all training samples.   If you need an efficient version, it’s always possible to use optimized libraries like scikit-learn, but writing the algorithm from scratch helps build a solid understanding.\n\n\n\nWhen to Use KNN Over Linear Regression?\nWe would consider using KNN regression over linear regression in the following situations:\n\nNon-linear relationships: When the data shows non-linear patterns or complex relationships between features and target variables that cannot be captured by a straight line.\n\nLocal behavior: When data has local patterns or clusters, and you believe that predictions should rely on the nearest data points.\n\nMinimal assumptions: If you do not want to assume a specific relationship between the features and target, KNN’s non-parametric nature might be more appropriate.\n\nSmaller datasets: KNN works well with smaller datasets and lower-dimensional data where calculating distances is feasible and efficient.\n\nHowever, KNN becomes less efficient and struggles in high dimensions or when the dataset is large. In those cases, linear regression or other more scalable models may be more appropriate"
  },
  {
    "objectID": "dsandml/knn/index.html#references",
    "href": "dsandml/knn/index.html#references",
    "title": "K Nearest Neighbors Regression",
    "section": "References",
    "text": "References\n\nKNN Regressor Overview:\n\nGéron, Aurélien. Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems. O’Reilly Media, 2019. This book provides an in-depth explanation of KNN, including its behavior in non-linear data and high-dimensionality challenges.\nBishop, Christopher M. Pattern Recognition and Machine Learning. Springer, 2006. This book covers non-parametric methods like KNN, highlighting the “curse of dimensionality” and distance-based approaches.\n\nKNN vs. Linear Regression (Model Assumptions & Complexity of Data):\n\nHastie, Trevor, Tibshirani, Robert, and Friedman, Jerome. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer, 2009. This source discusses the assumptions behind linear regression and the flexibility of non-parametric models like KNN.\nKuhn, Max, and Johnson, Kjell. Applied Predictive Modeling. Springer, 2013. The comparison between parametric (like linear regression) and non-parametric models (like KNN) is elaborated in this book.\n\nInterpretability:\n\nMolnar, Christoph. Interpretable Machine Learning: A Guide for Making Black Box Models Explainable. 2019. This book emphasizes the trade-offs between interpretable models like linear regression and more black-box models like KNN.\nMurdoch, W. James, et al. “Definitions, methods, and applications in interpretable machine learning.” Proceedings of the National Academy of Sciences 116.44 (2019): 22071-22080.\n\nSensitivity to Outliers:\n\nAggarwal, Charu C. Data Classification: Algorithms and Applications. Chapman and Hall/CRC, 2014. This discusses the impact of outliers on different models, including linear regression and KNN.\nFriedman, Jerome, et al. The Elements of Statistical Learning. Springer Series in Statistics, 2001. Sensitivity to outliers is compared across various regression techniques, including KNN.\n\nHandling High-Dimensional Data:\n\nDomingos, Pedro. “A few useful things to know about machine learning.” Communications of the ACM 55.10 (2012): 78-87. This paper discusses challenges like the curse of dimensionality in models like KNN.\nVerleysen, Michel, and François, Damien. “The curse of dimensionality in data mining and time series prediction.” International Work-Conference on Artificial Neural Networks. Springer, 2005.\n\nTraining and Prediction Time:\n\nShalev-Shwartz, Shai, and Ben-David, Shai. Understanding Machine Learning: From Theory to Algorithms. Cambridge University Press, 2014. Provides insights into the computational cost differences between linear and non-parametric models like KNN.\nLi, Zhe, et al. “Fast k-nearest neighbor search using GPU.” International Conference on Image and Graphics. Springer, 2015. This paper discusses computational complexity related to KNN.\n\nOverfitting and Flexibility:\n\nYao, Ying, et al. “Overfitting and Underfitting: A Visual Explanation.” Towards Data Science, 2019. Offers a visual and intuitive explanation of the bias-variance tradeoff in KNN and linear models.\nRasmussen, Carl E., and Williams, Christopher KI. Gaussian Processes for Machine Learning. MIT Press, 2006. Discusses overfitting in KNN due to small values of k and regularization techniques for linear models.\n\n\n\nShare on\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/naivebayes/index.html",
    "href": "dsandml/naivebayes/index.html",
    "title": "Classification using Naive Bayes algorithm",
    "section": "",
    "text": "Naive Bayes is a family of simple yet powerful probabilistic classifiers based on Bayes’ Theorem, with the assumption of independence among predictors. It is widely used for tasks like spam detection, text classification, and sentiment analysis due to its efficiency and simplicity. Despite being called “naive” for its strong assumption of feature independence, it often performs remarkably well in real-world scenarios."
  },
  {
    "objectID": "dsandml/naivebayes/index.html#introduction",
    "href": "dsandml/naivebayes/index.html#introduction",
    "title": "Classification using Naive Bayes algorithm",
    "section": "",
    "text": "Naive Bayes is a family of simple yet powerful probabilistic classifiers based on Bayes’ Theorem, with the assumption of independence among predictors. It is widely used for tasks like spam detection, text classification, and sentiment analysis due to its efficiency and simplicity. Despite being called “naive” for its strong assumption of feature independence, it often performs remarkably well in real-world scenarios."
  },
  {
    "objectID": "dsandml/naivebayes/index.html#what-is-naive-bayes",
    "href": "dsandml/naivebayes/index.html#what-is-naive-bayes",
    "title": "Classification using Naive Bayes algorithm",
    "section": "What is Naive Bayes?",
    "text": "What is Naive Bayes?\n\nNaive Bayes is a probabilistic classifier that leverages Bayes’ Theorem to predict the class of a given data point. It belongs to the family of generative models and works by estimating the posterior probability of a class given a set of features. The term “Naive” refers to the assumption that features are conditionally independent given the class label, which simplifies computation.\n\n\nBayes’ Theorem: The Foundation\nBayes’ Theorem provides a way to update our beliefs about the probability of an event, based on new evidence. The formula for Bayes’ Theorem is:\n\\[\nP(y|X) = \\frac{P(X|y) \\cdot P(y)}{P(X)}\n\\]\nWhere:\n\n\\(P(y|X)\\): Posterior probability of class \\(y\\) given feature set \\(X\\)\n\n\\(P(X|y)\\): Likelihood of feature set \\(X\\) given class \\(y\\)\n\n\\(P(y)\\): Prior probability of class \\(y\\)\n\n\\(P(X)\\): Evidence or probability of feature set \\(X\\)\n\nIn the context of classification:\n\nThe goal is to predict \\(y\\) (the class) given \\(X\\) (the features).\n\n\\(P(y)\\) is derived from the distribution of classes in the training data.\n\n\\(P(X|y)\\) is derived from the distribution of features for each class.\n\n\\(P(X)\\) is a normalizing constant to ensure probabilities sum to 1, but it can be ignored for classification purposes because it is the same for all classes.\n\n\n\nAssumptions and Requirements\nThe key assumption in Naive Bayes is the conditional independence of features. Specifically, it assumes that the likelihood of each feature is independent of the others, given the class label:\n\\[\nP(X_1, X_2, \\dots, X_n | y) = P(X_1 | y) \\cdot P(X_2 | y) \\cdot \\dots \\cdot P(X_n | y)\n\\]\nWhile this assumption is often violated in real-world data, Naive Bayes can still perform well, especially when certain features dominate the prediction.\nRequirements:\n\nNumerical Data: Naive Bayes can handle both numerical and categorical data, though different versions (Gaussian, Multinomial, Bernoulli) of the algorithm handle specific types of data more effectively\nNon-Collinear Features: Highly correlated features can distort predictions since the model assumes independence.\n\nSufficient Data: Naive Bayes relies on probability estimates; thus, insufficient data might lead to unreliable predictions."
  },
  {
    "objectID": "dsandml/naivebayes/index.html#types-of-naive-bayes-classifiers",
    "href": "dsandml/naivebayes/index.html#types-of-naive-bayes-classifiers",
    "title": "Classification using Naive Bayes algorithm",
    "section": "Types of Naive Bayes Classifiers",
    "text": "Types of Naive Bayes Classifiers\nThere are several variants of Naive Bayes, depending on the nature of the data:\n\nGaussian Naive Bayes: Assumes features follow a Gaussian distribution (useful for continuous data).\n\nMultinomial Naive Bayes: Suitable for discrete data, often used in text classification (e.g., word counts).\n\nBernoulli Naive Bayes: Works well for binary/boolean data, often used in scenarios where the features represent the presence/absence of a characteristic."
  },
  {
    "objectID": "dsandml/naivebayes/index.html#mathematics-behind-the-process",
    "href": "dsandml/naivebayes/index.html#mathematics-behind-the-process",
    "title": "Classification using Naive Bayes algorithm",
    "section": "Mathematics behind the process",
    "text": "Mathematics behind the process\nTo understand the working of Naive Bayes, let’s start with the Bayes’s theorem\n\\[\nP(y_k | X) = \\frac{P(X|y_k) \\cdot P(y_k)}{P(X)}\n\\]\nWhere \\(y_k\\) is one of the possible classes. Due to the independence assumption, the likelihood term \\(P(X|y_k)\\) can be factorized as:\n\\[\nP(X|y_k) = P(x_1|y_k) \\cdot P(x_2|y_k) \\cdot \\dots \\cdot P(x_n|y_k)\n\\]\nWhere \\(x_1, x_2, \\dots, x_n\\) are the individual features in the feature set \\(X\\). For each class \\(y_k\\), compute the posterior probability:\n\\[\nP(y_k | X) \\propto P(y_k) \\cdot \\prod_{i=1}^n P(x_i|y_k)\n\\]\nThe denominator \\(P(X)\\) is constant for all classes, so we can ignore it during classification. Finally, the class \\(y_k\\) with the highest posterior probability is chosen as the predicted class:\n\\[\\begin{align*}\n\\hat{y} &= \\arg\\max_{y_k} P(y_k) \\cdot \\prod_{i=1}^n P(x_i|y_k)\\\\\n\\log{(\\hat{y})}&= \\log{ \\left(\\arg\\max_{y_k} P(y_k) \\cdot \\prod_{i=1}^n P(x_i|y_k)\\right)}\\\\\n\\implies \\hat{y} & = \\arg\\max_{y_k} \\left(\\log P(y_k)+\\sum_{i=1}^{n} P(x_i|y_k)\\right)\n\\end{align*}\\]\n\nComputing the probabilities\n\nPrior Probabilities\n\\(P(y_k)\\) is the prior probability, usually frequency of each class \\(k\\).\n\\[\n  P(y_k)=\\frac{\\text{number of instances in class }y_k}{\\text{total number of instances}}\n\\]\n\n\nClass Conditional Probabilities\n\\(P(x_i|y_k)\\) is the class conditional probability. For the\n\nGaussian Naive Bayes: when the features are continuous and assumed that the features follow a Gaussian distribution, the class conditional probability is given as \\[\nP(x_i|y_k) = \\frac{1}{\\sqrt{2\\pi \\sigma^2_k}}\\exp{\\left(-\\frac{(x_i-\\mu_i)^2}{2\\sigma^2_k}\\right)}\n\\]\nMultinomial Naive Bayes: when the featrues (typically word frequencies) follow a multinomial distribution, the class conditional distribution is given as\n\\[\nP(x_i|y_k)=\\frac{N_{x_i,y_k}+\\alpha}{N_{y_k}+\\alpha V}\n\\]\nwhere,\n\n\\(N_{x_i,y_k}\\) is the count of the feature (e.g. word or term) \\(x_i\\) appearing in documents of class \\(y_k\\)\n\n\\(N_{y_k}\\) is the total count of all features (e.g. words) in all documents belonging to class \\(y_k\\)\n\n\\(\\alpha\\) is a smoothing parameter (often called Laplace smoothing), used to avoid zero probabilities. If not using smoothing, set \\(\\alpha=0\\)\n\n\\(V\\) is the size of the vocabulary (i.e., the number of unique words)\n\nBernoulli Naive Bayes: when features are binary/boolean data, often used in scenarios where the features represent the presence/absence of a characteristic, the class conditional distribution is given as\n\\[\nP(x_i|y_k)=\\begin{cases}\\frac{N_{x_i,y_k}+\\alpha}{N_{y_k}+2\\alpha }\\hspace{2mm}\\text{ if } x_i=1\\\\\n1-\\frac{N_{x_i,y_k}+\\alpha}{N_{y_k}+2\\alpha }\\hspace{2mm}\\text{ if } x_i=0\\end{cases}\n\\]"
  },
  {
    "objectID": "dsandml/naivebayes/index.html#python-implementation",
    "href": "dsandml/naivebayes/index.html#python-implementation",
    "title": "Classification using Naive Bayes algorithm",
    "section": "Python Implementation",
    "text": "Python Implementation\n\nGaussian Naive Bayes\nCode credit for the custom classifier goes to Assembly AI\n\nimport numpy as np\n\nclass GNaiveBayes:\n    def fit(self, X,y):\n        \"\"\"\n        n_samples: number of observed data n; int;\n        n_features: number of continueous features d; int;\n        _classes: unique classes\n        n_classes: number of unique classes\n        \"\"\"\n        n_samples, n_features = X.shape\n        self._classes = np.unique(y)\n        n_classes = len(self._classes)\n\n        # Calculate mean, variance, and prior for each class  \n        self._mean = np.zeros((n_classes,n_features),dtype=np.float64)\n        self._var = np.zeros((n_classes,n_features),dtype=np.float64)\n        self._prior = np.zeros(n_classes,dtype=np.float64)\n\n        for idx, c in enumerate(self._classes):\n            X_c = X[y==c]\n            self._mean[idx,:] = X_c.mean(axis=0)\n            self._var[idx,:] = X_c.var(axis=0)\n            self._prior[idx] = X_c.shape[0]/float(n_samples)\n    \n    def predict(self,X):\n        y_pred = [self._predict(x) for x in X]\n\n        return np.array(y_pred)\n\n    def _predict(self, x):\n        posteriors = []\n\n        # Calculate the posterior probability for each class  \n        for idx,c in enumerate(self._classes):\n            prior = np.log(self._prior[idx])\n            post = np.sum(np.log(self._pdf(idx,x)))\n            posterior = post + prior\n            posteriors.append(posterior)\n        # Return the class with the highest posterior\n        return self._classes[np.argmax(posteriors)]\n    \n    def _pdf(self, class_idx, x):\n        mean = self._mean[class_idx]\n        var = self._var[class_idx]\n        numerator = np.exp(-((x-mean)**2)/(2*var))\n        denominator = np.sqrt(2*np.pi*var)\n\n        return numerator/denominator\n\nLet’s apply this to the irish data set\n\nimport pandas as pd\nfrom sklearn.datasets import load_iris\n\n\n# Load Iris dataset\ndata = load_iris()\nX = data.data  # Features\ny = data.target  # Target variable (Classes)\ndf = pd.DataFrame(X, columns=data.feature_names)\ndf['target'] = pd.Categorical.from_codes(y, data.target_names)\ndf.head()\n\n\n\n\n\n\n\n\nsepal length (cm)\nsepal width (cm)\npetal length (cm)\npetal width (cm)\ntarget\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report  \n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\ngnb1 = GNaiveBayes()\ngnb1.fit(X_train, y_train)\npred1 = gnb1.predict(X_test)\n# Evaluate the model\nacc1 = accuracy_score(y_test, pred1)\n\ngnb2 = GaussianNB()\ngnb2.fit(X_train, y_train)\npred2 = gnb2.predict(X_test)\nacc2 = accuracy_score(y_test, pred2) \n\nprint('Accuracy from custom classifier = {:.2f}'.format(acc1*100))\n\n# Confusion matrix and classification report\nprint(confusion_matrix(y_test, pred1))\nprint(classification_report(y_test, pred1))\nprint('\\n')\nprint('Accuracy from sklearn classifier = {:.2f}'.format(acc2*100))\nprint(confusion_matrix(y_test, pred2))\nprint(classification_report(y_test, pred2))\n\nAccuracy from custom classifier = 97.78\n[[19  0  0]\n [ 0 12  1]\n [ 0  0 13]]\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        19\n           1       1.00      0.92      0.96        13\n           2       0.93      1.00      0.96        13\n\n    accuracy                           0.98        45\n   macro avg       0.98      0.97      0.97        45\nweighted avg       0.98      0.98      0.98        45\n\n\n\nAccuracy from sklearn classifier = 97.78\n[[19  0  0]\n [ 0 12  1]\n [ 0  0 13]]\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        19\n           1       1.00      0.92      0.96        13\n           2       0.93      1.00      0.96        13\n\n    accuracy                           0.98        45\n   macro avg       0.98      0.97      0.97        45\nweighted avg       0.98      0.98      0.98        45\n\n\n\n\n\nMultinomial Naive Bayes\n\nclass MNaiveBayes:\n    def __init__(self, alpha = 1):\n        self.alpha = alpha\n\n    def fit(self, X,y):\n        \"\"\"\n        Fit the Multinomial Naive Bayes model to the training data.  \n        X: input data (n_samples, n_features)\n        y: target labels (n_samples)\n        \"\"\"\n        n_samples, n_features = X.shape\n        self._classes = np.unique(y)\n        n_classes = len(self._classes)\n\n        # Initialize and count priors \n        self._class_feature_count = np.zeros((n_classes, n_features),dtype=np.float64)\n        self._class_count = np.zeros(n_classes, dtype=np.float64)\n        self._prior = np.zeros(n_classes, dtype=np.float64)\n\n        for idx,c in enumerate(self._classes):\n            X_c = X[y==c]\n            self._class_feature_count[idx,:] = X_c.sum(axis=0)\n            self._class_count[idx] = X_c.shape[0]\n            self._prior[idx] = X_c.shape[0]/float(n_samples)\n        \n        # Total count of all features accross all classes \n        self._total_feature_count = self._class_feature_count.sum(axis=1)\n    \n    def predict(self, X):\n        y_pred = [self._predict(x) for x in X]\n        return np.array(y_pred)\n    \n    def _predict(self,x):\n        posteriors = []\n        for idx, c in enumerate(self._classes):\n            prior = np.log(self._prior[idx])\n            likelihood = np.sum(np.log(self._likelihood(idx,x)))\n            posterior_prob = prior+ likelihood\n            posteriors.append(posterior_prob)\n        return self._classes[np.argmax(posteriors)]\n    \n    def _likelihood(self, class_idx, x):\n        alpha = self.alpha\n        V = len(self._class_feature_count[class_idx])\n        class_feature_count = self._class_feature_count[class_idx]\n        total_class_count = self._total_feature_count[class_idx]\n        likelihood = (class_feature_count+alpha)/(total_class_count + alpha * V)\n\n        return likelihood**x\n\nX = np.array([[2, 1, 0],\n              [1, 0, 1],\n              [0, 3, 0],\n              [2, 2, 1],\n              [0, 0, 2]])\n\n# Corresponding labels (2 classes: 0 and 1)\ny = np.array([0, 1, 0, 0, 1])\n\n# Create and train Multinomial Naive Bayes model\nmodel = MNaiveBayes()\nmodel.fit(X, y)\n\n# Predict for new sample\nX_test = np.array([[1, 1, 0], [0, 1, 1]])\npredictions = model.predict(X_test)\nprint(predictions)\n\n[0 0]"
  },
  {
    "objectID": "dsandml/naivebayes/index.html#pros-and-cons-of-naive-bayes",
    "href": "dsandml/naivebayes/index.html#pros-and-cons-of-naive-bayes",
    "title": "Classification using Naive Bayes algorithm",
    "section": "Pros and Cons of Naive Bayes",
    "text": "Pros and Cons of Naive Bayes\n\nPros:\n\nSimplicity: Easy to implement and computationally efficient.\n\nFast Training and Prediction: Naive Bayes is especially fast for both training and inference, even on large datasets.\n\nPerforms Well with Small Data: Despite its simplicity, Naive Bayes works well even with relatively small datasets.\n\nHandles Irrelevant Features: Naive Bayes can often ignore irrelevant features in the data since the independence assumption dilutes their influence.\n\nMulti-Class Classification: Naturally suited for multi-class classification problems.\n\n\n\nCons:\n\nStrong Assumption of Independence: The assumption that features are independent is rarely true in real-world data, which can limit the model’s effectiveness.\n\nPoor Estimation of Probabilities: When dealing with very small datasets or unseen feature combinations, Naive Bayes can yield inaccurate probability estimates.\n\nZero-Frequency Problem: If a feature value was not present in the training data, Naive Bayes will assign zero probability to the entire class, which can be addressed using Laplace smoothing."
  },
  {
    "objectID": "dsandml/lda/index.html",
    "href": "dsandml/lda/index.html",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "",
    "text": "Linear Discriminant Analysis (LDA) is a supervised machine learning algorithm commonly used for classification tasks. It is widely applied when dealing with datasets where the number of predictors (features) exceeds the number of observations, or when multicollinearity is a concern. LDA works by projecting data onto a lower-dimensional space, maximizing the separation between classes."
  },
  {
    "objectID": "dsandml/lda/index.html#introduction",
    "href": "dsandml/lda/index.html#introduction",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "",
    "text": "Linear Discriminant Analysis (LDA) is a supervised machine learning algorithm commonly used for classification tasks. It is widely applied when dealing with datasets where the number of predictors (features) exceeds the number of observations, or when multicollinearity is a concern. LDA works by projecting data onto a lower-dimensional space, maximizing the separation between classes."
  },
  {
    "objectID": "dsandml/lda/index.html#mathematical-foundation-of-lda",
    "href": "dsandml/lda/index.html#mathematical-foundation-of-lda",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "Mathematical Foundation of LDA",
    "text": "Mathematical Foundation of LDA\n\nLet’s assume we have a dataset \\(X \\in \\mathbb{R}^{n \\times p}\\) consisting of \\(n\\) data points and \\(p\\) features, and each data point belongs to one of \\(K\\) distinct classes. The goal of LDA is to find a new space (called a discriminant space) in which the classes are maximally separated, i.e. we want to maximize the separability between classes while minimizing the variation within each class. This can be mathematically expressed as finding a projection that maximizes the ratio of between-class variance to within-class variance.\n\nFor each class \\(C_k\\) (where \\(k \\in \\{1, 2, \\dots, K\\}\\)):\n\n\\(\\mu_k\\) is the mean vector of class \\(C_k\\).\n\n\\(\\mu\\) is the overall mean of the entire dataset.\n\nClass Mean: For each class \\(C_k\\), the mean is calculated as:\n\\[\n\\mu_k = \\frac{1}{N_k} \\sum_{x_i \\in C_k} x_i\n\\]\nwhere \\(N_k\\) is the number of data points in class \\(C_k\\), and \\(x_i\\) represents individual data points.\nOverall Mean: The mean of the entire dataset is:\n\\[\n\\mu = \\frac{1}{n} \\sum_{i=1}^{n} x_i\n\\]\nTo understand how well classes are separated, we need two key measures:\n\nWithin-Class Scatter Matrix \\(S_W\\)\nThe within-class scatter matrix measures how the data points of each class deviate from the class mean. It captures the spread of data points within each class. For class \\(C_k\\), the scatter matrix is calculated as:\n\\[\nS_W = \\sum_{k=1}^{K} \\sum_{x_i \\in C_k} (x_i - \\mu_k)(x_i - \\mu_k)^T\n\\]\nThis formula is saying that for each class \\(C_k\\), we calculate the distance of every point \\(x_i\\) from the mean of its class \\(\\mu_k\\), and then sum these squared distances across all classes.\nBetween-Class Scatter Matrix \\(S_B\\)\nThe between-class scatter matrix measures how the class means deviate from the overall mean. It captures how well-separated the classes are.\n\\[\nS_B = \\sum_{k=1}^{K} N_k (\\mu_k - \\mu)(\\mu_k - \\mu)^T\n\\]\nIn this case, for each class \\(C_k\\), we calculate the distance between the mean of class \\(\\mu_k\\) and the overall mean \\(\\mu\\), then scale this by the number of points in class \\(C_k\\).\n\n\n\nLDA aims to find a transformation that maximizes the separation between classes. This is done by finding a linear projection \\(\\mathbf{w}\\) such that the between-class scatter is maximized and the within-class scatter is minimized. Mathematically, the optimization problem becomes:\n\n\\[\nJ(\\mathbf{w}) = \\frac{\\mathbf{w}^T S_B \\mathbf{w}}{\\mathbf{w}^T S_W \\mathbf{w}}\n\\]\n\n\\(S_B \\mathbf{w}\\) captures the between-class variance (how well-separated the classes are in the new projection).\n\n\\(S_W \\mathbf{w}\\) captures the within-class variance (how tightly packed the points of the same class are in the new projection).\n\nThis ratio \\(J(\\mathbf{w})\\) is known as the Fisher’s discriminant ratio. The goal is to find \\(\\mathbf{w}\\) that maximizes this ratio. To maximize the Fisher’s discriminant ratio, we need to solve the following generalized eigenvalue problem:\n\\[\nS_W^{-1} S_B \\mathbf{w} = \\lambda \\mathbf{w}\n\\]\nHere, \\(\\mathbf{w}\\) is the vector that defines the linear combination of features that maximizes class separation, and \\(\\lambda\\) is an eigenvalue that represents how much variance is explained by that direction.\nThe solution to this equation gives us the eigenvectors (directions) and eigenvalues (variances) of the transformed space. We select the top eigenvectors corresponding to the largest eigenvalues to form the projection matrix \\(W\\)."
  },
  {
    "objectID": "dsandml/lda/index.html#dimensionality-reduction",
    "href": "dsandml/lda/index.html#dimensionality-reduction",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "Dimensionality Reduction",
    "text": "Dimensionality Reduction\n\nThe LDA transformation reduces the dimensionality of the data by projecting it onto a subspace spanned by the eigenvectors with the largest eigenvalues. For a dataset with \\(K\\) classes, LDA can reduce the data to at most \\(K-1\\) dimensions because \\(S_B\\) has rank \\(K-1\\).  If we have two classes, LDA will reduce the data to a one-dimensional subspace. For three classes, LDA can project the data onto a two-dimensional subspace, and so on.\n\n\nNow before diving into the python code, let’s do some math by hand so that we can understand the skeleton of the process. Let’s create a small dataset with 6 features and 4 observations divided into 3 classes. We will use this dataset to manually go through the Linear Discriminant Analysis (LDA) process step by step.\n\nDataset\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\nFeature 1\nFeature 2\nFeature 3\nFeature 4\nFeature 5\nFeature 6\nClass\n\n\n\n\n\\(x_1\\)\n2\n3\n4\n5\n6\n7\n\\(C_1\\)\n\n\n\\(x_2\\)\n3\n4\n5\n6\n7\n8\n\\(C_1\\)\n\n\n\\(x_3\\)\n6\n5\n4\n3\n2\n1\n\\(C_2\\)\n\n\n\\(x_4\\)\n7\n6\n5\n4\n3\n2\n\\(C_3\\)\n\n\n\nNow, we’ll walk through the mathematical steps of LDA for this small dataset.\n\n\n1. Compute Class Means \\(\\mu_k\\) for each class:\n\nClass \\(C_1\\) (mean of \\(x_1\\) and \\(x_2\\)): \\[\n\\mu_1 = \\frac{1}{2} \\left( \\begin{bmatrix} 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\end{bmatrix} + \\begin{bmatrix} 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\end{bmatrix} \\right) = \\begin{bmatrix} 2.5 \\\\ 3.5 \\\\ 4.5 \\\\ 5.5 \\\\ 6.5 \\\\ 7.5 \\end{bmatrix}\n\\]\nClass \\(C_2\\) (only one observation \\(x_3\\)): \\[\n\\mu_2 = \\begin{bmatrix} 6 \\\\ 5 \\\\ 4 \\\\ 3 \\\\ 2 \\\\ 1 \\end{bmatrix}\n\\]\nClass \\(C_3\\) (only one observation \\(x_4\\)): \\[\n\\mu_3 = \\begin{bmatrix} 7 \\\\ 6 \\\\ 5 \\\\ 4 \\\\ 3 \\\\ 2 \\end{bmatrix}\n\\]\n\n\n\n2. Compute Overall Mean \\(\\mu\\):\nWe compute the overall mean \\(\\mu\\), which is the average of all observations from all classes:\n\\[\n\\mu = \\frac{1}{4} \\left( \\begin{bmatrix} 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\end{bmatrix} + \\begin{bmatrix} 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\end{bmatrix} + \\begin{bmatrix} 6 \\\\ 5 \\\\ 4 \\\\ 3 \\\\ 2 \\\\ 1 \\end{bmatrix} + \\begin{bmatrix} 7 \\\\ 6 \\\\ 5 \\\\ 4 \\\\ 3 \\\\ 2 \\end{bmatrix} \\right)= \\frac{1}{4} \\begin{bmatrix} 18 \\\\ 18 \\\\ 18 \\\\ 18 \\\\ 18 \\\\ 18 \\end{bmatrix} = \\begin{bmatrix} 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\end{bmatrix}\n\\]\n\n\n3. Compute the Within-Class Scatter Matrix \\(S_W\\):\nFor each class \\(C_k\\), the within-class scatter matrix \\(S_W\\) is computed as:\n\\[\nS_W = \\sum_{k=1}^{K} \\sum_{x_i \\in C_k} (x_i - \\mu_k)(x_i - \\mu_k)^T\n\\]\nFor \\(C_1\\), the within-class scatter matrix is:\n\\[\n(x_1 - \\mu_1) = \\begin{bmatrix} 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\end{bmatrix} - \\begin{bmatrix} 2.5 \\\\ 3.5 \\\\ 4.5 \\\\ 5.5 \\\\ 6.5 \\\\ 7.5 \\end{bmatrix} = \\begin{bmatrix} -0.5 \\\\ -0.5 \\\\ -0.5 \\\\ -0.5 \\\\ -0.5 \\\\ -0.5 \\end{bmatrix}; \\hspace{6mm} (x_2 - \\mu_1) = \\begin{bmatrix} 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\end{bmatrix} - \\begin{bmatrix} 2.5 \\\\ 3.5 \\\\ 4.5 \\\\ 5.5 \\\\ 6.5 \\\\ 7.5 \\end{bmatrix} = \\begin{bmatrix} 0.5 \\\\ 0.5 \\\\ 0.5 \\\\ 0.5 \\\\ 0.5 \\\\ 0.5 \\end{bmatrix}\n\\]\nFor class \\(C_1\\), the scatter matrix is:\n\\[\\begin{align*}\nS_{W1} &= (x_1 - \\mu_1)(x_1 - \\mu_1)^T + (x_2 - \\mu_1)(x_2 - \\mu_1)^T\\\\\n&=\\begin{bmatrix} -0.5 \\\\ -0.5 \\\\ -0.5 \\\\ -0.5 \\\\ -0.5 \\\\ -0.5 \\end{bmatrix} \\begin{bmatrix} -0.5 & -0.5 & -0.5 & -0.5 & -0.5 & -0.5 \\end{bmatrix} + \\begin{bmatrix} 0.5 \\\\ 0.5 \\\\ 0.5 \\\\ 0.5 \\\\ 0.5 \\\\ 0.5 \\end{bmatrix} \\begin{bmatrix} 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\end{bmatrix}\\\\\n&= \\begin{bmatrix} 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\end{bmatrix}\n\\end{align*}\\]\nFor classes \\(C_2\\) and \\(C_3\\), there is only one data point in each, so there is no within-class scatter:\n\\[\nS_{W2} = 0, \\quad S_{W3} = 0\n\\]\nThus, the total within-class scatter matrix is:\n\\[\nS_W = S_{W1} + S_{W2} + S_{W3} = S_{W1}\n\\]\n\\[\nS_W = \\begin{bmatrix} 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\end{bmatrix}\n\\]\n\n\n4. Compute the Between-Class Scatter Matrix \\(S_B\\):\nFor each class \\(C_k\\), the between-class scatter matrix is computed as:\n\\[\nS_B = \\sum_{k=1}^{K} N_k (\\mu_k - \\mu)(\\mu_k - \\mu)^T\n\\]\nFor class \\(C_1\\) (where \\(N_1 = 2\\)):\n\\[\n(\\mu_1 - \\mu) = \\begin{bmatrix} 2.5 \\\\ 3.5 \\\\ 4.5 \\\\ 5.5 \\\\ 6.5 \\\\ 7.5 \\end{bmatrix} - \\begin{bmatrix} 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\end{bmatrix} = \\begin{bmatrix} -2 \\\\ -1 \\\\ 0 \\\\ 1 \\\\ 2 \\\\ 3 \\end{bmatrix}\n\\]\nThus, for \\(C_1\\):\n\\[\\begin{align*}\nS_{B1} &= 2 \\begin{bmatrix} -2 \\\\ -1 \\\\ 0 \\\\ 1 \\\\ 2 \\\\ 3 \\end{bmatrix} \\begin{bmatrix} -2 & -1 & 0 & 1 & 2 & 3 \\end{bmatrix}= 2 \\begin{bmatrix} 4 & 2 & 0 & -2 & -4 & -6 \\\\ 2 & 1 & 0 & -1 & -2 & -3 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ -2 & -1 & 0 & 1 & 2 & 3 \\\\ -4 & -2 & 0 & 2 & 4 & 6 \\\\ -6 & -3 & 0 & 3 & 6 & 9 \\end{bmatrix}\\\\\n&=\\begin{bmatrix} 8 & 4 & 0 & -4 & -8 & -12 \\\\ 4 & 2 & 0 & -2 & -4 & -6 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ -4 & -2 & 0 & 2 & 4 & 6 \\\\ -8 & -4 & 0 & 4 & 8 & 12 \\\\ -12 & -6 & 0 & 6 & 12 & 18 \\end{bmatrix}\n\\end{align*}\\]\nFor \\(C_2\\) (where \\(N_2 = 1\\)):\n\\[\n(\\mu_2 - \\mu) = \\begin{bmatrix} 6 \\\\ 5 \\\\ 4 \\\\ 3 \\\\ 2 \\\\ 1 \\end{bmatrix} - \\begin{bmatrix} 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\end{bmatrix} = \\begin{bmatrix} 1.5 \\\\ 0.5 \\\\ -0.5 \\\\ -1.5 \\\\ -2.5 \\\\ -3.5 \\end{bmatrix}\n\\]\nThe between-class scatter matrix for \\(C_2\\) is:\n\\[\\begin{align*}\nS_{B2} &= \\begin{bmatrix} 1.5 \\\\ 0.5 \\\\ -0.5 \\\\ -1.5 \\\\ -2.5 \\\\ -3.5 \\end{bmatrix} \\begin{bmatrix} 1.5 & 0.5 & -0.5 & -1.5 & -2.5 & -3.5 \\end{bmatrix}\\\\\n&= \\begin{bmatrix} 2.25 & 0.75 & -0.75 & -2.25 & -3.75 & -5.25 \\\\ 0.75 & 0.25 & -0.25 & -0.75 & -1.25 & -1.75 \\\\ -0.75 & -0.25 & 0.25 & 0.75 & 1.25 & 1.75 \\\\ -2.25 & -0.75 & 0.75 & 2.25 & 3.75 & 5.25 \\\\ -3.75 & -1.25 & 1.25 & 3.75 & 6.25 & 8.75 \\\\ -5.25 & -1.75 & 1.75 & 5.25 & 8.75 & 12.25 \\end{bmatrix}\n\\end{align*}\\]\nFor \\(C_3\\) (where \\(N_3 = 1\\)):\n\\[\n(\\mu_3 - \\mu) = \\begin{bmatrix} 7 \\\\ 6 \\\\ 5 \\\\ 4 \\\\ 3 \\\\ 2 \\end{bmatrix} - \\begin{bmatrix} 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\\\ 4.5 \\end{bmatrix} = \\begin{bmatrix} 2.5 \\\\ 1.5 \\\\ 0.5 \\\\ -0.5 \\\\ -1.5 \\\\ -2.5 \\end{bmatrix}\n\\]\nThe between-class scatter matrix for \\(C_3\\) is:\n\\[\\begin{align*}\nS_{B3} &= \\begin{bmatrix} 2.5 \\\\ 1.5 \\\\ 0.5 \\\\ -0.5 \\\\ -1.5 \\\\ -2.5 \\end{bmatrix} \\begin{bmatrix} 2.5 & 1.5 & 0.5 & -0.5 & -1.5 & -2.5 \\end{bmatrix}\\\\\n&=\\begin{bmatrix} 6.25 & 3.75 & 1.25 & -1.25 & -3.75 & -6.25 \\\\ 3.75 & 2.25 & 0.75 & -0.75 & -2.25 & -3.75 \\\\ 1.25 & 0.75 & 0.25 & -0.25 & -0.75 & -1.25 \\\\ -1.25 & -0.75 & -0.25 & 0.25 & 0.75 & 1.25 \\\\ -3.75 & -2.25 & -0.75 & 0.75 & 2.25 & 3.75 \\\\ -6.25 & -3.75 & -1.25 & 1.25 & 3.75 & 6.25 \\end{bmatrix}\n\\end{align*}\\]\nTotal Between-Class Scatter Matrix \\(S_B\\):\n\\[\\begin{align*}\nS_B &= S_{B1} + S_{B2} + S_{B3}\\\\\n&=\\begin{bmatrix} 8 & 4 & 0 & -4 & -8 & -12 \\\\ 4 & 2 & 0 & -2 & -4 & -6 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ -4 & -2 & 0 & 2 & 4 & 6 \\\\ -8 & -4 & 0 & 4 & 8 & 12 \\\\ -12 & -6 & 0 & 6 & 12 & 18 \\end{bmatrix} + \\begin{bmatrix} 2.25 & 0.75 & -0.75 & -2.25 & -3.75 & -5.25 \\\\ 0.75 & 0.25 & -0.25 & -0.75 & -1.25 & -1.75 \\\\ -0.75 & -0.25 & 0.25 & 0.75 & 1.25 & 1.75 \\\\ -2.25 & -0.75 & 0.75 & 2.25 & 3.75 & 5.25 \\\\ -3.75 & -1.25 & 1.25 & 3.75 & 6.25 & 8.75 \\\\ -5.25 & -1.75 & 1.75 & 5.25 & 8.75 & 12.25 \\end{bmatrix} \\\\\n&\\\\\n& + \\begin{bmatrix} 6.25 & 3.75 & 1.25 & -1.25 & -3.75 & -6.25 \\\\ 3.75 & 2.25 & 0.75 & -0.75 & -2.25 & -3.75 \\\\ 1.25 & 0.75 & 0.25 & -0.25 & -0.75 & -1.25 \\\\ -1.25 & -0.75 & -0.25 & 0.25 & 0.75 & 1.25 \\\\ -3.75 & -2.25 & -0.75 & 0.75 & 2.25 & 3.75 \\\\ -6.25 & -3.75 & -1.25 & 1.25 & 3.75 & 6.25 \\end{bmatrix}\n\\end{align*}\\]\nAdding the matrices gives:\n\\[\nS_B = \\begin{bmatrix} 16.5 & 8.5 & 0.5 & -7.5 & -15.5 & -23.5 \\\\ 8.5 & 4.5 & 0.5 & -3.5 & -7.5 & -11.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ -7.5 & -3.5 & 0.5 & 4.5 & 8.5 & 12.5 \\\\ -15.5 & -7.5 & 0.5 & 8.5 & 16.5 & 24.5 \\\\ -23.5 & -11.5 & 0.5 & 12.5 & 24.5 & 36.5 \\end{bmatrix}\n\\]\n\n\n5. Solve the Eigenvalue Problem:\nWe now solve the eigenvalue problem:\n\\[\nS_W^{-1} S_B \\mathbf{w} = \\lambda \\mathbf{w}\n\\]\n\nThe solution to this eigenvalue problem gives us the eigenvalues \\(\\lambda\\) (which quantify the amount of variance captured in each direction) and the eigenvectors \\(\\mathbf{w}\\) (which give the directions of maximum class separation). The eigenvector corresponding to the largest eigenvalue defines the direction of the first discriminant axis, which is the direction that maximally separates the classes.\n\n\\[\\begin{align*}\n\\begin{bmatrix}\n6.67 & 6.67 & 6.67 & 6.67 & 6.67 & 6.67 \\\\\n6.67 & 6.67 & 6.67 & 6.67 & 6.67 & 6.67 \\\\\n6.67 & 6.67 & 6.67 & 6.67 & 6.67 & 6.67 \\\\\n6.67 & 6.67 & 6.67 & 6.67 & 6.67 & 6.67 \\\\\n6.67 & 6.67 & 6.67 & 6.67 & 6.67 & 6.67 \\\\\n6.67 & 6.67 & 6.67 & 6.67 & 6.67 & 6.67 \\end{bmatrix}\\begin{bmatrix} 16.5 & 8.5 & 0.5 & -7.5 & -15.5 & -23.5 \\\\ 8.5 & 4.5 & 0.5 & -3.5 & -7.5 & -11.5 \\\\ 0.5 & 0.5 & 0.5 & 0.5 & 0.5 & 0.5 \\\\ -7.5 & -3.5 & 0.5 & 4.5 & 8.5 & 12.5 \\\\ -15.5 & -7.5 & 0.5 & 8.5 & 16.5 & 24.5 \\\\ -23.5 & -11.5 & 0.5 & 12.5 & 24.5 & 36.5 \\end{bmatrix}\\begin{bmatrix}w_1\\\\w_2\\\\w_3\\\\w_4\\\\w_5\\\\w_6\\end{bmatrix}&=\\lambda\\begin{bmatrix}w_1\\\\w_2\\\\w_3\\\\w_4\\\\w_5\\\\w_6\\end{bmatrix}\\\\\n\\implies \\begin{bmatrix}\n-2.33 & -1.00 & 0.33 & 1.67 & 3.00 & 4.33 \\\\\n-2.33 & -1.00 & 0.33 & 1.67 & 3.00 & 4.33 \\\\\n-2.33 & -1.00 & 0.33 & 1.67 & 3.00 & 4.33 \\\\\n-2.33 & -1.00 & 0.33 & 1.67 & 3.00 & 4.33 \\\\\n-2.33 & -1.00 & 0.33 & 1.67 & 3.00 & 4.33 \\\\\n-2.33 & -1.00 & 0.33 & 1.67 & 3.00 & 4.33 \\end{bmatrix}\\begin{bmatrix}w_1\\\\w_2\\\\w_3\\\\w_4\\\\w_5\\\\w_6\\end{bmatrix}&=\\lambda\\begin{bmatrix}w_1\\\\w_2\\\\w_3\\\\w_4\\\\w_5\\\\w_6\\end{bmatrix}\n\\end{align*}\\]\nThe eigenvalues of the matrix are:\n\\[\n\\lambda_1 = 6.00, \\quad \\lambda_2 = 1.78 \\times 10^{-15}, \\quad \\lambda_3 = 9.86 \\times 10^{-32}, \\quad \\lambda_4 = 0.00, \\quad \\lambda_5 = -5.47 \\times 10^{-48}, \\quad \\lambda_6 = -5.95 \\times 10^{-16}\n\\]\nThe two largest eigenvalues are:\n\n\\(\\lambda_1 = 6.00\\)\n\\(\\lambda_2 = 1.78 \\times 10^{-15}\\)\n\nThe corresponding eigenvectors for the two largest eigenvalues are:\n\\[\n\\mathbf{w_1} = \\begin{bmatrix}\n-0.408 \\\\\n-0.408 \\\\\n-0.408 \\\\\n-0.408 \\\\\n-0.408 \\\\\n-0.408 \\end{bmatrix}, \\quad\n\\mathbf{w_2} = \\begin{bmatrix}\n-0.848 \\\\\n-0.237 \\\\\n-0.237 \\\\\n-0.237 \\\\\n-0.237 \\\\\n-0.237 \\end{bmatrix}\n\\]\nBy projecting the data onto the eigenvector \\(\\mathbf{w}\\), we transform the original dataset into a lower-dimensional space where class separability is maximized. For this dataset, since there are 3 classes, LDA will find up to \\(K-1 = 2\\) discriminant axes. Let’s see how.\nThe matrix formed by the two largest eigenvectors is:\n\\[\nW=\\begin{bmatrix}\n-0.408 & -0.848 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\end{bmatrix}\n\\]\n\nThis matrix represents the projection directions corresponding to the two largest eigenvalues in the Linear Discriminant Analysis process. With the eigenvectors \\(\\mathbf{w}_1\\) and \\(\\mathbf{w}_2\\), we can now project our original dataset onto the new 2D subspace.  Now, let \\(X\\) represent our original dataset (where each row corresponds to an observation and each column to a feature). The projection of the original data onto the new 2D subspace is given by:\n\n\\[\nY = X W\n\\]\nWhere:\n\n\\(X\\) is the \\(4 \\times 6\\) matrix (4 observations, 6 features),\n\\(W\\) is the \\(6 \\times 2\\) matrix of eigenvectors.\n\nAfter multiplying \\(X\\) by \\(W\\), we obtain the projected data matrix \\(Y\\), which is a \\(4 \\times 2\\) matrix (4 observations, 2 features):\n\\[\nY = \\begin{bmatrix}\ny_{11} & y_{12} \\\\\ny_{21} & y_{22} \\\\\ny_{31} & y_{32} \\\\\ny_{41} & y_{42}\n\\end{bmatrix}\n\\]\nThis matrix \\(Y\\) represents the data in the new 2D space where class separability is maximized. So for our data\n\\[\\begin{align*}\n\\begin{bmatrix}2&3&4&5&6&7\\\\3&4&5&6&7&8\\\\6&5&4&3&2&1\\\\7&6&5&4&3&2\\end{bmatrix}\\begin{bmatrix}\n-0.408 & -0.848 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\\\\n-0.408 & -0.237 \\end{bmatrix}&=\\begin{bmatrix}-11.016 & -7.621\\\\-13.464 & -9.654\\\\ -8.568 & -8.643\\\\-11.016 &-10.676\\end{bmatrix}\n\\end{align*}\\]\n\n\nStep 6: Visualizing the Results\nIf we were to plot the projected data in this new 2D space, we would see the observations from different classes are better separated, which is the ultimate goal of LDA. The two axes of this 2D space correspond to the two linear discriminants that maximize the separation between the classes.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX = np.array([[2, 3, 4, 5, 6, 7],\n                  [3, 4, 5, 6, 7, 8],\n                  [6, 5, 4, 3, 2, 1],\n                  [7, 6, 5, 4, 3, 2]])\n\nW = np.array([[-0.408, -0.848],\n                         [-0.408, -0.237],\n                         [-0.408, -0.237],\n                         [-0.408, -0.237],\n                         [-0.408, -0.237],\n                         [-0.408, -0.237]])\n\nY = np.dot(X, W)\n\n# Visualize the projection\nplt.figure(figsize=(8, 6))\nfor i in range(Y.shape[0]):\n    plt.scatter(Y[i, 0], Y[i, 1], label=f'Obs {i+1}', s=100)\n    plt.text(Y[i, 0] + 0.02, Y[i, 1] + 0.02, f'Obs {i+1}', fontsize=12)\n\nplt.title(\"Projected Data after LDA\")\nplt.xlabel('LD1 (First Linear Discriminant)')\nplt.ylabel('LD2 (Second Linear Discriminant)')\nplt.axhline(0, color='gray', lw=1)\nplt.axvline(0, color='gray', lw=1)\nplt.grid(True)\nplt.legend(loc='upper right')\nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.gca().set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nSummary of the Process of Eigenvalue Problem\n\nEigenvalue Calculation: We found the eigenvalues \\(\\lambda_1\\) and \\(\\lambda_2\\) to be the largest, indicating the directions with the most class separability. We did find only two eigenvaleus since total class is 3.\nEigenvector Calculation: We computed the eigenvectors \\(\\mathbf{w}_1\\) and \\(\\mathbf{w}_2\\) corresponding to these eigenvalues. These eigenvectors define the directions in the original feature space along which the class separation is maximized.\nProjection: We projected the original dataset onto the new 2D subspace spanned by the eigenvectors. This resulted in a new dataset in 2D, where the different classes are more separable.\n\nThis completes the detailed walkthrough of solving the eigenvalue problem in LDA for our example dataset.\n\n\n\nFinal Summary\n\nWithin-class scatter matrix \\(S_W\\) quantifies the spread of data points within each class, and we calculated it for each class.\nBetween-class scatter matrix \\(S_B\\) quantifies the separation between the class means, and we calculated it using the mean of each class and the overall mean.\nSolving the eigenvalue problem \\(S_W^{-1} S_B \\mathbf{w} = \\lambda \\mathbf{w}\\) gives us the directions \\(\\mathbf{w}\\) (eigenvectors) that maximize class separation.\n\nThis is how LDA works step by step, using a small dataset as an example."
  },
  {
    "objectID": "dsandml/lda/index.html#python-code-example",
    "href": "dsandml/lda/index.html#python-code-example",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "Python Code Example",
    "text": "Python Code Example\nLet’s now revisit the Python code, with an understanding of the math behind LDA. First build our own classifier\n\nclass CustomLDA:\n    def __init__(self,n_components = None) -&gt; None:\n        \"\"\"\n        Parameters:\n        n_components: int, optional (default=None)\n                      Number of components to keep. If None, all components are kept\n        \"\"\"\n        self.n_components = n_components\n        self.eigenvalues = None\n        self.eigenvectors = None \n        self.mean_vectors = None \n        self.class_means = None\n    \n    def fit(self, X, y):\n        \"\"\"\n        Parameters:\n        X: ndarray of shape (n_samples, n_features)\n        y: ndarray of shape (n_samples,)\n           Target labels (must be categorical)\n        \"\"\"\n        n_features = X.shape[1]\n        class_labels = np.unique(y)\n\n        # Step1: Compute the class means mu_k for each class \n        self.mean_vectors = []\n        for c in class_labels:\n            self.mean_vectors.append(np.mean(X[y==c], axis=0))\n        \n        # Step 2: Compute the within-class scatter matrix S_W \n        S_W = np.zeros((n_features, n_features))\n        for c in class_labels:\n            class_scatter = np.cov(X[y==c].T, bias=True) # Covariance matrix for each class\n            S_W += class_scatter * (X[y==c].shape[0])\n\n        # Step 3: Compute the between-class scatter matrix S_B\n        overall_mean = np.mean(X, axis=0)\n        S_B = np.zeros((n_features, n_features))\n\n\n        for i,mean_vector in enumerate(self.mean_vectors):\n            n = X[y == class_labels[i]].shape[0]\n            mean_differences = (mean_vector -overall_mean).reshape(n_features,1)\n            S_B += n*(mean_differences).dot(mean_differences.T)\n        \n        # Step 4: Solve the Eigenvalue problem \n        eigvalues, eigvectors = np.linalg.eig(np.linalg.pinv(S_W).dot(S_B))\n\n        # Step 5: Sort the Eigenvalues and corresponding eigenvectors \n        eigvalues_sort_idx = np.argsort(np.abs(eigvalues))[::-1]\n        self.eigenvalues = eigvalues[eigvalues_sort_idx]\n        self.eigenvectors = eigvectors[:,eigvalues_sort_idx]\n\n        # Step 6: Keep only the top n_components\n        if self.n_components:\n            self.eigenvectors = self.eigenvectors[:,:self.n_components]\n        \n        self.class_means = np.dot(self.mean_vectors, self.eigenvectors)\n    \n    def transform(self,X):\n        \"\"\"\n        Project the data onto the LDA components \n\n        Parameters:\n        X: ndarray of shape (n_samples, n_features)\n\n        Returns:\n        X_transformed: ndarray of shape (n_samples, n_features)\n        \"\"\"\n        return np.dot(X,self.eigenvectors)\n    \n    def fit_transform(self, X, y):\n        \"\"\"\n        Fit the LDA model and transform the data.\n        \n        Parameters:\n        X : ndarray of shape (n_samples, n_features)\n            Training data.\n        y : ndarray of shape (n_samples,)\n            Target labels (must be categorical).\n        \n        Returns:\n        X_transformed : ndarray of shape (n_samples, n_components)\n            Transformed data after fitting.\n        \"\"\"\n        self.fit(X, y)\n        return self.transform(X)\n    \n    def predict(self, X):\n        \"\"\"\n        Predict the class labels for new data points.\n\n        Parameters:\n        X : ndarray of shape (n_samples, n_features)\n            New data to classify.\n\n        Returns:\n        Predictions: ndarray of shape (n_samples,)\n                     Predicted class labels\n        \"\"\"\n        X_projected = self.transform(X)\n\n        predictions = []\n        for x in X_projected:\n            distances = np.linalg.norm(x-self.class_means, axis=1)\n            predictions.append(np.argmin(distances))\n        \n        return np.array(predictions)\n\n    \n    def explained_variance_ratio(self):\n        \"\"\"\n        Return the percentage of variance explained by each of the selected components\n\n        Returns:\n        explained_variance: ndarray of shape (n_components,)\n                            Percentage of variance explained by each selected components\n        \"\"\"\n        total = np.sum(self.eigenvalues)\n\n        return [(i/total) for i in self.eigenvalues[:self.n_components]]\n\nNext we apply both the custom classifier and the classifier from the scikit-learn library.\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.datasets import load_iris\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Standardize the dataset (optional but often improves performance)\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)\n\n# Apply LDA from the scikit-learn library\nlda1 = LDA(n_components=2)  # Reduce to 2 dimensions\nX_train_lda1 = lda1.fit_transform(X_train, y_train)\nX_test_lda1 = lda1.transform(X_test)\n\n# Apply LDA from the custom built classifier\nlda2 = CustomLDA(n_components=2)  # Reduce to 2 dimensions\nX_train_lda2 = lda2.fit_transform(X_train, y_train)\nX_test_lda2 = lda2.transform(X_test)\n\n# Visualize the LDA-transformed data\nfig, axes = plt.subplots(1,2, figsize=(9.5,4))\n\naxes[0].scatter(X_train_lda1[:, 0], X_train_lda1[:, 1], c=y_train, cmap='rainbow', edgecolor='k', s=100)\naxes[0].set_xlabel('LD1')\naxes[0].set_ylabel('LD2')\naxes[0].set_title('Scikit-learn')\naxes[1].scatter(X_train_lda2[:, 0], X_train_lda2[:, 1], c=y_train, cmap='rainbow', edgecolor='k', s=100)\naxes[1].set_xlabel('LD1')\naxes[1].set_ylabel('LD2')\naxes[1].set_title('Custom')\nfor ax in axes:\n    ax.set_facecolor('#f4f4f4')\nplt.gcf().patch.set_facecolor('#f4f4f4')\nfig.suptitle('LDA: Projection of the Iris Dataset')\nplt.show()\n\n\n\n\n\n\n\n\nNext, apply LDA as a classifiers for the actual classification\n\nlda_classifier1 = LDA()\nlda_classifier1.fit(X_train, y_train)\ny_pred1 = lda_classifier1.predict(X_test)\n\nlda_classifier2 = CustomLDA()\nlda_classifier2.fit(X_train, y_train)\ny_pred2 = lda_classifier2.predict(X_test)\n\n\n# Check accuracy\naccuracy1 = accuracy_score(y_test, y_pred1)\naccuracy2 = accuracy_score(y_test, y_pred2)\nprint(f'sklearn LDA Classifier Accuracy: {accuracy1 * 100:.2f}% and \\ncustom LDA Classifier Accuracy: {accuracy2 * 100:.2f}%')\n\nsklearn LDA Classifier Accuracy: 100.00% and \ncustom LDA Classifier Accuracy: 95.56%\n\n\nNot too bad, huh! Let’s see the confusion matrix for our custom classifier\n\nfrom sklearn.metrics import confusion_matrix\n\nconf_mat = confusion_matrix(y_test, y_pred2)\n\nprint(pd.DataFrame(\n    conf_mat, \n    columns=['Pred: Setosa','Pred: Virginica', 'Pred: Versicolor'],\n    index=['Actual: Setosa','Actual: Virginica', 'Actual: Versicolor']\n))\n\n                    Pred: Setosa  Pred: Virginica  Pred: Versicolor\nActual: Setosa                19                0                 0\nActual: Virginica              0               11                 2\nActual: Versicolor             0                0                13"
  },
  {
    "objectID": "dsandml/lda/index.html#conclusion",
    "href": "dsandml/lda/index.html#conclusion",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "Conclusion",
    "text": "Conclusion\n\nLinear Discriminant Analysis (LDA) is a powerful technique for dimensionality reduction and classification. Its goal is to find directions (linear combinations of the original features) that best separate the classes by maximizing between-class variance while minimizing within-class variance.\n\n\nDisclaimer\n\nFor the mathematical explanation, I used generative AI to produce the matrices and vectors and their manipulations. So it won’t be surprising if a calculation mistake is found. The custom python class was created by the help of ChatGPT4"
  },
  {
    "objectID": "dsandml/lda/index.html#references",
    "href": "dsandml/lda/index.html#references",
    "title": "Classification: Linear Discriminant Analysis (LDA)",
    "section": "References",
    "text": "References\n\nFisher, R.A. (1936). “The Use of Multiple Measurements in Taxonomic Problems.” Annals of Eugenics, 7(2), 179–188.\n\nMurphy, K. P. (2012). Machine Learning: A Probabilistic Perspective. MIT Press.\n\nStrang, G. (2016). Introduction to Linear Algebra (5th ed.). Wellesley-Cambridge Press.\n\nLay, D. C. (2011). Linear Algebra and Its Applications (4th ed.). Pearson.\n\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/biasvariance/index.html",
    "href": "dsandml/biasvariance/index.html",
    "title": "Model Fine Tuning: Bias-Variance Trade Off",
    "section": "",
    "text": "The bias-variance tradeoff is a fundamental concept in machine learning that helps us understand the balance between underfitting and overfitting. It describes how different sources of error contribute to a model’s overall prediction error and how we can optimize model complexity for better generalization.   To understand the bias-variance tradeoff, let’s first define bias and variance in the context of machine learning models:   Bias is the error introduced by approximating a real-world problem (often complex) by a simplified model. High bias occurs when a model is too simple and can’t capture the underlying patterns, leading to underfitting.   Variance is the model’s sensitivity to small fluctuations in the training data. High variance indicates that the model is too complex, fitting the noise in the training data rather than the actual signal, leading to overfitting.   The goal is to strike a balance between bias and variance to minimize the overall error, often called the expected prediction error."
  },
  {
    "objectID": "dsandml/biasvariance/index.html#introduction",
    "href": "dsandml/biasvariance/index.html#introduction",
    "title": "Model Fine Tuning: Bias-Variance Trade Off",
    "section": "",
    "text": "The bias-variance tradeoff is a fundamental concept in machine learning that helps us understand the balance between underfitting and overfitting. It describes how different sources of error contribute to a model’s overall prediction error and how we can optimize model complexity for better generalization.   To understand the bias-variance tradeoff, let’s first define bias and variance in the context of machine learning models:   Bias is the error introduced by approximating a real-world problem (often complex) by a simplified model. High bias occurs when a model is too simple and can’t capture the underlying patterns, leading to underfitting.   Variance is the model’s sensitivity to small fluctuations in the training data. High variance indicates that the model is too complex, fitting the noise in the training data rather than the actual signal, leading to overfitting.   The goal is to strike a balance between bias and variance to minimize the overall error, often called the expected prediction error."
  },
  {
    "objectID": "dsandml/biasvariance/index.html#mathematical-derivation",
    "href": "dsandml/biasvariance/index.html#mathematical-derivation",
    "title": "Model Fine Tuning: Bias-Variance Trade Off",
    "section": "Mathematical Derivation",
    "text": "Mathematical Derivation\nThe expected mean squared error (MSE) between the true function \\(f(x)\\) and the model’s predictions \\(\\hat{f}(x)\\) is given by:\n\\[\\begin{align*}\n\\text{MSE}(x) &= \\mathbb{E}\\left[\\left(f(x) - \\hat{f}(x)\\right)^2\\right]\\\\\n& = \\mathbb{E}\\left[\\left(f(x) - \\mathbb{E}[\\hat{f}(x)] + \\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\right)^2\\right]\\\\\n& = \\mathbb{E}\\left[\\left(f(x) - \\mathbb{E}[\\hat{f}(x)]\\right)^2+2\\left(f(x) - \\mathbb{E}[\\hat{f}(x)]\\right)\\left(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\right)+\\left(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\right)^2\\right]\\\\\n& = \\mathbb{E}\\left[\\left(f(x) - \\mathbb{E}[\\hat{f}(x)]\\right)^2\\right] + \\mathbb{E}\\left[\\left(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\right)^2\\right] + 2\\mathbb{E}\\left[\\left(f(x) - \\mathbb{E}[\\hat{f}(x)]\\right)\\left(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\right)\\right]\n\\end{align*}\\]\nWhere:\n\n\\(f(x)\\) is the true function.\n\\(\\hat{f}(x)\\) is the estimated function (the model).\n\nThe third term, \\(2\\mathbb{E}[(f(x) - \\mathbb{E}[\\hat{f}(x)])(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x))]\\), vanishes because the errors \\(f(x) - \\mathbb{E}[\\hat{f}(x)]\\) and \\(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\) are independent. This is a key step in the decomposition.\n\n\\(f(x) - \\mathbb{E}[\\hat{f}(x)]\\) is the bias-related error.\n\\(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x)\\) is the variance-related error.\n\nSince these two terms are uncorrelated, their cross-product expectation equals zero:\n\\[\n2\\mathbb{E}[(f(x) - \\mathbb{E}[\\hat{f}(x)])(\\mathbb{E}[\\hat{f}(x)] - \\hat{f}(x))] = 0\n\\]\nWhat is \\(\\sigma^2\\)?\nNow, \\(\\sigma^2\\), the irreducible error, is the variance of the noise in the data:\n\\[\n\\sigma^2 = \\mathbb{E}[(y - f(x))^2] = \\mathbb{E}[\\epsilon^2]\n\\]\n\nwhere \\(y = f(x) + \\epsilon\\), and \\(\\epsilon\\) is the noise term with variance \\(\\sigma^2\\). This noise is independent of both the bias and variance components and does not interact with them in the decomposition. It is the part of the error that remains no matter how good the model is.\n\n\\[\n\\text{MSE}(x) = (\\text{Bias}[\\hat{f}(x)])^2 + \\text{Variance}[\\hat{f}(x)] + \\sigma^2\n\\]"
  },
  {
    "objectID": "dsandml/biasvariance/index.html#bias-variance-tradeoff-intuition",
    "href": "dsandml/biasvariance/index.html#bias-variance-tradeoff-intuition",
    "title": "Model Fine Tuning: Bias-Variance Trade Off",
    "section": "Bias-Variance Tradeoff Intuition",
    "text": "Bias-Variance Tradeoff Intuition\n\nA high bias model makes strong assumptions about the data and fails to capture the underlying patterns, resulting in underfitting.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nnp.random.seed(0)\nX = np.linspace(-3,3,100)\ny = X**2 + np.random.randn(100)*2\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X.reshape(-1,1),y)\ny_pred = model.predict(X.reshape(-1,1))\n\nplt.scatter(X,y, color='blue', label = 'Data Points')\nplt.plot(X,y_pred, color='red', label='High Bias Model (linear)')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.title('High Bias Model Overfitting the Data')\nplt.legend()\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\nA high variance model is highly flexible, capturing not only the signal but also the noise in the data, leading to overfitting.\n\n\nfrom sklearn.tree import DecisionTreeRegressor\n\nmodel2 = DecisionTreeRegressor(max_depth=10)\nmodel2.fit(X.reshape(-1,1),y)\ny_pred = model2.predict(X.reshape(-1,1))\n\nplt.scatter(X,y, color='blue', label = 'Data Points')\nplt.plot(X,y_pred, color='red', label='High Variance Model (linear)')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.title('High Variance Model Overfitting the Data')\nplt.legend()\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe tradeoff arises because increasing model complexity reduces bias but increases variance, while simplifying the model reduces variance but increases bias.\n\nThe key is to find a sweet spot where the model has low enough bias and variance to generalize well to unseen data."
  },
  {
    "objectID": "dsandml/biasvariance/index.html#more-visualization-of-bias-variance-tradeoff",
    "href": "dsandml/biasvariance/index.html#more-visualization-of-bias-variance-tradeoff",
    "title": "Model Fine Tuning: Bias-Variance Trade Off",
    "section": "More Visualization of Bias-Variance Tradeoff",
    "text": "More Visualization of Bias-Variance Tradeoff\nNow let’s use Python to visualize the bias-variance tradeoff by generating models of varying complexity on a synthetic dataset.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\n# Generate synthetic data\nnp.random.seed(0)\nn_samples = 100\nX = np.random.rand(n_samples, 1) * 10\ny = np.sin(X).ravel() + np.random.randn(n_samples) * 0.5\n\n# Function to plot the results\ndef plot_bias_variance(X, y, degrees):\n    X_plot = np.linspace(0, 10, 100).reshape(-1, 1)\n    fig, axs = plt.subplots(2,2, figsize=(8.2,5.5))\n    fig.patch.set_facecolor('#f4f4f4')\n\n    for i, degree in enumerate(degrees):\n        poly = PolynomialFeatures(degree)\n        X_poly = poly.fit_transform(X)\n        X_plot_poly = poly.transform(X_plot)\n        \n        # Train a linear regression model\n        model = LinearRegression()\n        model.fit(X_poly, y)\n        \n        # Predict on the plot points\n        y_plot_pred = model.predict(X_plot_poly)\n        \n        ax = axs[i//2, i%2]\n        ax.set_facecolor('#f4f4f4')\n        ax.scatter(X,y, color='red', label='Data')\n        ax.plot(X_plot, y_plot_pred, label=f'Polynomial degree {degree}')\n        ax.set_title(f'Polynomial Degree {degree}')\n        ax.legend()\n        \n        # Calculate and display training error\n        y_pred = model.predict(X_poly)\n        mse = mean_squared_error(y, y_pred)\n        ax.text(0, -1.5, f'MSE: {mse:.2f}', fontsize=12)\n\n    plt.tight_layout()\n    plt.savefig('bv.png')\n    plt.show()\n\n# Visualize bias-variance tradeoff\ndegrees = [1, 3, 5, 9]\nplot_bias_variance(X, y, degrees)\n\n\n\n\n\n\n\n\nWe create a synthetic dataset where \\(y = \\sin(x)\\) with added Gaussian noise.\n\nFor low-degree polynomials (e.g., degree 1), the model has high bias. It is too simple to capture the nonlinear relationship in the data, leading to underfitting.\nFor high-degree polynomials (e.g., degree 9), the model has high variance. It fits the training data too closely, even capturing the noise, leading to overfitting.\nA moderate-degree polynomial (e.g., degree 3 or 5) balances bias and variance, achieving the lowest error on unseen data.\n\n\nThe bias-variance tradeoff is a crucial concept for building machine learning models that generalize well. By understanding how bias and variance contribute to the total error, we can make informed decisions about model complexity. In practice, techniques like cross-validation and regularization are often used to find the optimal balance between bias and variance.   Understanding and visualizing this tradeoff helps machine learning practitioners fine-tune their models to achieve the best possible performance."
  },
  {
    "objectID": "dsandml/biasvariance/index.html#references",
    "href": "dsandml/biasvariance/index.html#references",
    "title": "Model Fine Tuning: Bias-Variance Trade Off",
    "section": "References",
    "text": "References\n\nHastie, T., Tibshirani, R., & Friedman, J. (2009). The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer.\nBishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer.\nGéron, A. (2019). Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow. O’Reilly Media.\nKohavi, R. & Wolpert, D. (1996). Bias plus variance decomposition for zero-one loss functions. Proceedings of the 13th International Conference on Machine Learning.\nJames, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning with Applications in R. Springer.\n\n\nShare on\n\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "dsandml/randomforest/index.html",
    "href": "dsandml/randomforest/index.html",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "",
    "text": "Random Forest is one of the most popular machine learning algorithms, known for its simplicity, versatility, and ability to perform both classification and regression tasks. It operates by constructing a multitude of decision trees during training and outputs the mode of the classes (for classification) or the mean prediction (for regression) of the individual trees."
  },
  {
    "objectID": "dsandml/randomforest/index.html#introduction",
    "href": "dsandml/randomforest/index.html#introduction",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "",
    "text": "Random Forest is one of the most popular machine learning algorithms, known for its simplicity, versatility, and ability to perform both classification and regression tasks. It operates by constructing a multitude of decision trees during training and outputs the mode of the classes (for classification) or the mean prediction (for regression) of the individual trees."
  },
  {
    "objectID": "dsandml/randomforest/index.html#what-is-random-forest",
    "href": "dsandml/randomforest/index.html#what-is-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "What is Random Forest?",
    "text": "What is Random Forest?\n\nRandom Forest is an ensemble learning method that builds multiple decision trees and combines their predictions to obtain a more accurate and stable result. Each tree is built using a different random subset of the data, and at each node, a random subset of features is considered when splitting the data.\n\n\nClassification: The final output is determined by majority voting from all the decision trees\nRegression: The output is the average of all tree predictions."
  },
  {
    "objectID": "dsandml/randomforest/index.html#mathematics-behind-random-forest",
    "href": "dsandml/randomforest/index.html#mathematics-behind-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Mathematics Behind Random Forest",
    "text": "Mathematics Behind Random Forest\nTo understand Random Forest, we first need to recap how a decision tree works and then explore how Random Forest extends this idea.\n\nDecision Tree Recap\nA decision tree is a tree-structured model where each internal node represents a “test” on an attribute (e.g., whether the feature value is above or below a threshold), each branch represents the outcome of the test, and each leaf node represents a class label (classification) or a value (regression).\n\nFor classification, the goal is to partition the data such that the class labels in each partition are as homogeneous as possible.\n\nFor regression, the goal is to minimize the variance of the predicted values.\n\nMathematically, the decision tree makes decisions by minimizing the Gini Index or Entropy for classification tasks and minimizing the Mean Squared Error (MSE) for regression tasks.\n\n\nRandom Forest Algorithm\nRandom Forest enhances decision trees by employing two key concepts:\n\nRandom Sampling (Bootstrap Sampling): From the training set of size \\(N\\), randomly draw \\(N\\) samples with replacement.\n\nFeature Subsampling: At each node of the decision tree, a random subset of the features is selected, and the best split is chosen only from these features.\n\nThe process for building a Random Forest can be summarized as follows:\n\nDraw \\(B\\) bootstrap samples from the original dataset.\nFor each bootstrap sample, grow an unpruned decision tree using a random subset of features at each node.\nFor classification, combine the predictions of all the trees by majority voting.\nFor regression, combine the predictions by averaging the outputs of all trees.\n\n\n\nRandom Forest for Classification\nFor classification tasks, Random Forest works by constructing multiple decision trees, each built on a different subset of the data and a random subset of the features.\nGiven a dataset \\(D = \\{(x_1, y_1), (x_2, y_2), ..., (x_N, y_N)\\}\\), where \\(x_i\\) is a feature vector and \\(y_i\\) is the class label, Random Forest generates \\(B\\) decision trees \\(T_1, T_2, ..., T_B\\).\nFor each test point \\(x\\), each tree \\(T_b\\) gives a class prediction: \\[\n\\hat{y}_b(x) = T_b(x)\n\\] The final prediction is determined by majority voting: \\[\n\\hat{y}(x) = \\text{argmax}_k \\sum_{b=1}^{B} I(\\hat{y}_b(x) = k)\n\\] where \\(I(\\cdot)\\) is an indicator function that equals 1 if the condition is true and 0 otherwise.\n\n\n\nRandom Forest for Regression\nIn regression tasks, Random Forest builds trees that predict continuous values and averages the results.\nGiven a dataset \\(D = \\{(x_1, y_1), (x_2, y_2), ..., (x_N, y_N)\\}\\), where \\(x_i\\) is a feature vector and \\(y_i\\) is the continuous target variable, Random Forest generates \\(B\\) decision trees \\(T_1, T_2, ..., T_B\\).\nFor each test point \\(x\\), each tree \\(T_b\\) gives a predicted value: \\[\n\\hat{y}_b(x) = T_b(x)\n\\] The final prediction is the average of all the tree predictions: \\[\n\\hat{y}(x) = \\frac{1}{B} \\sum_{b=1}^{B} \\hat{y}_b(x)\n\\]"
  },
  {
    "objectID": "dsandml/randomforest/index.html#assumptions-of-random-forest",
    "href": "dsandml/randomforest/index.html#assumptions-of-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Assumptions of Random Forest",
    "text": "Assumptions of Random Forest\nRandom Forest makes few assumptions about the data, making it highly flexible. Some assumptions include:\n\nIndependent Features: While Random Forest does not explicitly assume that features are independent, correlated features can reduce its performance slightly.\n\nNoisy Data: Random Forest is robust to noise due to its ensemble nature.\n\nNon-linearity: Random Forest can handle non-linear relationships between features and the target."
  },
  {
    "objectID": "dsandml/randomforest/index.html#advantages-of-random-forest",
    "href": "dsandml/randomforest/index.html#advantages-of-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Advantages of Random Forest",
    "text": "Advantages of Random Forest\n\nReduction of Overfitting: Random Forest reduces overfitting by averaging the predictions of multiple trees.\nHandles Missing Data: It can handle missing values by assigning them to the most frequent class (classification) or mean value (regression).\nRobust to Noise: It is relatively resistant to outliers and noise due to its ensemble nature.\nWorks with Categorical & Continuous Variables: Random Forest can handle both categorical and continuous data types.\nFeature Importance: It provides an estimate of feature importance, allowing for better interpretability of models."
  },
  {
    "objectID": "dsandml/randomforest/index.html#disadvantages-of-random-forest",
    "href": "dsandml/randomforest/index.html#disadvantages-of-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Disadvantages of Random Forest",
    "text": "Disadvantages of Random Forest\n\nComplexity: The algorithm is computationally intensive, especially with a large number of trees.\nInterpretability: While decision trees are interpretable, Random Forest is a “black-box” model where it’s hard to understand individual predictions.\nMemory Usage: Random Forest can require more memory to store multiple decision trees.\nBias in Imbalanced Data: For classification tasks with imbalanced data, Random Forest may be biased toward the majority class."
  },
  {
    "objectID": "dsandml/randomforest/index.html#python-implementation",
    "href": "dsandml/randomforest/index.html#python-implementation",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Python Implementation",
    "text": "Python Implementation\nHere is a Python code example of how to implement Random Forest for both classification and regression using scikit-learn.\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.datasets import load_iris\n\n# Classification Example: Iris dataset\niris = load_iris()\nX, y = iris.data, iris.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Initialize RandomForest Classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\nclf.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = clf.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Classification Accuracy: {accuracy}\")\n\n# Regression Example: Boston Housing dataset\ndata_url = \"http://lib.stat.cmu.edu/datasets/boston\"\nraw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\ndata = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\ntarget = raw_df.values[1::2, 2]\n\nX = data\ny = target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Initialize RandomForest Regressor\nreg = RandomForestRegressor(n_estimators=100, random_state=42)\nreg.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = reg.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nprint(f\"Regression Mean Squared Error: {mse}\")\n\nClassification Accuracy: 1.0\nRegression Mean Squared Error: 9.711591381578941"
  },
  {
    "objectID": "dsandml/randomforest/index.html#hyperparameter-tuning-for-random-forest",
    "href": "dsandml/randomforest/index.html#hyperparameter-tuning-for-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Hyperparameter Tuning for Random Forest",
    "text": "Hyperparameter Tuning for Random Forest\nTuning the hyperparameters of a Random Forest can significantly improve its performance. Here are some important hyperparameters to consider:\n\nImportant Hyperparameters\n\nn_estimators: This is the number of trees in the forest. Increasing this number usually improves performance but also increases computational cost.\n\nTip: Start with a default value of 100 and increase as needed.\n\n\nmax_depth: The maximum depth of each tree. Deeper trees can model more complex relationships, but they also increase the risk of overfitting.\n\nTip: Use cross-validation to find the optimal depth that balances bias and variance\n\n\nmin_samples_split: The minimum number of samples required to split an internal node. Higher values prevent the tree from becoming too specific (overfitting).\n\nTip: Use higher values (e.g., 5 or 10) to reduce overfitting in noisy datasets.\n\nmin_samples_leaf: The minimum number of samples required to be at a leaf node. Larger leaf sizes reduce model complexity and can help generalization.\nmax_features: The number of features to consider when looking for the best split. Randomly selecting fewer features can reduce correlation between trees and improve generalization.\n\nTip: For classification, a common choice is sqrt(number_of_features). For regression, max_features = number_of_features / 3 is often effective.\n\nbootstrap: Whether to use bootstrap samples when building trees. Set this to True for Random Forest (default) or False for extremely randomized trees (also known as ExtraTrees).\n\n\n\nGrid Search for Hyperparameter Tuning\nTo fine-tune the hyperparameters of a Random Forest, we can use GridSearchCV or RandomizedSearchCV in scikit-learn. Here’s an example of how to use GridSearchCV for tuning a Random Forest Classifier:\n\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [None, 10, 20, 30],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4],\n    'max_features': ['sqrt', 'log2', None]\n}\n\niris = load_iris()\nX, y = iris.data, iris.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Initialize Random Forest Classifier\nclf = RandomForestClassifier(random_state=42)\n\n# Perform grid search\ngrid_search = GridSearchCV(estimator=clf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=0)\ngrid_search.fit(X_train, y_train)\n\n# Best parameters from grid search\nprint(\"Best Hyperparameters:\", grid_search.best_params_)\n\n# Evaluate with best parameters\nbest_model = grid_search.best_estimator_\ny_pred = best_model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy with Best Parameters: {accuracy}\")\n\nBest Hyperparameters: {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\nAccuracy with Best Parameters: 1.0\n\n\nUsing this technique, we can find the combination of hyperparameters that yields the best model performance."
  },
  {
    "objectID": "dsandml/randomforest/index.html#feature-importance-in-random-forest",
    "href": "dsandml/randomforest/index.html#feature-importance-in-random-forest",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Feature Importance in Random Forest",
    "text": "Feature Importance in Random Forest\nOne of the appealing aspects of Random Forest is that it provides a measure of feature importance, which indicates how much each feature contributes to the model’s predictions.\n\nComputing Feature Importance\nIn Random Forest, feature importance is computed by measuring the average reduction in impurity (e.g., Gini impurity or MSE) brought by each feature across all trees. Features that lead to larger reductions are considered more important.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nclf.fit(X_train,y_train)\n# Get feature importance from the RandomForest model\nimportances = clf.feature_importances_\nindices = np.argsort(importances)[::-1]\n\n# Plot the feature importance\nplt.figure(figsize=(10, 6))\nplt.title(\"Feature Importance\")\nplt.bar(range(X.shape[1]), importances[indices], align=\"center\")\nplt.xticks(range(X.shape[1]), iris.feature_names, rotation=90)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nThe bar chart is showing the relative importance of each feature, making it easier to understand which features have the most predictive power."
  },
  {
    "objectID": "dsandml/randomforest/index.html#out-of-bag-oob-error-estimate",
    "href": "dsandml/randomforest/index.html#out-of-bag-oob-error-estimate",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Out-of-Bag (OOB) Error Estimate",
    "text": "Out-of-Bag (OOB) Error Estimate\nRandom Forest uses Out-of-Bag (OOB) samples as an alternative to cross-validation. Since each tree is trained on a bootstrap sample, about one-third of the data is left out in each iteration. These “out-of-bag” samples can be used to estimate the model’s performance without the need for a separate validation set.\n\nEnabling OOB in Python\nYou can enable the out-of-bag error estimate by setting oob_score=True in the RandomForestClassifier or RandomForestRegressor.\n\nclf = RandomForestClassifier(n_estimators=100, oob_score=True, random_state=42)\nclf.fit(X_train, y_train)\n\n# Access the OOB score\nprint(f\"OOB Score: {clf.oob_score_}\")\n\nOOB Score: 0.9428571428571428\n\n\nThe OOB score is an unbiased estimate of the model’s performance, which is particularly useful when the dataset is small and splitting it further into training/validation sets might reduce training effectiveness."
  },
  {
    "objectID": "dsandml/randomforest/index.html#dealing-with-imbalanced-data",
    "href": "dsandml/randomforest/index.html#dealing-with-imbalanced-data",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Dealing with Imbalanced Data",
    "text": "Dealing with Imbalanced Data\nFor imbalanced classification tasks (where one class is much more frequent than the others), Random Forest may be biased toward predicting the majority class. Several techniques can help mitigate this issue:\n\nClass Weights: You can assign higher weights to the minority class to force the model to pay more attention to it.\n\n\nclf = RandomForestClassifier(class_weight='balanced', random_state=42)\nclf.fit(X_train, y_train)\n\nRandomForestClassifier(class_weight='balanced', random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(class_weight='balanced', random_state=42) \n\n\n\nResampling: You can either oversample the minority class or undersample the majority class.\n\n\nfrom imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=42)\nX_resampled, y_resampled = sm.fit_resample(X_train, y_train)"
  },
  {
    "objectID": "dsandml/randomforest/index.html#random-forest-in-practice-best-practices",
    "href": "dsandml/randomforest/index.html#random-forest-in-practice-best-practices",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "Random Forest in Practice: Best Practices",
    "text": "Random Forest in Practice: Best Practices\n\nCross-Validation: Always perform cross-validation to ensure the model generalizes well\nParallelization: Random Forest naturally supports parallelization. If using scikit-learn, set n_jobs=-1 to utilize all CPU cores for training.\n\nEnsemble Methods: For better results, you can combine Random Forest with other ensemble methods, such as boosting (e.g., XGBoost or Gradient Boosting) to further improve performance.\n\nRandom Forest is a highly flexible, non-parametric machine learning algorithm that can be used for both classification and regression tasks. Its ensemble-based approach reduces overfitting, improves predictive performance, and provides valuable insights like feature importance. Despite its many advantages, Random Forest is computationally intensive and may not be the best choice for real-time applications or datasets with extremely high dimensionality."
  },
  {
    "objectID": "dsandml/randomforest/index.html#references",
    "href": "dsandml/randomforest/index.html#references",
    "title": "Ensemble Methods: Random Forest - A detailed overview",
    "section": "References",
    "text": "References\n\nBreiman, L. (2001). “Random Forests”. Machine Learning, 45(1), 5-32.\nPedregosa, F., et al. (2011). “Scikit-learn: Machine Learning in Python”. Journal of Machine Learning Research, 12, 2825-2830.\nHastie, T., Tibshirani, R., & Friedman, J. (2009). “The Elements of Statistical Learning”. Springer Series in Statistics."
  },
  {
    "objectID": "dsandml/svm/index.html",
    "href": "dsandml/svm/index.html",
    "title": "Support Vector Machine (SVM) Algorithm",
    "section": "",
    "text": "Draft\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClassification using Naive Bayes algorithm\n\n\n11 min\n\n\n\nRafiq Islam\n\n\nThursday, October 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClassification: Linear Discriminant Analysis (LDA)\n\n\n27 min\n\n\n\nRafiq Islam\n\n\nThursday, October 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClassification: Logistic Regression - A Comprehensive Guide with Mathematical Derivation and Python Code\n\n\n9 min\n\n\n\nRafiq Islam\n\n\nMonday, October 7, 2024\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to topCitationBibTeX citation:@online{islam2024,\n  author = {Islam, Rafiq},\n  title = {Support {Vector} {Machine} {(SVM)} {Algorithm}},\n  date = {2024-10-22},\n  url = {https://mrislambd.github.io/dsandml/svm/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nIslam, Rafiq. 2024. “Support Vector Machine (SVM)\nAlgorithm.” October 22, 2024. https://mrislambd.github.io/dsandml/svm/."
  },
  {
    "objectID": "dsandml/pytorch/index.html",
    "href": "dsandml/pytorch/index.html",
    "title": "PyTorch Basics",
    "section": "",
    "text": "import torch\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nprint(torch.__version__)\n\n2.4.0\n\n\n\n\n\nScaler\n\nscaler = torch.tensor(7)\nprint(scaler)\nprint(scaler.ndim)\n\ntensor(7)\n0\n\n\nVector\n\nvec = torch.tensor([2,3,4])\nprint(vec.ndim)\nprint(vec.shape)\n\n1\ntorch.Size([3])\n\n\nMatrix\n\nMAT = torch.tensor([[2,3,4],\n                    [3,2,6]])\nMAT\n\ntensor([[2, 3, 4],\n        [3, 2, 6]])\n\n\nTensor\n\nTEN = torch.tensor([[[2,3,5],\n                     [5,4,3]]])\nTEN.shape\n\ntorch.Size([1, 2, 3])"
  },
  {
    "objectID": "dsandml/pytorch/index.html#introduction-to-tensors",
    "href": "dsandml/pytorch/index.html#introduction-to-tensors",
    "title": "PyTorch Basics",
    "section": "",
    "text": "import torch\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nprint(torch.__version__)\n\n2.4.0\n\n\n\n\n\nScaler\n\nscaler = torch.tensor(7)\nprint(scaler)\nprint(scaler.ndim)\n\ntensor(7)\n0\n\n\nVector\n\nvec = torch.tensor([2,3,4])\nprint(vec.ndim)\nprint(vec.shape)\n\n1\ntorch.Size([3])\n\n\nMatrix\n\nMAT = torch.tensor([[2,3,4],\n                    [3,2,6]])\nMAT\n\ntensor([[2, 3, 4],\n        [3, 2, 6]])\n\n\nTensor\n\nTEN = torch.tensor([[[2,3,5],\n                     [5,4,3]]])\nTEN.shape\n\ntorch.Size([1, 2, 3])"
  },
  {
    "objectID": "dsandml/bayesianclassification/index.html",
    "href": "dsandml/bayesianclassification/index.html",
    "title": "Bayesian Probabilistic Models for Classification",
    "section": "",
    "text": "Bayesian inference is a powerful statistical method that applies the principles of Bayes’s theorem to update the probability of a hypothesis as more evidence or information becomes available. It is widely used in various fields including machine learning, to make predictions and decisions under uncertainty.\nBayes’s theorem is based on the definition of conditional probability. For two events \\(A\\) and \\(B\\) with \\(\\mathbb{P}(B) \\neq 0\\), we define the conditional probability of occurring \\(A\\) given that \\(B\\) has already occurred.\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 384x288 with 0 Axes&gt;\n\n\n\\(\\mathbb{P}(A|B)=\\frac{\\mathbb{P}(A\\cap B)}{\\mathbb{P}(B)}\\)\nSimilarly, the conditional probability of occuring \\(B\\) given that \\(A\\) has already occured with \\(\\mathbb{P}(A) \\ne 0\\) is\n\\[\n\\mathbb{P}(B|A)=\\frac{\\mathbb{P}(A\\cap B)}{\\mathbb{P}(A)}\n\\]\nFrom this equation, we can derive that the joint probability of \\(A\\cap B\\) is \\[\n\\mathbb{P}(A\\cap B) = \\mathbb{P}(B | A) \\mathbb{P} (A) = \\mathbb{P}(A | B) \\mathbb{P} (B)\n\\]"
  },
  {
    "objectID": "dsandml/kmeans/index.html",
    "href": "dsandml/kmeans/index.html",
    "title": "Unsupervised Learning: K-Means Clustering",
    "section": "",
    "text": "Clustering is a fundamental technique in unsupervised learning where the goal is to group similar data points into clusters. One of the most popular algorithms for clustering is K-Means. K-Means is a centroid-based algorithm that partitions the dataset into \\(k\\) clusters. The algorithm iterates over data points, assigning each to one of \\(k\\) centroids (cluster centers), and then updates the centroids based on the current assignments. The objective is to minimize the sum of squared distances (also known as inertia) between each data point and its assigned centroid."
  },
  {
    "objectID": "dsandml/kmeans/index.html#introduction",
    "href": "dsandml/kmeans/index.html#introduction",
    "title": "Unsupervised Learning: K-Means Clustering",
    "section": "",
    "text": "Clustering is a fundamental technique in unsupervised learning where the goal is to group similar data points into clusters. One of the most popular algorithms for clustering is K-Means. K-Means is a centroid-based algorithm that partitions the dataset into \\(k\\) clusters. The algorithm iterates over data points, assigning each to one of \\(k\\) centroids (cluster centers), and then updates the centroids based on the current assignments. The objective is to minimize the sum of squared distances (also known as inertia) between each data point and its assigned centroid."
  },
  {
    "objectID": "dsandml/kmeans/index.html#mathematics-behind-k-means",
    "href": "dsandml/kmeans/index.html#mathematics-behind-k-means",
    "title": "Unsupervised Learning: K-Means Clustering",
    "section": "Mathematics Behind K-Means",
    "text": "Mathematics Behind K-Means\nThe K-Means algorithm works through the following key steps:\n\nInitialization: Randomly select \\(k\\) points from the dataset as initial centroids.\nAssignment Step: For each data point, assign it to the closest centroid based on the Euclidean distance:\n\\[\n\\text{distance}(x_i, \\mu_j) = \\sqrt{\\sum_{d=1}^{D} (x_i^d - \\mu_j^d)^2}\n\\]\n\nwhere:\n\n\\(x_i\\) is the i-th data point.\n\\(\\mu_j\\) is the j-th centroid.\n\\(D\\) is the number of features (dimensions).\n\n\nUpdate Step: After all data points are assigned, recalculate the centroid of each cluster as the mean of all data points assigned to it:\n\\[\n\\mu_j = \\frac{1}{n_j} \\sum_{i=1}^{n_j} x_i\n\\] where \\(n_j\\) is the number of points in cluster j.\nRepeat: The assignment and update steps are repeated until the centroids no longer change or the maximum number of iterations is reached.\n\n\nObjective Function (Inertia)\nThe objective of K-Means is to minimize the following cost function, also called inertia or within-cluster sum of squares:\n\\[\nJ = \\sum_{j=1}^{k} \\sum_{i=1}^{n_j} \\|x_i - \\mu_j\\|^2\n\\]\nThis measures how compact the clusters are, i.e., how close the points within each cluster are to their centroid.\n\n\nHow to Choose the Best \\(k\\) Value?\nOne of the critical tasks in K-Means clustering is selecting the optimal number of clusters (\\(k\\)). Several methods can be used:\n\n1. The Elbow Method\nThe most common way to determine the best \\(k\\) is the elbow method. It involves plotting the inertia (the sum of squared distances from each point to its assigned cluster centroid) for different values of \\(k\\). The point where the inertia starts to flatten out (forming an elbow) is considered a good choice for \\(k\\).\n\n\n2. Silhouette Score\nThe silhouette score measures how similar each point is to its own cluster (cohesion) compared to other clusters (separation). It ranges from -1 to 1:\n\n\\(1\\) indicates that the point is well inside its cluster.\n\n\\(0\\) means the point is on the boundary between two clusters.\n\nNegative values indicate the point may have been assigned to the wrong cluster.\n\n\n\n3. Gap Statistic\nThe gap statistic compares the total within-cluster variation for different values of \\(k\\) with the expected value under null reference distribution. The optimal number of clusters is where the gap statistic is the largest."
  },
  {
    "objectID": "dsandml/kmeans/index.html#python-implementation-of-k-means",
    "href": "dsandml/kmeans/index.html#python-implementation-of-k-means",
    "title": "Unsupervised Learning: K-Means Clustering",
    "section": "Python Implementation of K-Means",
    "text": "Python Implementation of K-Means\n\nSynthetic Data\nLet’s implement K-Means clustering using Python with visualizations and explore how to choose the best value of \\(k\\) using the elbow method.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\nfrom sklearn.metrics import silhouette_score\n\n# For plotting purposes\nimport seaborn as sns\nsns.set()\n\nWe’ll create a simple dataset with 4 distinct clusters for visualization.\n\n# Create a dataset with 4 clusters\nX, y = make_blobs(n_samples=500, centers=4, cluster_std=0.60, random_state=0)\n\n# Visualize the dataset\nplt.scatter(X[:, 0], X[:, 1], s=50)\nplt.title('Dataset with 4 Clusters')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nWe can now apply K-Means clustering with different values of \\(k\\) and observe how the clusters are formed.\n\n# Fit KMeans with k=4 (since we know we generated 4 clusters)\nkmeans = KMeans(n_clusters=4)\nkmeans.fit(X)\n\n# Predict clusters\ny_kmeans = kmeans.predict(X)\n\n# Plot the clustered data\nplt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')\n\n# Plot the centroids\ncenters = kmeans.cluster_centers_\nplt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75)\nplt.title('K-Means Clustering with k=4')\nplt.savefig('kmeans.png')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nTo determine the optimal number of clusters, we’ll plot the inertia for different values of \\(k\\) using the elbow method.\n\n# Test multiple k values\ninertia = []\nk_values = range(1, 10)\n\nfor k in k_values:\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(X)\n    inertia.append(kmeans.inertia_)\n\n# Plot the inertia vs. k values\nplt.plot(k_values, inertia, marker='o')\nplt.title('Elbow Method: Choosing the Optimal k')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\nWe see that the curve starts to flatten at \\(k=4\\), suggesting this is a good choice for the number of clusters. Let’s also compute the silhouette score for different values of \\(k\\) to confirm our choice.\n\nsil_scores = []\nfor k in range(2, 10):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(X)\n    labels = kmeans.predict(X)\n    sil_scores.append(silhouette_score(X, labels))\n\n# Plot Silhouette Score vs. k\nplt.plot(range(2, 10), sil_scores, marker='o')\nplt.title('Silhouette Score for Different k Values')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Silhouette Score')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nReal Data\nDescription:\n\n\nThis dataset contains information about customers of a shopping mall, including their annual income, spending score, gender, and age.\n\nGoal: Our goal is to segment customers into different groups based on their spending behavior and income.\nColumns:\n- CustomerID: Unique identifier for each customer.\n- Gender: The gender of the customer (Male or Female).\n- Age: Age of the customer.\n- Annual Income: Annual income of the customer in thousands of dollars.\n- Spending Score: A score assigned by the mall based on customer behavior and spending patterns.\nData Source: You can find the Mall Customer Segmentation data on Kaggle.\n\nimport pandas as pd \nmall = pd.read_csv('Mall_Customers.csv')\nmall.head()\n\n\n\n\n\n\n\n\nCustomerID\nGender\nAge\nAnnual Income (k$)\nSpending Score (1-100)\n\n\n\n\n0\n1\nMale\n19\n15\n39\n\n\n1\n2\nMale\n21\n15\n81\n\n\n2\n3\nFemale\n20\n16\n6\n\n\n3\n4\nFemale\n23\n16\n77\n\n\n4\n5\nFemale\n31\n17\n40\n\n\n\n\n\n\n\n\n# Data Information\nprint(mall.info())\nprint('\\n')\n# Check for Missing Data\nprint(mall.isnull().sum())\nprint('\\n')\n# Data Description\nmall.rename(columns={'CustomerID':'ID','Annual Income (k$)':'Income','Spending Score (1-100)':'SpendingScore'},inplace=True)\ncmall = mall.drop('ID',axis=1)\nprint(cmall.describe().loc[['mean','std','min','max']].T)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 200 entries, 0 to 199\nData columns (total 5 columns):\n #   Column                  Non-Null Count  Dtype \n---  ------                  --------------  ----- \n 0   CustomerID              200 non-null    int64 \n 1   Gender                  200 non-null    object\n 2   Age                     200 non-null    int64 \n 3   Annual Income (k$)      200 non-null    int64 \n 4   Spending Score (1-100)  200 non-null    int64 \ndtypes: int64(4), object(1)\nmemory usage: 7.9+ KB\nNone\n\n\nCustomerID                0\nGender                    0\nAge                       0\nAnnual Income (k$)        0\nSpending Score (1-100)    0\ndtype: int64\n\n\n                mean        std   min    max\nAge            38.85  13.969007  18.0   70.0\nIncome         60.56  26.264721  15.0  137.0\nSpendingScore  50.20  25.823522   1.0   99.0\n\n\nPre-Process: Since our data contains categorical variable Gender, we need to encode this column and scale the numerical features like Age, Annual Income, and Spending Score.\n\nfrom sklearn.preprocessing import StandardScaler\nX = mall[['Age','Income','SpendingScore']]\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X_scaled[:5])\n\n[[-1.42456879 -1.73899919 -0.43480148]\n [-1.28103541 -1.73899919  1.19570407]\n [-1.3528021  -1.70082976 -1.71591298]\n [-1.13750203 -1.70082976  1.04041783]\n [-0.56336851 -1.66266033 -0.39597992]]\n\n\nNext we use the Elbow method to find the best \\(k\\), the number of clusters\n\nk_values = range(1,15)\ninertia = []\nfor k in k_values:\n    kmeans = KMeans(n_clusters=k, random_state=123)\n    kmeans.fit(X_scaled)\n    inertia.append(kmeans.inertia_)\nplt.plot(k_values,inertia, marker='o')\nplt.title('Elbow method to find $k$')\nplt.xlabel('Number of Clusters $k$')\nplt.ylabel('Inertia')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show() \n\n\n\n\n\n\n\n\nThe elbow point in the plot (where the decrease in inertia starts to slow) helps determine the optimal number of clusters. Let’s say we find that \\(k=5\\) looks like a reasonable choice from the plot.\nTo further validate the choice of \\(k\\), let’s compute the silhouette score for different cluster numbers. A higher silhouette score indicates better-defined clusters\n\nsil_scores = []\nfor k in range(2,15):\n    kmeans = KMeans(n_clusters=k, random_state=123)\n    labels = kmeans.fit_predict(X_scaled)\n    sil_scores.append(silhouette_score(X_scaled,labels))\nplt.plot(range(2,15),sil_scores, marker='o')\nplt.title('Silhoutte method to find $k$')\nplt.xlabel('Number of Clusters $k$')\nplt.ylabel('Silhoutte Score')\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show() \n\n\n\n\n\n\n\n\nNext, we apply \\(k=5\\) clusters\n\nplt.figure(figsize=(9.5,6))\nkmeans = KMeans(n_clusters=5, random_state=123)\nmall['Cluster'] = kmeans.fit_predict(X_scaled)\nprint(mall.head())\nsns.scatterplot(\n    x='Income', y='SpendingScore', hue='Cluster',\n    data=mall, palette='viridis', s=100, alpha=0.7\n    )\nplt.title('Customer Segmentation Based on Income and Spending Score')\nplt.legend()\nplt.gca().set_facecolor('#f4f4f4') \nplt.gcf().patch.set_facecolor('#f4f4f4')\nplt.show()\n\n   ID  Gender  Age  Income  SpendingScore  Cluster\n0   1    Male   19      15             39        2\n1   2    Male   21      15             81        2\n2   3  Female   20      16              6        4\n3   4  Female   23      16             77        2\n4   5  Female   31      17             40        2\n\n\n\n\n\n\n\n\n\nAnalyze the segments\n\ncluster_summary = mall.drop(columns=['Gender','ID']).groupby('Cluster').mean()\nprint(cluster_summary)\n\n               Age     Income  SpendingScore\nCluster                                     \n0        32.875000  86.100000      81.525000\n1        55.638298  54.382979      48.851064\n2        25.185185  41.092593      62.240741\n3        39.871795  86.102564      19.358974\n4        46.250000  26.750000      18.350000\n\n\nNow say we have two new customers\n\nnew_customer = {'ID':[201,202],'Gender':['Male','Female'],'Age': [30,50],'Income':[40,70],'SpendingScore':[70,20]}\nnew_customer = pd.DataFrame(new_customer)\nprint(new_customer)\n\n    ID  Gender  Age  Income  SpendingScore\n0  201    Male   30      40             70\n1  202  Female   50      70             20\n\n\nWe would like to know in which cluster they belong.\n\nX_new = new_customer[['Age', 'Income','SpendingScore']]\nX_new_sc = scaler.transform(X_new)\ncluster_labels = kmeans.predict(X_new_sc)\nprint(cluster_labels)\n\n[2 3]\n\n\nK-Means is a powerful and widely used clustering algorithm, but it has limitations, such as assuming spherical clusters of equal sizes."
  },
  {
    "objectID": "dsandml/kmeans/index.html#limitations-of-k-means-clustering",
    "href": "dsandml/kmeans/index.html#limitations-of-k-means-clustering",
    "title": "Unsupervised Learning: K-Means Clustering",
    "section": "Limitations of K-Means Clustering",
    "text": "Limitations of K-Means Clustering\nWhile K-Means is a widely used clustering algorithm due to its simplicity and scalability, it has several notable limitations:\n\n1. Assumption of Spherical Clusters\nK-Means assumes that clusters are spherical and have roughly the same size. This assumption may not hold true in real-world datasets, where clusters may have different shapes and densities. For example, if clusters are elongated or irregularly shaped, K-Means may not perform well.\n\nSolution: Use algorithms like DBSCAN (Density-Based Spatial Clustering of Applications with Noise) or Spectral Clustering, which do not assume any specific shape for the clusters.\n\n\n\n2. Sensitivity to Initialization\nK-Means is sensitive to the initial selection of centroids. Different initializations can lead to different final clusters, and in some cases, the algorithm may converge to suboptimal solutions. To address this, the algorithm is often run multiple times with different initializations (e.g., using the k-means++ initialization method).\n\nSolution: Use the k-means++ initialization, which ensures that centroids are chosen in a way that increases the likelihood of converging to an optimal solution.\n\n\n\n3. Needs to Specify k in Advance\nOne of the main limitations is that K-Means requires the number of clusters (k) to be specified in advance. This can be a challenge when the number of clusters is unknown, and choosing the wrong k can lead to poor clustering results.\n\nSolution: Use the Elbow Method, Silhouette Score, or the Gap Statistic to estimate the best value for k.\n\n\n\n4. Outliers and Noise Sensitivity\nK-Means is highly sensitive to outliers, as they can significantly affect the position of centroids. An outlier will either form its own cluster or distort the positions of nearby centroids, leading to incorrect clustering.\n\nSolution: Preprocess your data by removing outliers or use clustering methods like DBSCAN, which can handle outliers more effectively by considering them as noise.\n\n\n\n5. Equal Cluster Size Assumption\nThe algorithm tends to assign roughly equal-sized clusters because it minimizes variance. This can be a problem if clusters in your data have highly varying sizes. Small clusters might be absorbed into larger ones.\n\nSolution: Use Hierarchical Clustering, which can naturally handle different cluster sizes.\n\n\n\n6. Non-Convex Shapes\nK-Means struggles with data where clusters have non-convex shapes, such as two overlapping rings or crescent shapes. It partitions the space into Voronoi cells, which are convex, leading to poor clustering results in non-convex structures.\n\nSolution: Algorithms like Spectral Clustering or Gaussian Mixture Models (GMM) can better handle non-convex clusters."
  },
  {
    "objectID": "dsandml/kmeans/index.html#references",
    "href": "dsandml/kmeans/index.html#references",
    "title": "Unsupervised Learning: K-Means Clustering",
    "section": "References",
    "text": "References\n\nK-Means Algorithm:\n\nMacQueen, J. B. (1967). “Some Methods for Classification and Analysis of Multivariate Observations”. Proceedings of the Fifth Berkeley Symposium on Mathematical Statistics and Probability, Volume 1: Statistics.\nHartigan, J. A., & Wong, M. A. (1979). “Algorithm AS 136: A K-means clustering algorithm”. Journal of the Royal Statistical Society. Series C (Applied Statistics), 28(1), 100-108.\n\nChoosing k (Elbow Method & Silhouette Score):\n\nRousseeuw, P. J. (1987). “Silhouettes: A graphical aid to the interpretation and validation of cluster analysis”. Journal of Computational and Applied Mathematics, 20, 53-65.\n\nInertia and the Elbow Method:\n\nTibshirani, R., Walther, G., & Hastie, T. (2001). “Estimating the number of clusters in a dataset via the gap statistic”. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 63(2), 411-423.\n\n\n\nShare on\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "posts/machinelearning/index.html",
    "href": "posts/machinelearning/index.html",
    "title": "Data Science & Machine Learning Basics",
    "section": "",
    "text": "This page is my personal repository of most common and useful machine learning algorithms using Python and other data science tricks and tips."
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolor782f40data-science",
    "href": "posts/machinelearning/index.html#texttextcolor782f40data-science",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{#782F40}{Data Science}}\\)",
    "text": "\\(\\text{\\textcolor{#782F40}{Data Science}}\\)\nData science involves extracting knowledge from structured and unstructured data. It combines principle from statistics, machine learning, data analysis, and domain knoledge to understand and interpret the data\n\nData Collection & Accuisition\n\nWeb srcaping: Data collection through Webscraping\n\nAPI integration\n\nData Lakes, Data Warehouses\n\n\n\nData Cleaning & Preprocessing\n\nHandling Missing Values\n\nData Transformation\n\nFeature Engineering and Selection\n\nEncoding Categorical Variables\n\nHandling Outliers\n\n\n\nExploratory Data Analysis (EDA)\n\nDescriptive Statistics\n\nData Visualization\n\nIdentifying Patterns, Trends, Correlations\n\n\n\nStatistical Methods\n\nANOVA - Categorical Features’: How do we treat the categorical features for our data science project?\nHypothesis Testing\n\nProbability Distributions\n\nInferential Statistics\n\nSampling Methods\n\n\n\nBig Data Techniques\n\nHadoop, Spark\n\nDistributed Data Storage (e.g., HDFS, NoSQL)\nData PipeLines, ETL (Extract, Transform, Load)"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolor782f40machine-learning-algorithms",
    "href": "posts/machinelearning/index.html#texttextcolor782f40machine-learning-algorithms",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{#782F40}{Machine Learning Algorithms}}\\)",
    "text": "\\(\\text{\\textcolor{#782F40}{Machine Learning Algorithms}}\\)\n\n\\(\\text{Supervised Learning}\\)\n(Training with labeled data: input-output pairs)\n\nRegression\n\n\nParametric\n\nSimple Linear Regression\nMultiple Linear Regression\nPolynomial Regression\n\n\n\nNon-Parametric\n\nK-Nearest Neighbor (KNN) Regression\nDecesion Trees Regression\nRandom Forest Regression\nSupport Vector Machine (SVM) Regression\n\n\n\n\n\nClassification\n\n\n\nParametric\n\nLogistic Regression\nNaive Bayes\nLinear Discriminant Analysis (LDA)\n\nQuadratic Discriminant Analysis (QDA)\n\n\n\n\nNon-Parametric\n\nKNN Classification\nDecision Tree Classification\nRandom Forest Classification\nSupport Vector Machine (SVM) Classification\n\n\n\n\nMulti-Class Classification\n\nMulti-class Classification\n\n\n\n\nBayesian or Probabilistic Classification\n\nWhat is Bayesian or Probabilistic Classification?\n\nLinear Discriminant Analysis (LDA)\n\nQuadratic Discriminant Analysis (QDA)\n\nNaive Bayes\nBayesian Network Classifier (Tree Augmented Naive Bayes (TAN))\n\n\n\n\nNon-probabilistic Classification\n\nSupport Vector Machine (SVM) Classification\n\nDecision Tree Classification\n\nRandom Forest Classification\n\nKNN Classification\n\nPerceptron\n\n\n\n\n\n\n\n\\(\\text{Unsupervised Learning}\\)\n(Training with unlabeled data)\n\n\n\nClustering\n\nk-Means Clustering\n\nHierarchical Clustering\n\nDBSCAN (Density-Based Spatial Clustering)\n\nGaussian Mixture Models (GMM)\n\n\n\n\nDimensionality Reduction\n\nPrincipal Component Analysis\n\nLatent Dirichlet Allocation (LDA)\nt-SNE (t-distributed Stochastic Neihbor Embedding)\n\nFactor Analysis\n\nAutoencoders\n\n\n\n\n\nAnomaly Detection\n\nIsolation Forests\n\nOne-Class SVM\n\n\n\n\n\n\n\\(\\text{Semi-Supervised Learning}\\)\n(Combination of labeled and unlabeled data)\n\nSelf-training\n\nCo-training\n\nLabel Propagation\n\n\n\n\\(\\text{Reinforcement Learning}\\)\n(Learning via rewards and penalties)\n\nMarkov Decision Process (MDP)\n\nQ-Learning\n\nDeep Q-Networks (DQN)\n\nPolicy Gradient Method"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolor782f40deep-learnings",
    "href": "posts/machinelearning/index.html#texttextcolor782f40deep-learnings",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{#782F40}{Deep Learnings}}\\)",
    "text": "\\(\\text{\\textcolor{#782F40}{Deep Learnings}}\\)\n\nPyTorch\n\nArtificial Neural Networks (ANN)\n\nConvolutional Neural Networks (CNN)\n\nRecurrent Neural Networks (RNN)\n\nLong Short-Term Memory (LSTM)\n\nGenerative Adversarial Networks (GAN)"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolor782f40model-evaluation-and-fine-tuning",
    "href": "posts/machinelearning/index.html#texttextcolor782f40model-evaluation-and-fine-tuning",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{#782F40}{Model Evaluation and Fine Tuning}}\\)",
    "text": "\\(\\text{\\textcolor{#782F40}{Model Evaluation and Fine Tuning}}\\)\n\nModel Evaluation Metrics\n\nFor Regression: Mean Absolute Error (MAE), Mean Squared Error (MSE), Root Mean Squared Error (RMSE), \\(R^2\\) score\n\nFor Classification: Accuracy, Precision, Recall, F1 Score, ROC-AUC\n\nCross-validation: kFold, Stratified k-fold, leave-one-out\n\n\n\nModel Optimization\n\nBias-Variance: Bias Variance Trade off\n\nHyperparameter Tuning: Grid Search, Random Search, Bayesian Optimization\n\nFeatures Selection Techniques: Recursive Feature Elimination (RFE), L1 or Rasso Regurlarization, L2 or Ridge Regularization\n\nModel Interpretability: SHAP (Shapley values), LIME (Local Interpretable Model-agnostic Explanations)\n\n\n\nEnsemble Methods\n\nBagging: Random Forest, Bootstrap Aggregating\n\nBoosting: Gradient Boosting, AdaBoost, XGBoost, CatBoost\n\nStacking: Stacked Generalization\n\n\n\nYou may also like"
  },
  {
    "objectID": "posts/bengalitrial/index.html",
    "href": "posts/bengalitrial/index.html",
    "title": "বাংলা ভাষায় আমার লেখা || My Blog in Benglali Language",
    "section": "",
    "text": "“বাংলায় ব্লগিং করতে পারলে ভালই হতো” এমন ভাবনা থেকেই ঘাটাঘটি শুরু করলাম কিভাবে নিজের ব্লগে বাংলায় লিখতে পারি। বাংলায় মনের ভাব প্রকাশের অসংখ্য মাধ্যম রয়েছে। সামাজিক যোগাযোগের মাধ্যম, পত্রিকা, কিংবা অন্যান্য প্রতিষ্ঠিত ব্লগ। কিন্তু নিজের ব্লগে নিজে বাংলায় লিখতে পারবো কিনা তা নিয়ে একটু সংশয় ছিল কারিগরি দিকটা নিয়ে। কোয়ার্তো দিয়ে আমার এই ব্লগ সাইট বানানো। তাই কোয়ার্তোর ওয়েবসাইট ঘাঁটতে ঘাঁটতে আজ পেয়ে গেলাম কিভাবে ইউনিকোড দিয়ে লিখা যায়। এখন থেকে মাঝে মধ্যেই এখানে বাংলায় পোষ্ট করবো। দেখা যাক।"
  },
  {
    "objectID": "posts/bengalitrial/index.html#আপনক-সবগতম",
    "href": "posts/bengalitrial/index.html#আপনক-সবগতম",
    "title": "বাংলা ভাষায় আমার লেখা || My Blog in Benglali Language",
    "section": "",
    "text": "“বাংলায় ব্লগিং করতে পারলে ভালই হতো” এমন ভাবনা থেকেই ঘাটাঘটি শুরু করলাম কিভাবে নিজের ব্লগে বাংলায় লিখতে পারি। বাংলায় মনের ভাব প্রকাশের অসংখ্য মাধ্যম রয়েছে। সামাজিক যোগাযোগের মাধ্যম, পত্রিকা, কিংবা অন্যান্য প্রতিষ্ঠিত ব্লগ। কিন্তু নিজের ব্লগে নিজে বাংলায় লিখতে পারবো কিনা তা নিয়ে একটু সংশয় ছিল কারিগরি দিকটা নিয়ে। কোয়ার্তো দিয়ে আমার এই ব্লগ সাইট বানানো। তাই কোয়ার্তোর ওয়েবসাইট ঘাঁটতে ঘাঁটতে আজ পেয়ে গেলাম কিভাবে ইউনিকোড দিয়ে লিখা যায়। এখন থেকে মাঝে মধ্যেই এখানে বাংলায় পোষ্ট করবো। দেখা যাক।"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "research.html#current-research",
    "href": "research.html#current-research",
    "title": "",
    "section": "Current Research",
    "text": "Current Research\n\nHigher order Langevin dynamics: General \\(n\\)th order Langevin dynamics\n\nGeneralized Exact First-Order Algorightm (EXTRA) stochastic gradient Langevin dynamics (EXTRA SGLD).\n\nReflected Underdamped Langevin Monte Carlo dynamics"
  },
  {
    "objectID": "research.html#research-interest",
    "href": "research.html#research-interest",
    "title": "",
    "section": "Research Interest",
    "text": "Research Interest\n\nMachine Learning: Centralized and Decentralized Stochastic Gradient Descent (SGD);Algorithmic Stability in SGD; Differential Privacy in machine learning algorithms\nApplied Data Science\nFinancial Mathematics"
  },
  {
    "objectID": "research.html#publications",
    "href": "research.html#publications",
    "title": "",
    "section": "Publications",
    "text": "Publications\n\n\n\n Google Scholar\n ResearchGate\n Orcid\n\n\n\n\nGJR-GARCH Volatility Modeling under NIG and ANN for Predicting Top Cryptocurrencies \nMostafa, F; Saha, P; Islam, Mohammad R.; Nguyen, N. (2020) “Comparison of financial models for stock price prediction.” Journal of Risk and Financial Management.\nComparison of Financial Models for Stock Price Prediction \nIslam, Mohammad R.; Nguyen, N. (2020) “Comparison of financial models for stock price prediction.” Journal of Risk and Financial Management."
  },
  {
    "objectID": "research.html#course-projects",
    "href": "research.html#course-projects",
    "title": "",
    "section": "Course Projects",
    "text": "Course Projects\n\nOption pricing techniques: A performance-based comparative study of the randomized quasi-Monte Carlo method and Fourier cosine method\nAdvisor: Prof. Giray Ökten\n\nPricing financial derivatives such as options with desired accuracy can be hard due to the nature of the functions and complicated integrals required by the pricing techniques. In this paper we investigate the pricing methodology of the European style options using two advanced numerical methods, namely, Quasi-Monte Carlo and Fourier Cosine (COS). For the RQMC method, we use the random-start Halton sequence. We use the Black-Scholes-Merton model to measure the pricing quality of both of the methods. For the numerical results we compute the option price of the call option and we found a few reasons to prefer the RQMC method over the COS method to approximate the European style options.\n\nThe Relationship Between Forced Sexual Activities And Suicidal Attempts Of The Victims\nAdvisor: Dr. Andy Chang\n\nIn project, we apply data-analytic methods to further explore the relationship between forced sexual activities and suicidal behavior among adolescents in the United States. Our findings build on existing literature that explores this relationship. The sample of the study was taken from the Youth Risk Behavior Surveillance System survey 2017. We used a chi-squared test to find the association of forced sexual activities and suicidal behavior, and we found a strong association. Then we used bi-variate logistic regression analysis to ascertain the association of race, age, sex, and education with suicidal attempts after experiencing forced sexual activity (sexual assault). The results of the following paper provide greater insight into the relationship between forced sexual activities and suicide attempts by the adolescents.\n\nStudy of Runge-Kutta Method of Higher orders and its Applications\nAdvisor: Dr. Md. Abdus Samad \n\nThis project is concerned with the study on Runge-Kutta method to apply on different order of differential equation and solve different types of problem such as initial value problem and boundary value problem in ordinary differential equation. At first we discuss about the definition and generation of differential equation specially based on partial differential equation and then definition of Runge-kutta method and the derivation of midpoint method and the formula of Runge-Kutta metod of fourth order and sixth order. We also write FORTRAN 90/95 program for different order of Runge-Kutta methods. We have solved some examples of fourth order R-K method and sixth order R-K method to get the application of R-K method. We also compared the solution of R-K method with exact solution for different step sizes. Then we have given simultaneous first order differential equation and second order differential equation and then solved them by fourth order Runge-Kutta method. At last we have discussed the boundary value problem which we have solved by fourth and sixth order R-K method. After that we have written the algorithm of shooting method and showed computer results with the difference between two answer along with percentages of error."
  },
  {
    "objectID": "research.html#talks-and-presentations",
    "href": "research.html#talks-and-presentations",
    "title": "",
    "section": "Talks and Presentations",
    "text": "Talks and Presentations"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Download a PDF"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "CV",
    "section": "Education",
    "text": "Education\n\nPh.D in Mathematics, Florida State University; Florida, USA 2026 (expected)\nM.S. in Mathematics, Youngstown State University; Ohio, USA 2020\nM.S. in Applied Mathematics, University of Dhaka; Dhaka, Bangladesh 2016\nB.S. in Mathematics, University of Dhaka; Dhaka, Bangladesh 2014"
  },
  {
    "objectID": "cv.html#work-experience",
    "href": "cv.html#work-experience",
    "title": "CV",
    "section": "Work experience",
    "text": "Work experience\n\nGraduate Teaching Assistant (Fall 2021- To Date)\n\nFlorida State University\nDuties includes: Teaching, Proctoring, and Grading\nSupervisor: Penelope Kirby, Ph.D\n\nGraduate Teaching Assistant (Fall 2018 - Spring 2020)\n\nYoungstown State University University\nDuties included: Teaching, Proctoring, and Grading\nSupervisor: G. Jay Kerns, Ph.D\n\nAssistant Vice President (September 2017 - July 2018)\n\nDelta Life Insurance Company Ltd. Dhaka, Bangladesh\nDuties included: Calculated all types of claims (death, surrender, and maturity) using excel spreadsheets.\nProcessed approximately 500 claims each week and submitted corresponding statistical reports to the higher authority.\nWorked in a team to develop a new short-term endowment assurance product which played an important role to increase the company’s new business.\nRefurbished a without risk endowment product which was out of the sale. Priced insurance premiums based on different risk factors for bigger clients which impacted our life fund significantly.\nCalculated reserves for group endowment, term and premium back policies which was a vital part of the final valuation report.\nLiaised directly with the consulting actuary and provided all sorts of technical and documental supports during actuarial valuation\nSupervisor: Md. Salahuddin Soud, VP"
  },
  {
    "objectID": "cv.html#skills",
    "href": "cv.html#skills",
    "title": "CV",
    "section": "Skills",
    "text": "Skills\n\nLanguage\n\nBengali: Native\nEnglish: Fluent\n\nComputer Literacy\n\nProgramming Languages: Python, FORTRAN, Julia, R, MATLAB, Mathematica\nSoftware Development Tools: Git, GitHub, PyPi\n\nMusical Instrument: Amateur/Novice Bamboo flute player"
  },
  {
    "objectID": "cv.html#publications",
    "href": "cv.html#publications",
    "title": "CV",
    "section": "Publications",
    "text": "Publications\n\nGJR-GARCH Volatility Modeling under NIG and ANN for Predicting Top Cryptocurrencies \nMostafa, F; Saha, P; Islam, Mohammad R.; Nguyen, N. (2020) “Comparison of financial models for stock price prediction.” Journal of Risk and Financial Management.\nComparison of Financial Models for Stock Price Prediction \nIslam, Mohammad R.; Nguyen, N. (2020) “Comparison of financial models for stock price prediction.” Journal of Risk and Financial Management."
  },
  {
    "objectID": "cv.html#talks-and-presentations",
    "href": "cv.html#talks-and-presentations",
    "title": "CV",
    "section": "Talks and Presentations",
    "text": "Talks and Presentations\n\n The Heavy-Tail Phenomenon in Decentralized Stochastic Gradient Descent\nNovember 20, 2023\nPresentation at James J Love Building, Florida State University, Tallahassee, Florida\n\n Decentralized Stochastic Gradient Langevin Dynamics and Hamiltonian Monte Carlo\nOctober 05, 2023\nPresentation at James J Love Building, Florida State University, Tallahassee, Florida\n\n Sensitivity analysis for Monte Carlo and Quasi Monte Carlo option pricing\nApril 28, 2020\nPresentation at Cafaro Hall, Youngstown State University, Youngstown, Ohio"
  },
  {
    "objectID": "cv.html#teaching",
    "href": "cv.html#teaching",
    "title": "CV",
    "section": "Teaching",
    "text": "Teaching\n\n Spring 2024: MAP4170 Introduction to Actuarial Mathematics\n\n Fall 2023: MAP4170 Introduction to Actuarial Mathematics\n\n Spring 2023: MAC1140 PreCalculus Algebra\n\n Fall 2022: MAC2311 Calculus and Analytic Geometry I\n\n Fall 2021 and Spring 2022: PreCalculus and Algebra\n\n Fall 2018 to Spring 2020: College Algebra, Trigonometry"
  },
  {
    "objectID": "cv.html#awards-and-affiliations",
    "href": "cv.html#awards-and-affiliations",
    "title": "CV",
    "section": "Awards and Affiliations",
    "text": "Awards and Affiliations\n\nAwards\n\nBettye Anne Busbee Case Graduate Fellowship & Doctoral Mentorship Recognition 2024\n\nOutstanding Graduate Student in Statistics Award for the 2019-2020 academic year, Youngstown State University.\n\nGraduate College Premiere Scholarship, Youngstown State University.\n\nMetLife Bangladesh Actuarial Study Program 2015\n\n\n\nAffiliations\n\nBangladesh Mathematical Society: Life Member\nSociety of Actuaries, SOA: Student Member\nAmerican Mathematical Society, AMS\nSociety for Industrial and Applied Mathematics"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "portfolio.html#data-science-and-machine-learning-projects",
    "href": "portfolio.html#data-science-and-machine-learning-projects",
    "title": "",
    "section": "Data Science and Machine Learning Projects",
    "text": "Data Science and Machine Learning Projects\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nPredicting Product Success Using Customer Reviews and Sales Data\n\n\n\nFriday, October 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsurance Cost Forecast by using Linear Regression\n\n\n\nFriday, August 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisease diagnosis using classification and NLP\n\n\n\nTuesday, June 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "portfolio.html#software-package-and-development",
    "href": "portfolio.html#software-package-and-development",
    "title": "",
    "section": "Software, Package, and Development",
    "text": "Software, Package, and Development\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nStreamlit Web App\n\n\n\nFriday, August 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Application Library: desgld packaging\n\n\n\nFriday, May 3, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "portfolio.html#teaching",
    "href": "portfolio.html#teaching",
    "title": "",
    "section": "Teaching",
    "text": "Teaching\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\n\n\n\n\nSpring 2024: MAP4170 Introduction to Actuarial Mathematics\n\n\n\n\nFall 2023: MAP4170 Introduction to Actuarial Mathematics\n\n\n\n\nSpring 2023: MAC1140 PreCalculus Algebra\n\n\n\n\nFall 2022: MAC2311 Calculus and Analytic Geometry I\n\n\n\n\nFall 2021 and Spring 2022: PreCalculus and Algebra\n\n\n\n\nFall 2018 to Spring 2020: College Algebra, Trigonometry\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "dsandml/bayesianclassification/index.html#introduction",
    "href": "dsandml/bayesianclassification/index.html#introduction",
    "title": "Bayesian Probabilistic Models for Classification",
    "section": "",
    "text": "Bayesian inference is a powerful statistical method that applies the principles of Bayes’s theorem to update the probability of a hypothesis as more evidence or information becomes available. It is widely used in various fields including machine learning, to make predictions and decisions under uncertainty.\nBayes’s theorem is based on the definition of conditional probability. For two events \\(A\\) and \\(B\\) with \\(\\mathbb{P}(B) \\neq 0\\), we define the conditional probability of occurring \\(A\\) given that \\(B\\) has already occurred.\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 384x288 with 0 Axes&gt;\n\n\n\\(\\mathbb{P}(A|B)=\\frac{\\mathbb{P}(A\\cap B)}{\\mathbb{P}(B)}\\)\nSimilarly, the conditional probability of occuring \\(B\\) given that \\(A\\) has already occured with \\(\\mathbb{P}(A) \\ne 0\\) is\n\\[\n\\mathbb{P}(B|A)=\\frac{\\mathbb{P}(A\\cap B)}{\\mathbb{P}(A)}\n\\]\nFrom this equation, we can derive that the joint probability of \\(A\\cap B\\) is \\[\n\\mathbb{P}(A\\cap B) = \\mathbb{P}(B | A) \\mathbb{P} (A) = \\mathbb{P}(A | B) \\mathbb{P} (B)\n\\]"
  },
  {
    "objectID": "dsandml/bayesianclassification/index.html#bayess-theorem",
    "href": "dsandml/bayesianclassification/index.html#bayess-theorem",
    "title": "Bayesian Probabilistic Models for Classification",
    "section": "Bayes’s Theorem",
    "text": "Bayes’s Theorem\n\nFor Two Events or Random Variables\nBayes’s theorem is based on these conditional probabilities. It states that the likelihood of occuring the event \\(A\\) given that the event \\(B\\) has occured is given as\n\\[\n\\mathbb{P}(A | B) = \\frac{\\mathbb{P}(B | A)\\mathbb{P}(A)}{\\mathbb{P}(B)} = \\frac{\\mathbb{P}(B | A)\\mathbb{P}(A)}{\\mathbb{P}(B\\cap A)+\\mathbb{P}(B\\cap A^c)} = \\frac{\\mathbb{P}(B | A)\\mathbb{P}(A)}{\\mathbb{P}(B | A)\\mathbb{P}(A)+\\mathbb{P}(A | B)\\mathbb{P}(B)}\n\\]\nwhere, in Bayesin terminology,\n\n\\(\\mathbb{P}(A|B)\\) is called posterior probability of \\(A\\) given the event \\(B\\) or simply, posterior distribution.\n\n\\(\\mathbb{P}(B|A)\\) is the likelihood: the probability of evidence \\(B\\) given that \\(A\\) is true.\n\n\\(\\mathbb{P}(A)\\) or \\(\\mathbb{P}(B)\\) are the probabilities of occuring \\(A\\) and \\(B\\) respectively, without any dependence on each other.\n\n\\(\\mathbb{P}(A)\\) is called the prior probability or prior distribution and \\(\\mathbb{P}(B)\\) is called the marginal likelihood or marginal probabilities.\n\nFor two continuous random variable \\(X\\) and \\(Y\\), the conditional probability density function of \\(X\\) given the occurence of the value \\(y\\) of \\(Y\\) can be given as\n\\[\nf_{X|Y} (x | y) =\\frac{f_{X,Y}(x,y)}{f_Y(y)}\n\\]\nor the otherway around,\n\\[\nf_{Y|X} (y | x) =\\frac{f_{X,Y}(x,y)}{f_X(x)}\n\\]\nTherefore, the continuous version of Bayes’s theorem is given as follows\n\\[\nf_{Y|X}(y) = \\frac{f_{X|Y}(x)f_Y(y)}{f_X(x)}\n\\]\n\n\nGeneralization of Bayes’s Theorem\nFor \\(n\\) disjoint set of discrete events \\(B_1,B_2\\dots, B_n\\) where \\(\\Omega = \\cup_{i}^{n}B_i\\) and for any event \\(A\\in \\Omega\\), we will have\n\\[\n\\mathbb{P}(A) = \\sum_{i=1}^{n}\\mathbb{P}(A\\cap B_i)\n\\]\nand this is true by the law of total probability.\n\n\n\n\n\nThen the Bayes’s rule extends to the following\n\\[\n\\mathbb{P}(B_i|A) = \\frac{\\mathbb{P}(A|B_i)\\mathbb{P}(B_i)}{\\mathbb{P}(A)}=\\frac{\\mathbb{P}(A|B_i)\\mathbb{P}(B_i)}{\\sum_{i=1}^{n}\\mathbb{P}(A|B_i)\\mathbb{P}(B_i)}\n\\]\nThe continuous version would be \\[\nf_{Y=y|X=x}(y|x) = \\frac{f_{X|Y=y}(x)f_Y(y)}{\\sum_{i=1}^{n}\\int_{-\\infty}^{\\infty}f_{X|Y=y}(x|u)f_{Y}(u)du}\n\\]"
  },
  {
    "objectID": "posts/jobandintern/index.html",
    "href": "posts/jobandintern/index.html",
    "title": "Internship and Full Time Job Preparation Review",
    "section": "",
    "text": "Bayesian Inference in Machine Learning: Part 1\n\n\n\nRafiq Islam\n\n\nSunday, July 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Structure and Algorithms: Basic Programming Hacks\n\n\n\nRafiq Islam\n\n\nWednesday, September 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonte-Carlo Methods: PRNGs\n\n\n\nRafiq Islam\n\n\nSunday, August 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReview probabilities\n\n\n\nRafiq Islam\n\n\nThursday, August 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome Key Statistical Concepts for Interview Prep\n\n\n\nRafiq Islam\n\n\nThursday, September 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "jobandintern/statisticaltalk/index.html",
    "href": "jobandintern/statisticaltalk/index.html",
    "title": "Some Key Statistical Concepts for Interview Prep",
    "section": "",
    "text": "In the world of data analysis and machine learning, statistics plays a vital role in making sense of the data. Whether you’re estimating parameters, testing hypotheses, or understanding relationships between variables, statistical concepts guide how we interpret data. In this post, I want to summarise and collect some fundamental statistical ideas that are quite common and asked in many data science, machine learning, and quant interviews"
  },
  {
    "objectID": "jobandintern/statisticaltalk/index.html#basic-statistical-terminologies",
    "href": "jobandintern/statisticaltalk/index.html#basic-statistical-terminologies",
    "title": "Some Key Statistical Concepts for Interview Prep",
    "section": "Basic Statistical Terminologies",
    "text": "Basic Statistical Terminologies\n\nThe mean\nThe mean is one of the most basic statistical concepts and represents the average value of a dataset. It’s calculated by summing all the values in a dataset and then dividing by the number of observations.\nMathematically, for a set of discrete observations \\(x_1, x_2, ..., x_n\\), the mean \\(\\mu\\) or Expected Value is defined as:\n\\[\\begin{align*}\n\\mu &=  \\frac{1}{n} \\sum_{i=1}^{n} x_i\\\\\n\\implies \\mathbb{E}[X] &= \\sum_{i=1}^{n} x_i\\mathbb{P}(X=x_i)\n\\end{align*}\\]\nFor a continuous random variable \\(X\\), the mean\n\\[\n\\mu = \\mathbb{E}[X]=\\int_{-\\infty}^{\\infty}xf_X(x)dx\n\\]\n\nwhere, \\(\\mathbb{P}(X=x)\\) is the probability mass function (pmf) and \\(f_X(x)\\) is the probability density function (pdf) of the random variable \\(X\\), depending on whether it is discrete or contineous type. The mean helps describe the central tendency of data, but it can be sensitive to outliers.\n\n\n\nVariance\n\nVariance measures the spread or dispersion of a dataset relative to its mean. It tells us how far the individual data points are from the mean. A small variance indicates that data points are clustered closely around the mean, while a large variance means they are spread out.\n\nThe formula for variance \\(\\sigma^2\\) is:\n\\[\\begin{align*}\n    \\sigma^2=Var(X)&=\\frac{1}{n} \\sum_{i=1}^{n} (x_i - \\mu)^2\\\\\n    &=\\mathbb{E}\\left[(X-\\mathbb{E}[X])^2\\right]\\\\\n    &=\\mathbb{E}\\left[(X^2-2X\\mathbb{E}[X]+(\\mathbb{E}[X])^2)\\right]\\\\\n    &=\\mathbb{E}[X^2]-2\\mathbb{E}[X]\\mathbb{E}[X]+(\\mathbb{E}[X])^2\\\\\n    &=\\mathbb{E}[X^2]-(\\mathbb{E}[X])^2\\\\\n\\end{align*}\\]\nHowever, the population and sample variance formula are slightly different. For discrete observations, the sample variance is given as\n\\[ s= \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\mu)^2\\]\nInstead of dividing by \\(n\\) we devide by \\(n-1\\) to have the sample variance unbiased and bigger than the population variance so that it contains the true population variance.\nExamples\n\nNormal Distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\) has the pdf \\(f_{X}(x)=\\frac{1}{\\sqrt{2\\pi \\sigma^2}}\\exp{\\left[-\\frac{(x-\\mu)^2}{2\\sigma^2}\\right]}\\)\n\nStandard Normal Distribution with mean \\(0\\) and variance \\(1\\) has the pdf \\(f_{X}(x)=\\frac{1}{\\sqrt{2\\pi \\sigma^2}}\\exp{\\left[-\\frac{x^2}{2}\\right]}\\)\n\nNow if \\(\\log X\\sim \\mathbfcal{N}(0,1)\\) then what is the distribution of \\(X\\)?\n\n\n\nCovariance\n\nCovariance measures how two variables move together. If the covariance is positive, the two variables tend to increase or decrease together. If negative, one variable tends to increase when the other decreases.\n\nThe formula for covariance between two variables \\(X\\) and \\(Y\\) is:\n\\[\n\\text{Cov}(X, Y) = \\frac{1}{n} \\sum_{i=1}^{n} (X_i - \\mu_X)(Y_i - \\mu_Y)\n\\]\nHowever, covariance doesn’t indicate the strength of the relationship, which brings us to correlation.\n\n\nCorrelation\n\nCorrelation is a standardized measure of the relationship between two variables. It ranges from \\(-1\\) to \\(1\\), where \\(1\\) indicates a perfect positive relationship, \\(-1\\) a perfect negative relationship, and \\(0\\) no relationship.\n\nThe most common correlation metric is Pearson correlation, defined as:\n\\[\n\\rho(X, Y) = \\frac{\\text{Cov}(X, Y)}{\\sigma_X \\sigma_Y}\n\\]\nUnlike covariance, correlation gives a clearer picture of the strength and direction of a linear relationship between variables.\n\n\nP-Values and Hypothesis Testing\n\nP-values and hypothesis testing form the backbone of inferential statistics. Hypothesis testing is used to determine if a given assumption (the null hypothesis \\(H_0\\)) about a population parameter is true or not.\n\n\nThe null hypothesis \\(H_0\\) typically suggests no effect or no difference.\nThe alternative hypothesis \\(H_1\\) is the claim you want to test.\n\nThe p-value is the probability of observing a result as extreme as, or more extreme than, the one obtained, assuming the null hypothesis is true. A small p-value (usually less than 0.05) indicates that the null hypothesis is unlikely, and we may reject it in favor of the alternative hypothesis.\n\n\nMaximum Likelihood Estimation (MLE)\n\nMaximum Likelihood Estimation (MLE) is a method for estimating the parameters of a statistical model. The idea behind MLE is to find the parameter values that maximize the likelihood function, which represents the probability of observing the given data under a particular model.\n\nGiven a parameter \\(\\theta\\) and observed data \\(X\\), the likelihood function is:\n\\[\nL(\\theta | X) = P(X | \\theta)\n\\]\nMLE finds the parameter \\(\\hat{\\theta}\\) that maximizes this likelihood:\n\\[\n\\hat{\\theta} = \\arg\\max_{\\theta} L(\\theta | X)\n\\]\nMLE is widely used in statistical modeling, from simple linear regression to complex machine learning algorithms.\n\n7. Maximum A Posteriori (MAP)\nWhile MLE focuses on maximizing the likelihood, Maximum A Posteriori (MAP) estimation incorporates prior information about the parameters. MAP is rooted in Bayesian statistics, where the goal is to find the parameter that maximizes the posterior distribution.\nThe posterior is given by Bayes’ Theorem:\n\\[\nP(\\theta | X) = \\frac{P(X | \\theta) P(\\theta)}{P(X)}\n\\]\nMAP finds the parameter \\(\\hat{\\theta}_{\\text{MAP}}\\) that maximizes the posterior probability:\n\\[\n\\hat{\\theta}_{\\text{MAP}} = \\arg\\max_{\\theta} P(\\theta | X)\n\\]\nUnlike MLE, MAP estimation incorporates the prior distribution \\(P(\\theta)\\), making it more robust when prior knowledge is available."
  },
  {
    "objectID": "jobandintern/dsa/index.html",
    "href": "jobandintern/dsa/index.html",
    "title": "Data Structure and Algorithms: Basic Programming Hacks",
    "section": "",
    "text": "Code\nimport time\n\ndef time_required(func):\n    def wrapper(*args, **kwargs):\n        starting = time.perf_counter()\n        output = func(*args, **kwargs)\n        ending = time.perf_counter()\n        elapsed = ending - starting\n        print(f'Time required: {elapsed:.6f} seconds')\n        return output\n    return wrapper"
  },
  {
    "objectID": "jobandintern/dsa/index.html#linked-list",
    "href": "jobandintern/dsa/index.html#linked-list",
    "title": "Data Structure and Algorithms: Basic Programming Hacks",
    "section": "Linked List",
    "text": "Linked List\n\nclass Node:\n    def __init__(self, value, next=None) -&gt; None:\n        self.value = value\n        self.next = next\n\ndef linklist(arr):\n    if not arr:\n        return None \n    head = Node(arr[0])\n    current = head \n    for value in arr[1:]:\n        current.next = Node(value)\n        current = current.next \n    return head \n\ndef print_linklist(head):\n    current = head\n    print(\"[\", end=\"\")\n    while current:\n        print(current.value, end=\", \" if current.next else \"]\")\n        current = current.next\n    print()\n\n\n1. Reverse a linked list: Type I\n\n\n\n\ndef reverse(head):\n    prev = None \n    curr = head \n    while curr:\n        next = curr.next \n        curr.next = prev \n        prev = curr \n        curr = next \n    return prev \n\nh = linklist([1,2,3,4,5])\nprint('Original List:')\nprint_linklist(h)\n\nh_reversed = reverse(h)\nprint('Reversed List')\nprint_linklist(h_reversed)\n\nOriginal List:\n[1, 2, 3, 4, 5]\nReversed List\n[5, 4, 3, 2, 1]\n\n\n\n\n2. Reverse a linked list: Type II\n\ndef reverse_in_between(head, left, right):\n    dummy = Node(0, head)\n    leftPrev = dummy\n    curr = head \n\n    for _ in range(left-1):\n        leftPrev = curr \n        curr = curr.next \n    \n    prev = None \n    tail = curr \n\n    for _ in range(right - left + 1):\n        next = curr.next \n        curr.next  = prev \n        prev = curr \n        curr = next \n    \n    leftPrev.next = prev \n    tail.next = curr \n\n    return dummy.next if left != 1 else prev\n\nh = linklist([1,2,3,4,5])\nprint('Original List:')\nprint_linklist(h)  \n\nh_reversed = reverse_in_between(h,2,4)\nprint('Reversed List between 2 and 4')\nprint_linklist(h_reversed)\n\nOriginal List:\n[1, 2, 3, 4, 5]\nReversed List between 2 and 4\n[1, 4, 3, 2, 5]"
  },
  {
    "objectID": "jobandintern/dsa/index.html#arrays-lists-and-strings",
    "href": "jobandintern/dsa/index.html#arrays-lists-and-strings",
    "title": "Data Structure and Algorithms: Basic Programming Hacks",
    "section": "Arrays, Lists, and Strings",
    "text": "Arrays, Lists, and Strings\n\n1. Intersection of two arrays\nSay you have two arrays. Write a function to get the intersection of the two. For example, if \\(A=[2,3,5,6,8]\\) and \\(B=[4,6,8]\\), then the function should return \\([6,8]\\)\nBrute Force\n\n\nOne way to solve this problem is using brute force solution, that is using two nested loops. But this method takes the time complexity of \\(O(n\\times m)\\) given that the lenght of set A is \\(n\\) and set B is \\(m\\). And here is how it is:\n\n\n@time_required\ndef intersection_of_two_sets(A,B):\n    set_A = set(A)\n    set_B = set(B)\n    intersection = []\n    for a in set_A:\n        for b in set_B:\n            if a==b:\n                intersection.append(a)\n    return intersection\nA = [2,3,5,6,8]\nB = [4,6,8]\nprint(intersection_of_two_sets(A,B))\n\nTime required: 0.000005 seconds\n[6, 8]\n\n\nHash Map Approach: In hash map approach, we can solve the same problem but in this case the time and space complexity is \\(O(n+m)\\)\n\n@time_required\ndef intersection_of_two_sets(A,B):\n    set_A = set(A)\n    set_B = set(B)\n    if len(set_A) &lt; len(set_B):\n        return [a for a in set_A if a in set_B]\n    return [b for b in set_B if b in set_A]\n\nA = [2,3,5,6,8]\nB = [4,6,8]\nprint(intersection_of_two_sets(A,B))\n\nTime required: 0.000004 seconds\n[8, 6]\n\n\nThe reason we’re getting \\([8,6]\\) instead of \\([6,8]\\) is because sets in Python are unordered collections, meaning that when you convert the lists \\(A\\) and \\(B\\) to sets, the order of elements is not preserved. So, when we iterate over set_A or set_A, the order can change.\nBetter Approach: If we want to maintain the order of the elements in the original list \\(A\\) or \\(B\\), we can iterate over the original list directly rather than converting it to a set. Here’s how:\n\n@time_required\ndef intersection_of_two_sets(A, B):\n    set_B = set(B)  \n    return [a for a in A if a in set_B]\n\nA = [2, 3, 5, 6, 8]\nB = [4, 6, 8]\nprint(intersection_of_two_sets(A, B))\n\nTime required: 0.000002 seconds\n[6, 8]\n\n\n\n\n2. Max product of \\(k\\) elements from an array of \\(n\\) elements\n\nSay we have an array of size \\(n\\). We want to find the maximum of the products of \\(k\\) elements from the array where \\(k &lt; n\\). For example, if we set \\(k=3\\) and if we have \\(A=[1,2,3,4,5,6]\\) then the answer is 120, if we have \\(B=[-3,-4,3,5]\\) then the answer is 60.\n\nSolution\nnlargest and nsmallest are two functions from the heapq library that returns \\(n\\) largest and \\(n\\) smallest numbers in decreasing and increasing order, respectively. For example,\n\nimport heapq\n\nA = [1,2,3,4,5,6]\nB = [-3,-4,3,5]\nprint('For set {} \\n largest 3 numbers {} \\n smallest 2 numbers'.format(A,heapq.nlargest(3,A)),heapq.nsmallest(2,A))\nprint('\\n')\nprint('For set {} \\n largest 3 numbers {} \\n smallest 2 numbers'.format(B,heapq.nlargest(3,B)),heapq.nsmallest(2,B))\n\nFor set [1, 2, 3, 4, 5, 6] \n largest 3 numbers [6, 5, 4] \n smallest 2 numbers [1, 2]\n\n\nFor set [-3, -4, 3, 5] \n largest 3 numbers [5, 3, -3] \n smallest 2 numbers [-4, -3]\n\n\nNow if all the elements are positive, then the maximum product of \\(k=3\\) elements would just be the product of the largest three element. However, if the set contains negative numbers like the one in the example, product of the smallest two negative numbers and the first element from the nlargest element that would be the largest.\n\nk = 3\n\ndef max_of_three_element_product(arr):\n    m = heapq.nlargest(k, arr)\n    n = heapq.nsmallest(k-1, arr)\n    return max(m[0]*m[1]*m[2], m[0]*n[0]*n[1])\nA = [1,2,3,4,5,6]\nB = [-3,-4,3,5]\n\nprint('Max product of {} elements from set A={} is'.format(k,A), max_of_three_element_product(A))\nprint('Max product of {} elements from set B={} is'.format(k,B), max_of_three_element_product(B))\n\nMax product of 3 elements from set A=[1, 2, 3, 4, 5, 6] is 120\nMax product of 3 elements from set B=[-3, -4, 3, 5] is 60\n\n\n\n\n3. Find the \\(k\\) nearest points from a given point\n\n@time_required\ndef knearest(points: list[list[int]], k: int) -&gt; list[list[int]]:\n    dis = []\n    for x in points:\n        d = pow(pow(x[0],2)+pow(x[1],2),0.5)\n        dis.append((x,d))\n    dis.sort(key= lambda item: item[1])\n    return [x for x,_ in dis[:k]]\npts = [[2,-1],[3,2],[4,1],[-1,-1],[-2,2]]\nk = 3\nprint(knearest(pts,k))\n\nTime required: 0.000010 seconds\n[[-1, -1], [2, -1], [-2, 2]]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n\nRafiq Islam\n\n\n Ph.D. Candidate in Mathematics\nFlorida State University  Contact\nEmail:  mislam@math.fsu.edu\nOffice:  James J. Love Building: Room 331A\nOffice Hours: On appointments\n\n\n\n\nI am currently a Ph.D. candidate and a Graduate Teaching Assistant (GTA) in the Mathematics Department at Florida State University. I am actively involved in research in the area of Data Science, Machine Learning, and Financial Mathematics under the supervision of professor  Lingjiong Zhu.  My academic journey has been both diverse and enriching, spanning multiple institutions and fields of study. Before joining FSU, I obtained a master’s degree in Mathematics from Youngstown State University in Ohio, USA. Prior to that, I completed my undergraduate degree in Mathematics at the University of Dhaka (DU), Bangladesh, followed by a one-year integrated master’s program in Applied Mathematics at the same institution.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html#rafiq-islam",
    "href": "index.html#rafiq-islam",
    "title": "",
    "section": "Rafiq Islam",
    "text": "Rafiq Islam\n\n Ph.D. Candidate in Mathematics\nFlorida State University  Contact\nEmail:  mislam@math.fsu.edu\nOffice:  James J. Love Building: Room 331A\nOffice Hours: On appointments\n\n\n\n\nI am currently a Ph.D. candidate and a Graduate Teaching Assistant (GTA) in the Mathematics Department at Florida State University. I am actively involved in research in the area of Data Science, Machine Learning, and Financial Mathematics under the supervision of professor  Lingjiong Zhu.  My academic journey has been both diverse and enriching, spanning multiple institutions and fields of study. Before joining FSU, I obtained a master’s degree in Mathematics from Youngstown State University in Ohio, USA. Prior to that, I completed my undergraduate degree in Mathematics at the University of Dhaka (DU), Bangladesh, followed by a one-year integrated master’s program in Applied Mathematics at the same institution."
  },
  {
    "objectID": "dsandml/bayesianclassification/index.html#probabilistic-models",
    "href": "dsandml/bayesianclassification/index.html#probabilistic-models",
    "title": "Bayesian Probabilistic Models for Classification",
    "section": "Probabilistic Models",
    "text": "Probabilistic Models\n\nBayes’s theorem gets us the posterior probability given the data with a prior. Therefore, for classification tasks in machine learning, we can use Bayesin style models for classification by maximizing the numerator and minimizing the denominator in the previous equation, for any given class. For instance, say we have a \\(d-\\) dimensional data collected as a random matrix \\(X\\) and the response variable \\(y\\) is a categorical one with \\(c\\) categories. Then for a given data vector \\(X'\\), the posterior distibution that it falls for category \\(j\\) is given as\n\n\\[\n\\mathbb{P}(y=j|X=X')=\\frac{\\pi_j f_j(X')}{\\sum_{i=1}^{c}\\pi_i f_i(X')}\n\\]\nwhere,\n\n\\(f_i(X)\\) is the probability density function of the features conditioned on \\(y\\) being class \\(i\\)\n\n\\(\\pi_i =\\mathbb{P}(y=i)\\)\n\nWe can estimate \\(\\pi_i\\) as the fraction of observations which belong to class \\(i\\).\n\nLinear Discriminant Analysis (LDA)\n\nTo connect Linear Discriminant Analysis (LDA) with the Bayesian probabilistic classification, we start by considering the Bayes Theorem and the assumptions made in LDA. We adapt the Bayes theorem for classification as follows\n\n\\[\nP(C_k | \\mathbf{x}) = \\frac{P(\\mathbf{x} | C_k) P(C_k)}{P(\\mathbf{x})}\n\\]\nWhere:\n\n\\(P(C_k | \\mathbf{x})\\) is the posterior probability that \\(\\mathbf{x}\\) belongs to class \\(C_k\\),\n\\(P(\\mathbf{x} | C_k)\\) is the likelihood (the probability of observing \\(\\mathbf{x}\\) given class \\(C_k\\)),\n\\(P(C_k)\\) is the prior probability of class \\(C_k\\),\n\\(P(\\mathbf{x})\\) is the marginal likelihood (normalizing constant).\n\n\nGaussian Assumption in LDA\nLDA assumes that:\n\nThe likelihood for each class follows a Gaussian distribution with a common covariance matrix \\(\\Sigma\\), i.e.,\n\n\\[\nP(\\mathbf{x} | C_k) = \\frac{1}{(2\\pi)^{d/2} |\\Sigma|^{1/2}} \\exp\\left(-\\frac{1}{2} (\\mathbf{x} - \\boldsymbol{\\mu}_k)^T \\Sigma^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_k)\\right)\n\\]\nwhere \\(\\boldsymbol{\\mu}_k\\) is the mean of class \\(C_k\\) and \\(\\Sigma\\) is the shared covariance matrix. Now let’s talk about \\(\\boldsymbol{\\mu}_k\\) and \\(\\Sigma\\).\nOne feature or dimension\nFor a single feature \\(x\\) and \\(N_k\\) samples \\(x_{k,1},x_{k,2},\\dots, x_{k,N}\\) for class \\(C_k\\), the mean \\(\\mu_k\\):\n\\[\n\\mu_k = \\frac{1}{N_k}\\sum_{i=1}^{N_k} x_{k,i}\n\\]\nand variance \\(\\sigma^2\\) is calculated as the variance within-class variance \\(\\sigma_k^2\\) for each class\n\\[\n\\sigma_k^2 = \\frac{1}{N_k-1}\\sum_{i=1}^{N_k}(x_{k,i}-\\mu_k)^2\n\\]\nand then the pooled variance \\(\\sigma^2\\) is calculated by averaging these variances, weighted by the degrees of freedom in each class:\n\\[\n\\sigma^2 = \\frac{1}{n-\\mathcal{C}}\\sum_{k=1}^{\\mathcal{C}}\\sum_{i=1}^{N_k}(x_{k,i}-\\mu_k)^2\n\\]\nwhere, \\(n\\) is the total number of samples accross all classes, \\(\\mathcal{C}\\) is the number of classes, and \\(x_{k,i}\\) are samples from each class \\(C_k\\).\nFor multi-dimensional data\nIf we have \\(d\\) features (e.g., if \\(\\mathbf{x}\\) is a \\(d-\\)dimensional vector), we calculate the mean vector \\(\\boldsymbol{\\mu}_k\\) for each feature across the \\(N_k\\) samples in class \\(C_k\\) as follows\n\\[\n\\boldsymbol{\\mu}_k = \\frac{1}{N_k}\\sum_{i=1}^{N_k}\\mathbf{x}_{k,i}\n\\]\nand the covariance matrix for each class \\(C_k\\):\n\\[\n\\Sigma_k = \\frac{1}{N_k}\\sum_{i=1}^{N_k} (\\mathbf{x}_{k,i}-\\boldsymbol{\\mu}_k)(\\mathbf{x}_{k,i}-\\boldsymbol{\\mu}_k)^T\n\\]\nTherefore, the pooled variance\n\\[\n\\Sigma = \\frac{1}{n-\\mathcal{C}}\\sum_{k=1}^{\\mathcal{C}}\\sum_{i=1}^{N_k} (\\mathbf{x}_{k,i}-\\boldsymbol{\\mu}_k)(\\mathbf{x}_{k,i}-\\boldsymbol{\\mu}_k)^T\n\\]\n\n\nLog Likelihood Ratio\n\nFor simplicity, let’s say we have only two classes \\(C_1\\) and \\(C_2\\). To derive a decision boundary, we take the ratio of the posterior probabilities for two classes \\(C_1\\) and \\(C_2\\), and then take the logarithm. The rationality behind this approach is when we divide a relatively bigger number by a smaller number we get a larger number and smaller number if we reverse the divison. Since we are working with the probabilities, therefore, we take logarithm.\n\n\\[\\begin{align*}\n\\log\\left(\\frac{P(C_1 | \\mathbf{x})}{P(C_2 | \\mathbf{x})}\\right) &= \\log\\left(\\frac{P(\\mathbf{x} | C_1) P(C_1)}{P(\\mathbf{x} | C_2) P(C_2)}\\right)\\\\\n& =\\log\\left(\\frac{P(\\mathbf{x} | C_1)}{P(\\mathbf{x} | C_2)}\\right) + \\log\\left(\\frac{P(C_1)}{P(C_2)}\\right)\n\\end{align*}\\]\nUsing the Gaussian likelihood assumption, we expand the terms \\(P(\\mathbf{x} | C_1)\\) and \\(P(\\mathbf{x} | C_2)\\):\n\\[\\begin{align*}\n\\log\\left(\\frac{P(\\mathbf{x} | C_1)}{P(\\mathbf{x} | C_2)}\\right) &=\\log{\\left(\\frac{\\frac{1}{(2\\pi)^{\\frac{d}{2}}\\sqrt{|\\Sigma|}}e^{-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu}_1)^T\\Sigma^{-1}(\\mathbf{x}-\\boldsymbol{\\mu}_1)}}{\\frac{1}{(2\\pi)^{\\frac{d}{2}}\\sqrt{|\\Sigma|}}e^{-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu}_2)^T\\Sigma^{-1}(\\mathbf{x}-\\boldsymbol{\\mu}_2)}}\\right)}\\\\\n&= -\\frac{1}{2} \\left[ (\\mathbf{x} - \\boldsymbol{\\mu}_1)^T \\Sigma^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_1) - (\\mathbf{x} - \\boldsymbol{\\mu}_2)^T \\Sigma^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_2) \\right]\\\\\n& = -\\frac{1}{2} \\left[\\mathbf{x}^T\\Sigma^{-1}\\mathbf{x} - 2 \\mathbf{x}^T\\Sigma^{-1}\\boldsymbol{\\mu}_1 + \\boldsymbol{\\mu}_1^T\\Sigma^{-1}\\boldsymbol{\\mu_1} - \\mathbf{x}^T\\Sigma^{-1}\\mathbf{x} + 2 \\mathbf{x}^T\\Sigma^{-1}\\boldsymbol{\\mu}_2 - \\boldsymbol{\\mu}_2^T\\Sigma^{-1}\\boldsymbol{\\mu_2}\\right]\\\\\n& = -\\frac{1}{2} \\left[ - 2 \\mathbf{x}^T\\Sigma^{-1}\\boldsymbol{\\mu}_1 + \\boldsymbol{\\mu}_1^T\\Sigma^{-1}\\boldsymbol{\\mu_1}  + 2 \\mathbf{x}^T\\Sigma^{-1}\\boldsymbol{\\mu}_2 - \\boldsymbol{\\mu}_2^T\\Sigma^{-1}\\boldsymbol{\\mu_2}\\right]\\\\\n& = \\mathbf{x}^T\\Sigma^{-1}(\\boldsymbol{\\mu}_1-\\boldsymbol{\\mu}_2)-\\frac{1}{2}(\\boldsymbol{\\mu}_1^T\\Sigma^{-1}\\boldsymbol{\\mu}_1+\\boldsymbol{\\mu}_2^T\\Sigma^{-1}\\boldsymbol{\\mu}_2)\\\\\n& = \\mathbf{x}^T\\mathbf{w}+\\text{constant};\\hspace{4mm}\\text{where, }\\hspace{4mm}\\mathbf{w} = \\Sigma^{-1} (\\boldsymbol{\\mu}_1 - \\boldsymbol{\\mu}_2)\\\\\n\\end{align*}\\]\nTherefore, we can write\n\\[\n\\log\\left(\\frac{P(\\mathbf{x} | C_1)}{P(\\mathbf{x} | C_2)}\\right) = \\mathbf{w}^T\\mathbf{x}+\\text{constant}\n\\]\nsince \\(\\mathbf{w}^T\\mathbf{x}=\\mathbf{x}^T\\mathbf{w}\\), as inner product is commutative. This is the linear projection vector \\(\\mathbf{w}\\) that LDA uses.\n\n\nFisher’s Discriminant Ratio\n\nNow, we derive the Fisher’s Discriminant Ratio. The goal is to find a projection \\(\\mathbf{w}\\) that maximizes the separation between classes (between-class variance) and minimizes the spread within each class (within-class variance).\n\n\nBetween-class scatter \\(S_B\\) is defined as:\n\n\\[\nS_B = (\\boldsymbol{\\mu}_1 - \\boldsymbol{\\mu}_2)(\\boldsymbol{\\mu}_1 - \\boldsymbol{\\mu}_2)^T\n\\]\n\nWithin-class scatter \\(S_W\\) is the covariance matrix \\(\\Sigma\\), assuming equal covariance for both classes.\n\nThe Fisher’s discriminant ratio is the objective function to maximize:\n\\[\nJ(\\mathbf{w}) = \\frac{\\mathbf{w}^T S_B \\mathbf{w}}{\\mathbf{w}^T S_W \\mathbf{w}}\n\\]\nSubstituting \\(S_B\\) and \\(S_W\\) into this expression, we get:\n\\[\nJ(\\mathbf{w}) = \\frac{\\mathbf{w}^T (\\boldsymbol{\\mu}_1 - \\boldsymbol{\\mu}_2)(\\boldsymbol{\\mu}_1 - \\boldsymbol{\\mu}_2)^T \\mathbf{w}}{\\mathbf{w}^T \\Sigma \\mathbf{w}}\n\\]\nThus, maximizing this ratio gives the direction \\(\\mathbf{w} = \\Sigma^{-1} (\\boldsymbol{\\mu}_1 - \\boldsymbol{\\mu}_2)\\), which is the same as the result from the Bayesian classification.\n\n\nSummary\nThe Fisher’s Discriminant Ratio arises as a byproduct of maximizing the posterior probability ratios between two classes under Gaussian assumptions. It captures the optimal linear projection to maximize the separation between classes (via between-class scatter) and minimize the spread within classes (via within-class scatter).\n\n\n\nQuadratic Discriminant Analysis (QDA)\n\nUnlike LDA, we allow each class \\(C_k\\) to have its own covariance matrix \\(\\Sigma_k\\), leading to a more flexible model capable of handling classes with different shapes and orientations in feature space. Here’s how we can derive the discriminant function for QDA.\n\n\nDiscriminant Function for QDA\nIn QDA, we aim to classify a sample \\(\\mathbf{x}\\) based on the probability that it belongs to class \\(C_k\\), given by \\(P(C_k|\\mathbf{x})\\). Using Bayes’ theorem, we have:\n\\[\nP(C_k | \\mathbf{x}) = \\frac{P(\\mathbf{x} | C_k) P(C_k)}{P(\\mathbf{x})}\n\\]\nSince we’re primarily interested in maximizing this value to classify \\(\\mathbf{x}\\), we can focus on maximizing the posterior probability \\(P(\\mathbf{x} | C_k) P(C_k)\\).\n\n\nLikelihood of \\(\\mathbf{x}\\) in Class \\(C_k\\)\nAssuming that the feature vector \\(\\mathbf{x}\\) follows a Gaussian distribution within each class \\(C_k\\), the likelihood \\(P(\\mathbf{x} | C_k)\\) is given by:\n\\[\nP(\\mathbf{x} | C_k) = \\frac{1}{(2 \\pi)^{d/2} |\\Sigma_k|^{1/2}} \\exp \\left( -\\frac{1}{2} (\\mathbf{x} - \\boldsymbol{\\mu}_k)^T \\Sigma_k^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_k) \\right)\n\\]\nwhere:\n\n\\(\\boldsymbol{\\mu}_k\\) is the mean vector for class \\(C_k\\),\n\\(\\Sigma_k\\) is the covariance matrix for class \\(C_k\\),\n\\(d\\) is the dimensionality of \\(\\mathbf{x}\\).\n\n\n\nLog of the Posterior (Quadratic Discriminant)\nTo simplify the computation, we take the logarithm of the posterior probability. Ignoring constant terms that do not depend on \\(k\\), we have:\n\\[\n\\ln P(\\mathbf{x} | C_k) P(C_k) = -\\frac{1}{2} \\left( (\\mathbf{x} - \\boldsymbol{\\mu}_k)^T \\Sigma_k^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_k) + \\ln |\\Sigma_k| \\right) + \\ln P(C_k)\n\\]\nThe discriminant function for QDA can then be expressed as:\n\\[\n\\delta_k(\\mathbf{x}) = -\\frac{1}{2} (\\mathbf{x} - \\boldsymbol{\\mu}_k)^T \\Sigma_k^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_k) - \\frac{1}{2} \\ln |\\Sigma_k| + \\ln P(C_k)\n\\]\n\n\nExpanding the Quadratic Term\nLet’s expand the quadratic term:\n\\[\n(\\mathbf{x} - \\boldsymbol{\\mu}_k)^T \\Sigma_k^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_k)\n\\]\nExpanding this gives:\n\\[\n(\\mathbf{x} - \\boldsymbol{\\mu}_k)^T \\Sigma_k^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}_k) = \\mathbf{x}^T \\Sigma_k^{-1} \\mathbf{x} - 2 \\mathbf{x}^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k + \\boldsymbol{\\mu}_k^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k\n\\]\nSubstituting this expansion into the discriminant function:\n\\[\n\\delta_k(\\mathbf{x}) = -\\frac{1}{2} \\left( \\mathbf{x}^T \\Sigma_k^{-1} \\mathbf{x} - 2 \\mathbf{x}^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k + \\boldsymbol{\\mu}_k^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k \\right) - \\frac{1}{2} \\ln |\\Sigma_k| + \\ln P(C_k)\n\\]\n\n\nFinal Form of the QDA Discriminant Function\nRearranging terms, we get:\n\\[\n\\delta_k(\\mathbf{x}) = -\\frac{1}{2} \\mathbf{x}^T \\Sigma_k^{-1} \\mathbf{x} + \\mathbf{x}^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k - \\frac{1}{2} \\boldsymbol{\\mu}_k^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k - \\frac{1}{2} \\ln |\\Sigma_k| + \\ln P(C_k)\n\\]\n\n\nKey Points in QDA\n\nQuadratic term: Unlike LDA, QDA includes a quadratic term in \\(\\mathbf{x}\\), \\(-\\frac{1}{2} \\mathbf{x}^T \\Sigma_k^{-1} \\mathbf{x}\\), which allows QDA to model classes with different covariances.\nLinear term: \\(\\mathbf{x}^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k\\) is a linear term in \\(\\mathbf{x}\\).\nConstant term: The remaining terms \\(-\\frac{1}{2} \\boldsymbol{\\mu}_k^T \\Sigma_k^{-1} \\boldsymbol{\\mu}_k - \\frac{1}{2} \\ln |\\Sigma_k| + \\ln P(C_k)\\) are independent of \\(\\mathbf{x}\\).\n\nBecause of the quadratic term, the decision boundaries in QDA are generally quadratic surfaces, allowing it to handle more complex class separations than LDA, which has linear boundaries."
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolorreddata-science",
    "href": "posts/machinelearning/index.html#texttextcolorreddata-science",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{red}{Data Science}}\\)",
    "text": "\\(\\text{\\textcolor{red}{Data Science}}\\)\nData science involves extracting knowledge from structured and unstructured data. It combines principle from statistics, machine learning, data analysis, and domain knoledge to understand and interpret the data\n\nData Collection & Accuisition\n\nWeb srcaping: Data collection through Webscraping\n\nAPI integration\n\nData Lakes, Data Warehouses\n\n\n\nData Cleaning & Preprocessing\n\nHandling Missing Values\n\nData Transformation\n\nFeature Engineering and Selection\n\nEncoding Categorical Variables\n\nHandling Outliers\n\n\n\nExploratory Data Analysis (EDA)\n\nDescriptive Statistics\n\nData Visualization\n\nIdentifying Patterns, Trends, Correlations\n\n\n\nStatistical Methods\n\nANOVA - Categorical Features’: How do we treat the categorical features for our data science project?\nHypothesis Testing\n\nProbability Distributions\n\nInferential Statistics\n\nSampling Methods\n\n\n\nBig Data Techniques\n\nHadoop, Spark\n\nDistributed Data Storage (e.g., HDFS, NoSQL)\nData PipeLines, ETL (Extract, Transform, Load)"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcoloryellowdata-science",
    "href": "posts/machinelearning/index.html#texttextcoloryellowdata-science",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{yellow}{Data Science}}\\)",
    "text": "\\(\\text{\\textcolor{yellow}{Data Science}}\\)\nData science involves extracting knowledge from structured and unstructured data. It combines principle from statistics, machine learning, data analysis, and domain knoledge to understand and interpret the data\n\nData Collection & Accuisition\n\nWeb srcaping: Data collection through Webscraping\n\nAPI integration\n\nData Lakes, Data Warehouses\n\n\n\nData Cleaning & Preprocessing\n\nHandling Missing Values\n\nData Transformation\n\nFeature Engineering and Selection\n\nEncoding Categorical Variables\n\nHandling Outliers\n\n\n\nExploratory Data Analysis (EDA)\n\nDescriptive Statistics\n\nData Visualization\n\nIdentifying Patterns, Trends, Correlations\n\n\n\nStatistical Methods\n\nANOVA - Categorical Features’: How do we treat the categorical features for our data science project?\nHypothesis Testing\n\nProbability Distributions\n\nInferential Statistics\n\nSampling Methods\n\n\n\nBig Data Techniques\n\nHadoop, Spark\n\nDistributed Data Storage (e.g., HDFS, NoSQL)\nData PipeLines, ETL (Extract, Transform, Load)"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolorbluedata-science",
    "href": "posts/machinelearning/index.html#texttextcolorbluedata-science",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{blue}{Data Science}}\\)",
    "text": "\\(\\text{\\textcolor{blue}{Data Science}}\\)\nData science involves extracting knowledge from structured and unstructured data. It combines principle from statistics, machine learning, data analysis, and domain knoledge to understand and interpret the data\n\nData Collection & Accuisition\n\nWeb srcaping: Data collection through Webscraping\n\nAPI integration\n\nData Lakes, Data Warehouses\n\n\n\nData Cleaning & Preprocessing\n\nHandling Missing Values\n\nData Transformation\n\nFeature Engineering and Selection\n\nEncoding Categorical Variables\n\nHandling Outliers\n\n\n\nExploratory Data Analysis (EDA)\n\nDescriptive Statistics\n\nData Visualization\n\nIdentifying Patterns, Trends, Correlations\n\n\n\nStatistical Methods\n\nANOVA - Categorical Features’: How do we treat the categorical features for our data science project?\nHypothesis Testing\n\nProbability Distributions\n\nInferential Statistics\n\nSampling Methods\n\n\n\nBig Data Techniques\n\nHadoop, Spark\n\nDistributed Data Storage (e.g., HDFS, NoSQL)\nData PipeLines, ETL (Extract, Transform, Load)"
  },
  {
    "objectID": "jobandintern/bayesianinference/index.html",
    "href": "jobandintern/bayesianinference/index.html",
    "title": "Bayesian Inference in Machine Learning: Part 1",
    "section": "",
    "text": "Bayesian inference is a powerful statistical method that applies the principles of Bayes’s theorem to update the probability of a hypothesis as more evidence or information becomes available. It is widely used in various fields including machine learning, to make predictions and decisions under uncertainty.\n\nBayes’s theorem is a fundamental result in probability theory that relates the conditional and marginal probabilities of random events. Mathematically,\n\\[\\mathbb{P}(A|B)=\\frac{\\mathbb{P}(B|A)\\mathbb{P}(A)}{\\mathbb{P}(B)}\\hspace{4mm} \\implies \\mathbb{P}(A|B) \\propto \\mathbb{P}(B|A)\\mathbb{P}(A)\\]\nwhere, \\(A\\) and \\(B\\) are events and \\(\\mathbb{P}(B)\\ne 0\\).\n\n\\(\\mathbb{P}(A|B)\\) is a conditional probability which states the probability of occuring the event \\(A\\) when the event \\(B\\) is given or true. The other name of this quantity is called posterior probability of \\(A\\) given the event \\(B\\) or simply, posterior distribution.\n\n\\(\\mathbb{P}(B|A)\\) is a conditional probability which states the probability of occuring the event \\(B\\) when the event \\(A\\) is given or true. In other terms, \\(\\mathbb{P}(B|A)\\) is the likelihood: the probability of evidence \\(B\\) given that \\(A\\) is true.\n\n\\(\\mathbb{P}(A)\\) or \\(\\mathbb{P}(B)\\) are the probabilities of occuring \\(A\\) and \\(B\\) respectively, without any dependence on each other. \\(\\mathbb{P}(A)\\) is called the prior probability or prior distribution and \\(\\mathbb{P}(B)\\) is called the marginal likelihood or marginal probabilities.\n\nExample 1\nConsider a medical example where we want to diagnose a disease based on a test result. Let:\n\n\\(D\\) be the event that a patient has the disease.\n\n\\(T\\) be the event that the test result is positive.\n\nWe are interested in finding the probability that a patient has the disease given a positive test result, \\(\\mathbb{P}(D|T)\\).\nGiven:\n\n\\(\\mathbb{P}(T|D) = 0.99\\) (the probability of a positive test result given the patient has the disease).\n\n\\(\\mathbb{P}(D) = 0.01\\) (the prior probability of the disease).\n\n\\(\\mathbb{P}(T|D') = 0.05\\) (the probability of a positive test result given the patient does not have the disease).\n\nFirst, we need to calculate the marginal likelihood \\(P(T)\\): \\[\\begin{align*}\n    \\mathbb{P}(T) &= \\mathbb{P}(T|D) \\cdot \\mathbb{P}(D) + \\mathbb{P}(T|D') \\cdot \\mathbb{P}(D') \\\\\n    \\mathbb{P}(T) &= 0.99 \\cdot 0.01 + 0.05 \\cdot 0.99\\\\\n    \\mathbb{P}(T) &= 0.0099 + 0.0495 \\\\\n    \\mathbb{P}(T) &= 0.0594\n\\end{align*}\\]\nNow, we can apply Bayes’s theorem:\n\\[\\begin{align*}\n    \\mathbb{P}(D|T) &= \\frac{\\mathbb{P}(T|D) \\cdot \\mathbb{P}(D)}{\\mathbb{P}(T)}\\\\\n    \\mathbb{P}(D|T) &= \\frac{0.99 \\cdot 0.01}{0.0594}\\\\\n    \\mathbb{P}(D|T) &\\approx 0.1667\n\\end{align*}\\]\nSo, the probability that the patient has the disease given a positive test result is approximately \\(16.67\\%\\).\nExample 2\n\n Assume that you are in a restuarant and you ordered a plate of 3 pancakes. The chef made three pancakes with one in perfect condition, that is not burnt in any side, one with one side burnt, and the last one burnt in both sides. The waiter wanted to stack the pancakes so that the burnt side does not show up when served. However, the chef recommended not to hide the burnt side and asked her to stack the pancakes randomly. What is the likelyhood that the fully burnt pancake will be on the top?  To solve this problem, we can use Bayesian approach. We denote the event \\(X\\) as the pancake without any burnt, \\(Y\\) with one side burnt, and \\(Z\\) both side burnt. Then we have the following conditional probabilities\n\n\\[\\begin{align*}\n    \\mathbb{P}(\\text{top-burnt} | X)&=0\\\\\n    \\mathbb{P}(\\text{top-burnt} | Y)&=\\frac{1}{2}\\\\\n    \\mathbb{P}(\\text{top-burnt} | Z)&=1\\\\\n\\end{align*}\\]\nThe probability of picking a pancake irrespective of their burnt condition is \\(\\frac{1}{3}\\). So,\n\\[\\begin{equation}\n    \\mathbb{P}(X)=\\mathbb{P}(Y)=\\mathbb{P}(Z)=\\frac{1}{3}\n\\end{equation}\\]\nThe marginal probability of having burnt side in the top position\n\\[\\begin{align*}\n    \\mathbb{P}(\\text{top-burnt})&=\\mathbb{P}(\\text{top-burnt}|X)\\mathbb{P}(X)+\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)+\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)\\\\\n    &=0\\cdot \\frac{1}{3}+\\frac{1}{2}\\cdot\\frac{1}{3}+1\\cdot\\frac{1}{3}\\\\\n    &=\\frac{1}{2}\n\\end{align*}\\]\nNow, we can only have a burnt side on top if either \\(Z\\) is placed in the top or the burnt side of \\(Y\\) is placed in the top. \\[\\begin{align*}\n    \\mathbb{P}(Y|\\text{top-burnt})&=\\frac{\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)}{\\mathbb{P}(\\text{top-burnt})}\\\\\n    &=\\frac{\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)}{\\mathbb{P}(\\text{top-burnt}|X)\\mathbb{P}(X)+\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)+\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}\\\\\n    &=\\frac{\\frac{1}{2}\\cdot\\frac{1}{3}}{\\frac{1}{2}}=\\frac{1}{3}\\\\\n    \\mathbb{P}(Z|\\text{top-burnt})&=\\frac{\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}{\\mathbb{P}(\\text{top-burnt})}\\\\\n    &=\\frac{\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}{\\mathbb{P}(\\text{top-burnt}|X)\\mathbb{P}(X)+\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)+\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}\\\\\n    &=\\frac{\\frac{1}{3}}{\\frac{1}{2}}=\\frac{2}{3}\n\\end{align*}\\]\nSo the probability of having the fully burnt pancake on the top is \\(\\frac{2}{3}\\)."
  },
  {
    "objectID": "jobandintern/bayesianinference/index.html#introduction",
    "href": "jobandintern/bayesianinference/index.html#introduction",
    "title": "Bayesian Inference in Machine Learning: Part 1",
    "section": "",
    "text": "Bayesian inference is a powerful statistical method that applies the principles of Bayes’s theorem to update the probability of a hypothesis as more evidence or information becomes available. It is widely used in various fields including machine learning, to make predictions and decisions under uncertainty.\n\nBayes’s theorem is a fundamental result in probability theory that relates the conditional and marginal probabilities of random events. Mathematically,\n\\[\\mathbb{P}(A|B)=\\frac{\\mathbb{P}(B|A)\\mathbb{P}(A)}{\\mathbb{P}(B)}\\hspace{4mm} \\implies \\mathbb{P}(A|B) \\propto \\mathbb{P}(B|A)\\mathbb{P}(A)\\]\nwhere, \\(A\\) and \\(B\\) are events and \\(\\mathbb{P}(B)\\ne 0\\).\n\n\\(\\mathbb{P}(A|B)\\) is a conditional probability which states the probability of occuring the event \\(A\\) when the event \\(B\\) is given or true. The other name of this quantity is called posterior probability of \\(A\\) given the event \\(B\\) or simply, posterior distribution.\n\n\\(\\mathbb{P}(B|A)\\) is a conditional probability which states the probability of occuring the event \\(B\\) when the event \\(A\\) is given or true. In other terms, \\(\\mathbb{P}(B|A)\\) is the likelihood: the probability of evidence \\(B\\) given that \\(A\\) is true.\n\n\\(\\mathbb{P}(A)\\) or \\(\\mathbb{P}(B)\\) are the probabilities of occuring \\(A\\) and \\(B\\) respectively, without any dependence on each other. \\(\\mathbb{P}(A)\\) is called the prior probability or prior distribution and \\(\\mathbb{P}(B)\\) is called the marginal likelihood or marginal probabilities.\n\nExample 1\nConsider a medical example where we want to diagnose a disease based on a test result. Let:\n\n\\(D\\) be the event that a patient has the disease.\n\n\\(T\\) be the event that the test result is positive.\n\nWe are interested in finding the probability that a patient has the disease given a positive test result, \\(\\mathbb{P}(D|T)\\).\nGiven:\n\n\\(\\mathbb{P}(T|D) = 0.99\\) (the probability of a positive test result given the patient has the disease).\n\n\\(\\mathbb{P}(D) = 0.01\\) (the prior probability of the disease).\n\n\\(\\mathbb{P}(T|D') = 0.05\\) (the probability of a positive test result given the patient does not have the disease).\n\nFirst, we need to calculate the marginal likelihood \\(P(T)\\): \\[\\begin{align*}\n    \\mathbb{P}(T) &= \\mathbb{P}(T|D) \\cdot \\mathbb{P}(D) + \\mathbb{P}(T|D') \\cdot \\mathbb{P}(D') \\\\\n    \\mathbb{P}(T) &= 0.99 \\cdot 0.01 + 0.05 \\cdot 0.99\\\\\n    \\mathbb{P}(T) &= 0.0099 + 0.0495 \\\\\n    \\mathbb{P}(T) &= 0.0594\n\\end{align*}\\]\nNow, we can apply Bayes’s theorem:\n\\[\\begin{align*}\n    \\mathbb{P}(D|T) &= \\frac{\\mathbb{P}(T|D) \\cdot \\mathbb{P}(D)}{\\mathbb{P}(T)}\\\\\n    \\mathbb{P}(D|T) &= \\frac{0.99 \\cdot 0.01}{0.0594}\\\\\n    \\mathbb{P}(D|T) &\\approx 0.1667\n\\end{align*}\\]\nSo, the probability that the patient has the disease given a positive test result is approximately \\(16.67\\%\\).\nExample 2\n\n Assume that you are in a restuarant and you ordered a plate of 3 pancakes. The chef made three pancakes with one in perfect condition, that is not burnt in any side, one with one side burnt, and the last one burnt in both sides. The waiter wanted to stack the pancakes so that the burnt side does not show up when served. However, the chef recommended not to hide the burnt side and asked her to stack the pancakes randomly. What is the likelyhood that the fully burnt pancake will be on the top?  To solve this problem, we can use Bayesian approach. We denote the event \\(X\\) as the pancake without any burnt, \\(Y\\) with one side burnt, and \\(Z\\) both side burnt. Then we have the following conditional probabilities\n\n\\[\\begin{align*}\n    \\mathbb{P}(\\text{top-burnt} | X)&=0\\\\\n    \\mathbb{P}(\\text{top-burnt} | Y)&=\\frac{1}{2}\\\\\n    \\mathbb{P}(\\text{top-burnt} | Z)&=1\\\\\n\\end{align*}\\]\nThe probability of picking a pancake irrespective of their burnt condition is \\(\\frac{1}{3}\\). So,\n\\[\\begin{equation}\n    \\mathbb{P}(X)=\\mathbb{P}(Y)=\\mathbb{P}(Z)=\\frac{1}{3}\n\\end{equation}\\]\nThe marginal probability of having burnt side in the top position\n\\[\\begin{align*}\n    \\mathbb{P}(\\text{top-burnt})&=\\mathbb{P}(\\text{top-burnt}|X)\\mathbb{P}(X)+\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)+\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)\\\\\n    &=0\\cdot \\frac{1}{3}+\\frac{1}{2}\\cdot\\frac{1}{3}+1\\cdot\\frac{1}{3}\\\\\n    &=\\frac{1}{2}\n\\end{align*}\\]\nNow, we can only have a burnt side on top if either \\(Z\\) is placed in the top or the burnt side of \\(Y\\) is placed in the top. \\[\\begin{align*}\n    \\mathbb{P}(Y|\\text{top-burnt})&=\\frac{\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)}{\\mathbb{P}(\\text{top-burnt})}\\\\\n    &=\\frac{\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)}{\\mathbb{P}(\\text{top-burnt}|X)\\mathbb{P}(X)+\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)+\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}\\\\\n    &=\\frac{\\frac{1}{2}\\cdot\\frac{1}{3}}{\\frac{1}{2}}=\\frac{1}{3}\\\\\n    \\mathbb{P}(Z|\\text{top-burnt})&=\\frac{\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}{\\mathbb{P}(\\text{top-burnt})}\\\\\n    &=\\frac{\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}{\\mathbb{P}(\\text{top-burnt}|X)\\mathbb{P}(X)+\\mathbb{P}(\\text{top-burnt}|Y)\\mathbb{P}(Y)+\\mathbb{P}(\\text{top-burnt}|Z)\\mathbb{P}(Z)}\\\\\n    &=\\frac{\\frac{1}{3}}{\\frac{1}{2}}=\\frac{2}{3}\n\\end{align*}\\]\nSo the probability of having the fully burnt pancake on the top is \\(\\frac{2}{3}\\)."
  },
  {
    "objectID": "jobandintern/bayesianinference/index.html#why-bayesian-inference-in-machine-learning",
    "href": "jobandintern/bayesianinference/index.html#why-bayesian-inference-in-machine-learning",
    "title": "Bayesian Inference in Machine Learning: Part 1",
    "section": "Why Bayesian Inference in Machine Learning?",
    "text": "Why Bayesian Inference in Machine Learning?\nBayesian inference plays a crucial role in machine learning, particularly in areas involving uncertainty and probabilistic reasoning. It allows us to incorporate prior knowledge and update beliefs based on new data, which is especially useful in the following applications:\n\nBayesian Networks\nBayesian networks are graphical models that represent the probabilistic relationships among a set of variables. Each node in the network represents a random variable, and the edges represent conditional dependencies. Bayesian networks are used for various tasks such as classification, prediction, and anomaly detection.\n\n\nBayesian Regression\nBayesian regression extends linear regression by incorporating prior distributions on the model parameters. This approach provides a probabilistic framework for regression analysis, allowing for uncertainty in the parameter estimates. The posterior distribution of the parameters is computed using Bayes’s theorem, and predictions are made by averaging over this distribution.\n\n\nSampling Methods\nIn Bayesian inference, exact computation of the posterior distribution is often intractable. Therefore, sampling methods such as Markov Chain Monte Carlo (MCMC) and Variational Inference are used to approximate the posterior distribution. These methods generate samples from the posterior distribution, allowing us to estimate various statistical properties and make inferences.\nMarkov Chain Monte Carlo (MCMC)\nMCMC methods generate a sequence of samples from the posterior distribution by constructing a Markov chain that has the desired distribution as its equilibrium distribution. Common MCMC algorithms include the Underdamped and Overdamped Langevin dynamics, Metropolis-Hastings algorithm and the Gibbs sampler.\nExample: Metropolis-Hastings Algorithm\nConsider a posterior distribution \\(P(\\theta|D)\\) where \\(\\theta\\) represents the model parameters and \\(D\\) represents the data. The Metropolis-Hastings algorithm proceeds as follows:\n\nInitialize the parameters \\(\\theta_0\\).\nFor \\(t = 1\\) to \\(T\\):\n\nPropose a new state \\(\\theta'\\) from a proposal distribution \\(Q(\\theta'|\\theta_t)\\).\nCompute the acceptance ratio \\(\\alpha = \\frac{P(\\theta'|D) \\cdot Q(\\theta_t|\\theta')}{P(\\theta_t|D) \\cdot Q(\\theta'|\\theta_t)}\\).\nAccept the new state with probability \\(\\min(1, \\alpha)\\). If accepted, set \\(\\theta_{t+1} = \\theta'\\); otherwise, set \\(\\theta_{t+1} = \\theta_t\\).\n\n\nThe samples \\(\\theta_1, \\theta_2, \\ldots, \\theta_T\\) form a Markov chain whose stationary distribution is the posterior distribution \\(P(\\theta|D)\\).\n\n\nBayesian Inference in Neural Networks\nBayesian methods are also applied to neural networks, resulting in Bayesian Neural Networks (BNNs). BNNs incorporate uncertainty in the network weights by placing a prior distribution over them and using Bayes’s theorem to update this distribution based on the observed data. This allows BNNs to provide not only point estimates but also uncertainty estimates for their predictions.\nIn the next parts, we will talk about different applications of the Bayesian inferences, specifically, sampling problem using Langevin dynamics.\n\n\nReference\n\nPancake problems on mathstackexchance\n\nShare on\n\n\n\n\n\n\nShare\n\n\n\nTweet\n\n\n\n\n\nYou may also like"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolorredmachine-learning-algorithms",
    "href": "posts/machinelearning/index.html#texttextcolorredmachine-learning-algorithms",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{red}{Machine Learning Algorithms}}\\)",
    "text": "\\(\\text{\\textcolor{red}{Machine Learning Algorithms}}\\)\n\n\\(\\text{Supervised Learning}\\)\n(Training with labeled data: input-output pairs)\n\nRegression\n\n\nParametric\n\nSimple Linear Regression\nMultiple Linear Regression\nPolynomial Regression\n\n\n\nNon-Parametric\n\nK-Nearest Neighbor (KNN) Regression\nDecesion Trees Regression\nRandom Forest Regression\nSupport Vector Machine (SVM) Regression\n\n\n\n\n\nClassification\n\n\n\nParametric\n\nLogistic Regression\nNaive Bayes\nLinear Discriminant Analysis (LDA)\n\nQuadratic Discriminant Analysis (QDA)\n\n\n\n\nNon-Parametric\n\nKNN Classification\nDecision Tree Classification\nRandom Forest Classification\nSupport Vector Machine (SVM) Classification\n\n\n\n\nMulti-Class Classification\n\nMulti-class Classification\n\n\n\n\nBayesian or Probabilistic Classification\n\nWhat is Bayesian or Probabilistic Classification?\n\nLinear Discriminant Analysis (LDA)\n\nQuadratic Discriminant Analysis (QDA)\n\nNaive Bayes\nBayesian Network Classifier (Tree Augmented Naive Bayes (TAN))\n\n\n\n\nNon-probabilistic Classification\n\nSupport Vector Machine (SVM) Classification\n\nDecision Tree Classification\n\nRandom Forest Classification\n\nKNN Classification\n\nPerceptron\n\n\n\n\n\n\n\n\\(\\text{Unsupervised Learning}\\)\n(Training with unlabeled data)\n\n\n\nClustering\n\nk-Means Clustering\n\nHierarchical Clustering\n\nDBSCAN (Density-Based Spatial Clustering)\n\nGaussian Mixture Models (GMM)\n\n\n\n\nDimensionality Reduction\n\nPrincipal Component Analysis\n\nLatent Dirichlet Allocation (LDA)\nt-SNE (t-distributed Stochastic Neihbor Embedding)\n\nFactor Analysis\n\nAutoencoders\n\n\n\n\n\nAnomaly Detection\n\nIsolation Forests\n\nOne-Class SVM\n\n\n\n\n\n\n\\(\\text{Semi-Supervised Learning}\\)\n(Combination of labeled and unlabeled data)\n\nSelf-training\n\nCo-training\n\nLabel Propagation\n\n\n\n\\(\\text{Reinforcement Learning}\\)\n(Learning via rewards and penalties)\n\nMarkov Decision Process (MDP)\n\nQ-Learning\n\nDeep Q-Networks (DQN)\n\nPolicy Gradient Method"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolorreddeep-learnings",
    "href": "posts/machinelearning/index.html#texttextcolorreddeep-learnings",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{red}{Deep Learnings}}\\)",
    "text": "\\(\\text{\\textcolor{red}{Deep Learnings}}\\)\n\nPyTorch\n\nArtificial Neural Networks (ANN)\n\nConvolutional Neural Networks (CNN)\n\nRecurrent Neural Networks (RNN)\n\nLong Short-Term Memory (LSTM)\n\nGenerative Adversarial Networks (GAN)"
  },
  {
    "objectID": "posts/machinelearning/index.html#texttextcolorredmodel-evaluation-and-fine-tuning",
    "href": "posts/machinelearning/index.html#texttextcolorredmodel-evaluation-and-fine-tuning",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{\\textcolor{red}{Model Evaluation and Fine Tuning}}\\)",
    "text": "\\(\\text{\\textcolor{red}{Model Evaluation and Fine Tuning}}\\)\n\nModel Evaluation Metrics\n\nFor Regression: Mean Absolute Error (MAE), Mean Squared Error (MSE), Root Mean Squared Error (RMSE), \\(R^2\\) score\n\nFor Classification: Accuracy, Precision, Recall, F1 Score, ROC-AUC\n\nCross-validation: kFold, Stratified k-fold, leave-one-out\n\n\n\nModel Optimization\n\nBias-Variance: Bias Variance Trade off\n\nHyperparameter Tuning: Grid Search, Random Search, Bayesian Optimization\n\nFeatures Selection Techniques: Recursive Feature Elimination (RFE), L1 or Rasso Regurlarization, L2 or Ridge Regularization\n\nModel Interpretability: SHAP (Shapley values), LIME (Local Interpretable Model-agnostic Explanations)\n\n\n\nEnsemble Methods\n\nBagging: Random Forest, Bootstrap Aggregating\n\nBoosting: Gradient Boosting, AdaBoost, XGBoost, CatBoost\n\nStacking: Stacked Generalization\n\n\n\nYou may also like"
  },
  {
    "objectID": "posts/machinelearning/index.html#textdeep-learnings",
    "href": "posts/machinelearning/index.html#textdeep-learnings",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{Deep Learnings}\\)",
    "text": "\\(\\text{Deep Learnings}\\)\n\nPyTorch\n\nArtificial Neural Networks (ANN)\n\nConvolutional Neural Networks (CNN)\n\nRecurrent Neural Networks (RNN)\n\nLong Short-Term Memory (LSTM)\n\nGenerative Adversarial Networks (GAN)"
  },
  {
    "objectID": "posts/machinelearning/index.html#textmodel-evaluation-and-fine-tuning",
    "href": "posts/machinelearning/index.html#textmodel-evaluation-and-fine-tuning",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{Model Evaluation and Fine Tuning}\\)",
    "text": "\\(\\text{Model Evaluation and Fine Tuning}\\)\n\nModel Evaluation Metrics\n\nFor Regression: Mean Absolute Error (MAE), Mean Squared Error (MSE), Root Mean Squared Error (RMSE), \\(R^2\\) score\n\nFor Classification: Accuracy, Precision, Recall, F1 Score, ROC-AUC\n\nCross-validation: kFold, Stratified k-fold, leave-one-out\n\n\n\nModel Optimization\n\nBias-Variance: Bias Variance Trade off\n\nHyperparameter Tuning: Grid Search, Random Search, Bayesian Optimization\n\nFeatures Selection Techniques: Recursive Feature Elimination (RFE), L1 or Rasso Regurlarization, L2 or Ridge Regularization\n\nModel Interpretability: SHAP (Shapley values), LIME (Local Interpretable Model-agnostic Explanations)\n\n\n\nEnsemble Methods\n\nBagging: Random Forest, Bootstrap Aggregating\n\nBoosting: Gradient Boosting, AdaBoost, XGBoost, CatBoost\n\nStacking: Stacked Generalization\n\n\n\nYou may also like"
  },
  {
    "objectID": "posts/machinelearning/index.html#textmachine-learning-algorithms",
    "href": "posts/machinelearning/index.html#textmachine-learning-algorithms",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{Machine Learning Algorithms}\\)",
    "text": "\\(\\text{Machine Learning Algorithms}\\)\n\n\\(\\text{Supervised Learning}\\)\n(Training with labeled data: input-output pairs)\n\nRegression\n\n\nParametric\n\nSimple Linear Regression\nMultiple Linear Regression\nPolynomial Regression\n\n\n\nNon-Parametric\n\nK-Nearest Neighbor (KNN) Regression\nDecesion Trees Regression\nRandom Forest Regression\nSupport Vector Machine (SVM) Regression\n\n\n\n\n\nClassification\n\n\n\nParametric\n\nLogistic Regression\nNaive Bayes\nLinear Discriminant Analysis (LDA)\n\nQuadratic Discriminant Analysis (QDA)\n\n\n\n\nNon-Parametric\n\nKNN Classification\nDecision Tree Classification\nRandom Forest Classification\nSupport Vector Machine (SVM) Classification\n\n\n\n\nMulti-Class Classification\n\nMulti-class Classification\n\n\n\n\nBayesian or Probabilistic Classification\n\nWhat is Bayesian or Probabilistic Classification?\n\nLinear Discriminant Analysis (LDA)\n\nQuadratic Discriminant Analysis (QDA)\n\nNaive Bayes\nBayesian Network Classifier (Tree Augmented Naive Bayes (TAN))\n\n\n\n\nNon-probabilistic Classification\n\nSupport Vector Machine (SVM) Classification\n\nDecision Tree Classification\n\nRandom Forest Classification\n\nKNN Classification\n\nPerceptron\n\n\n\n\n\n\n\n\\(\\text{Unsupervised Learning}\\)\n(Training with unlabeled data)\n\n\n\nClustering\n\nk-Means Clustering\n\nHierarchical Clustering\n\nDBSCAN (Density-Based Spatial Clustering)\n\nGaussian Mixture Models (GMM)\n\n\n\n\nDimensionality Reduction\n\nPrincipal Component Analysis\n\nLatent Dirichlet Allocation (LDA)\nt-SNE (t-distributed Stochastic Neihbor Embedding)\n\nFactor Analysis\n\nAutoencoders\n\n\n\n\n\nAnomaly Detection\n\nIsolation Forests\n\nOne-Class SVM\n\n\n\n\n\n\n\\(\\text{Semi-Supervised Learning}\\)\n(Combination of labeled and unlabeled data)\n\nSelf-training\n\nCo-training\n\nLabel Propagation\n\n\n\n\\(\\text{Reinforcement Learning}\\)\n(Learning via rewards and penalties)\n\nMarkov Decision Process (MDP)\n\nQ-Learning\n\nDeep Q-Networks (DQN)\n\nPolicy Gradient Method"
  },
  {
    "objectID": "posts/machinelearning/index.html#textdata-science",
    "href": "posts/machinelearning/index.html#textdata-science",
    "title": "Data Science & Machine Learning Basics",
    "section": "\\(\\text{Data Science}\\)",
    "text": "\\(\\text{Data Science}\\)\nData science involves extracting knowledge from structured and unstructured data. It combines principle from statistics, machine learning, data analysis, and domain knoledge to understand and interpret the data\n\nData Collection & Accuisition\n\nWeb srcaping: Data collection through Webscraping\n\nAPI integration\n\nData Lakes, Data Warehouses\n\n\n\nData Cleaning & Preprocessing\n\nHandling Missing Values\n\nData Transformation\n\nFeature Engineering and Selection\n\nEncoding Categorical Variables\n\nHandling Outliers\n\n\n\nExploratory Data Analysis (EDA)\n\nDescriptive Statistics\n\nData Visualization\n\nIdentifying Patterns, Trends, Correlations\n\n\n\nStatistical Methods\n\nANOVA - Categorical Features’: How do we treat the categorical features for our data science project?\nHypothesis Testing\n\nProbability Distributions\n\nInferential Statistics\n\nSampling Methods\n\n\n\nBig Data Techniques\n\nHadoop, Spark\n\nDistributed Data Storage (e.g., HDFS, NoSQL)\nData PipeLines, ETL (Extract, Transform, Load)"
  },
  {
    "objectID": "dsandml/bayesianclassification/index.html#references",
    "href": "dsandml/bayesianclassification/index.html#references",
    "title": "Bayesian Probabilistic Models for Classification",
    "section": "References",
    "text": "References\n\n“The Elements of Statistical Learning” by Trevor Hastie, Robert Tibshirani, and Jerome Friedman\n\nThis book is an excellent resource for both Linear and Quadratic Discriminant Analysis, including mathematical derivations, explanations of Gaussian discriminant analysis, and the context for using LDA and QDA.\nSee Chapter 4: Linear Methods for Classification.\n\n“Pattern Recognition and Machine Learning” by Christopher M. Bishop\n\nBishop’s book offers a clear introduction to probabilistic classification, Bayes theorem, and discriminant analysis.\nSee Chapter 4: Linear Models for Classification.\n\n“Machine Learning: A Probabilistic Perspective” by Kevin P. Murphy\n\nThis text provides derivations and explanations of LDA and QDA from a probabilistic and Bayesian perspective.\nSee Chapter 7: Linear Discriminant Analysis.\n\n“Applied Multivariate Statistical Analysis” by Richard A. Johnson and Dean W. Wichern\n\nThis book goes deeper into the statistical foundation behind discriminant analysis, including pooled variance, unbiased estimators, and the assumptions behind LDA and QDA.\nSee Chapter 11: Discrimination and Classification.\n\n“Introduction to the Theory of Statistics” by Alexander M. Mood, Franklin A. Graybill, and Duane C. Boes\n\nThis text provides a theoretical foundation on statistical concepts, including unbiased estimators and quadratic forms, which underlie LDA and QDA derivations.\nRelevant for concepts of unbiased estimation and quadratic forms.\n\n\n\nShare on\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also like"
  }
]