<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Mohammad Rafiqul Islam</title>
<link>https://mrislambd.github.io/blog.html</link>
<atom:link href="https://mrislambd.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Wed, 23 Oct 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>বাংলা ভাষায় আমার লেখা || My Blog in Benglali Language</title>
  <dc:creator>মোহাম্মদ রকিবুল ইসলাম</dc:creator>
  <link>https://mrislambd.github.io/posts/bengalitrial/</link>
  <description><![CDATA[ 




<section id="আপনক-সবগতম" class="level2">
<h2 class="anchored" data-anchor-id="আপনক-সবগতম">আপনাকে স্বাগতম</h2>
<p style="text-align: justify">
“বাংলায় ব্লগিং করতে পারলে ভালই হতো” এমন ভাবনা থেকেই ঘাটাঘটি শুরু করলাম কিভাবে নিজের ব্লগে বাংলায় লিখতে পারি। বাংলায় মনের ভাব প্রকাশের অসংখ্য মাধ্যম রয়েছে। সামাজিক যোগাযোগের মাধ্যম, পত্রিকা, কিংবা অন্যান্য প্রতিষ্ঠিত ব্লগ। কিন্তু নিজের ব্লগে নিজে বাংলায় লিখতে পারবো কিনা তা নিয়ে একটু সংশয় ছিল কারিগরি দিকটা নিয়ে। কোয়ার্তো দিয়ে আমার এই ব্লগ সাইট বানানো। তাই কোয়ার্তোর ওয়েবসাইট ঘাঁটতে ঘাঁটতে আজ পেয়ে গেলাম কিভাবে ইউনিকোড দিয়ে লিখা যায়। এখন থেকে মাঝে মধ্যেই এখানে বাংলায় পোষ্ট করবো। দেখা যাক।
</p>



<!-- -->

</section>

<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-listing-file-modified-sort="1742174288422" data-listing-reading-time-sort="1" data-listing-word-count-sort="1">
<a href="../../banglablog/welcomepost/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<!-- img(9CEB782EFEE6)[progressive=false, height=150px]:listing:banglablog/welcomepost/index.html -->
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
বাংলা ব্লগে আপনাকে স্বাগতম
</h5>
<div class="listing-reading-time card-text text-muted">
1 min
</div>
<div class="card-attribution card-text-small start">
<div class="listing-author">

</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <guid>https://mrislambd.github.io/posts/bengalitrial/</guid>
  <pubDate>Wed, 23 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/bengalitrial/ben.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)</title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/sgd/</link>
  <description><![CDATA[ 




<section id="gradient-descent" class="level2">
<h2 class="anchored" data-anchor-id="gradient-descent">Gradient Descent</h2>
<p style="text-align: justify">
<img align="right" height="350" width="450" src="https://mrislambd.github.io/_assets/images/gradient_descent.gif" alt="Collected from gbhat.com" style="margin-left: 20px; margin-bottom: 20px"> <br> GIF Credit: <a href="https://gbhat.com/machine_learning/gradient_descent_anim.html" target="_blank" style="text-decoration:none">gbhat.com</a><br>
<br> Gradient Descent is an optimization algorithm used to minimize the cost function. The cost function <img src="https://latex.codecogs.com/png.latex?f(%5Cbeta)"> measures how well a model with parameters <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> fits the data. The goal is to find the values of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> that minimize this cost function. In terms of the iterative method, we want to find <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bk+1%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_k"> such that <img src="https://latex.codecogs.com/png.latex?f(%5Cbeta_%7Bk+1%7D)%3Cf(%5Cbeta_k)">. <br> <br> For a small change in <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, we can approximate <img src="https://latex.codecogs.com/png.latex?f(%5Cbeta)"> using Taylor series expansion<br>
<img src="https://latex.codecogs.com/png.latex?f(%5Cbeta_%7Bk+1%7D)=f(%5Cbeta_k%20+%5CDelta%5Cbeta_k)%5Capprox%20f(%5Cbeta_k)+%5Cnabla%20f(%5Cbeta_k)%5ET%20%5CDelta%20%5Cbeta_k+%5Ctext%7Bhigher-order%20terms%7D">
</p>
<p>The update rule for vanilla gradient descent is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7Bk+1%7D%20=%20%5Cbeta_k%20-%20%5Ceta%20%5Cnabla%20f(%5Cbeta_k)%0A"></p>
<p>Where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta_k"> is the current estimate of the parameters at iteration <img src="https://latex.codecogs.com/png.latex?k">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ceta"> is the learning rate, a small positive scalar that controls the step size.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cnabla%20f(%5Cbeta_k)"> is the gradient of the cost function <img src="https://latex.codecogs.com/png.latex?f"> with respect to <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> at the current point <img src="https://latex.codecogs.com/png.latex?%5Cbeta_k">.</li>
</ul>
<p style="text-align: justify">
</p><p>The update rule comes from the idea of moving the parameter vector <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> in the direction that decreases the cost function the most.</p>
<ol type="1">
<li><p><strong>Gradient</strong>: The gradient <img src="https://latex.codecogs.com/png.latex?%5Cnabla%20f(%5Cbeta_k)"> represents the direction and magnitude of the steepest ascent of the function <img src="https://latex.codecogs.com/png.latex?f"> at the point <img src="https://latex.codecogs.com/png.latex?%5Cbeta_k">. Since we want to minimize the function, we move in the opposite direction of the gradient.</p></li>
<li><p><strong>Step Size</strong>: The term <img src="https://latex.codecogs.com/png.latex?%5Ceta%20%5Cnabla%20f(%5Cbeta_k)"> scales the gradient by the learning rate <img src="https://latex.codecogs.com/png.latex?%5Ceta">, determining how far we move in that direction. If <img src="https://latex.codecogs.com/png.latex?%5Ceta"> is too large, the algorithm may overshoot the minimum; if it’s too small, the convergence will be slow.</p></li>
<li><p><strong>Iterative Update</strong>: Starting from an initial guess <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0">, we repeatedly apply the update rule until the algorithm converges, meaning that the changes in <img src="https://latex.codecogs.com/png.latex?%5Cbeta_k"> become negligible, and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_k"> is close to the optimal value <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E*">.</p></li>
</ol>
</section>
<section id="stochastic-gradient-descent-sgd" class="level2">
<h2 class="anchored" data-anchor-id="stochastic-gradient-descent-sgd">Stochastic Gradient Descent (SGD)</h2>
<p style="text-align: justify">
Stochastic Gradient Descent is a variation of the vanilla gradient descent. Instead of computing the gradient using the entire dataset, SGD updates the parameters using only a single data point or a small batch of data points at each iteration. The later one we call it mini batch SGD.
</p>
<p>Suppose our cost function is defined as the average over a dataset of size <img src="https://latex.codecogs.com/png.latex?n">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Cbeta)%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20f_i(%5Cbeta)%0A"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?f_i(%5Cbeta)"> represents the contribution of the <img src="https://latex.codecogs.com/png.latex?i">-th data point to the total cost function. The gradient of the cost function with respect to <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnabla%20f(%5Cbeta)%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cnabla%20f_i(%5Cbeta)%0A"></p>
<p>Vanilla gradient descent would update the parameters as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7Bk+1%7D%20=%20%5Cbeta_k%20-%20%5Ceta%20%5Cnabla%20f(%5Cbeta_k)%0A"></p>
<p>Instead of using the entire dataset to compute the gradient, SGD approximates the gradient by using only a single data point (or a small batch). The update rule for SGD is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7Bk+1%7D%20=%20%5Cbeta_k%20-%20%5Ceta%20%5Cnabla%20f_%7Bi_k%7D(%5Cbeta_k)%0A"></p>
<p>Where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?i_k"> is the index of a randomly selected data point at iteration <img src="https://latex.codecogs.com/png.latex?k">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cnabla%20f_%7Bi_k%7D(%5Cbeta_k)"> is the gradient of the cost function with respect to the parameter <img src="https://latex.codecogs.com/png.latex?%5Cbeta_k">, evaluated only at the data point indexed by <img src="https://latex.codecogs.com/png.latex?i_k">.</li>
</ul>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p style="text-align:justify">
Let’s imagine a hypothetical scenario, Walmart Inc.&nbsp;wants to explore their business in a new twon. They want to have their store in location so that the total distance of the store from all the houses in the neighborhood is the smallest possible. If they have the data of <img src="https://latex.codecogs.com/png.latex?n"> houses with corresponding coordinates of the houses, return the optimized location for the store.
</p>
<p>The Euclidean distance between two points <img src="https://latex.codecogs.com/png.latex?(x_1,y_1)"> and <img src="https://latex.codecogs.com/png.latex?(x_2,y_2)"> is given by<br>
<img src="https://latex.codecogs.com/png.latex?d=%5Csqrt%7B(x_1-x_2)%5E2+(y_1-y_2)%7D"></p>
<p>Assume that <img src="https://latex.codecogs.com/png.latex?P=(x,y)"> is the coordinate of Walmart. So for a total of <img src="https://latex.codecogs.com/png.latex?n"> such points the total distance <img src="https://latex.codecogs.com/png.latex?D"> from the point <img src="https://latex.codecogs.com/png.latex?P"> is a function of two variable <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> of the following form</p>
<p><img src="https://latex.codecogs.com/png.latex?D=f(x,y)=%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Csqrt%7B(x-x_i)%5E2+(y-y_i)%5E2%7D"></p>
<div id="119560f9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mpl_toolkits.mplot3d <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Axes3D</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x,y, c, d):</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.sqrt((x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb1-9">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb1-10">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(x,y)</span>
<span id="cb1-11"></span>
<span id="cb1-12">c, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-13"></span>
<span id="cb1-14">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(x, y, c, d)</span>
<span id="cb1-15"></span>
<span id="cb1-16">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb1-17">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>, projection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3d'</span>)</span>
<span id="cb1-18">ax.plot_surface(x, y, z, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>)</span>
<span id="cb1-19">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb1-20">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb1-21">ax.set_zlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb1-22">plt.gca().set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#f4f4f4'</span>) </span>
<span id="cb1-23">plt.gcf().patch.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#f4f4f4'</span>)</span>
<span id="cb1-24">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sgd.png'</span>)</span>
<span id="cb1-25">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/cell-2-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mrislambd.github.io/posts/sgd/index_files/figure-html/cell-2-output-1.png" width="406" height="396" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>all we need to do is to minimize the function <img src="https://latex.codecogs.com/png.latex?f(x,y)"> and to do that we need to calculate the gradient vector which is the partial derivative of <img src="https://latex.codecogs.com/png.latex?f(x,y)"> with respect to <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y">. So,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20x%7D&amp;%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cfrac%7Bx-x_i%7D%7B%5Csqrt%7B(x-x_i)%5E2+(y-y_i)%5E2%7D%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20y%7D&amp;%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cfrac%7By-y_i%7D%7B%5Csqrt%7B(x-x_i)%5E2+(y-y_i)%5E2%7D%7D%5C%5C%0A&amp;%20%5C%5C%0A%5Cimplies%20%5Cnabla%20f(x,y)%20&amp;=%20%5Cbegin%7Bbmatrix%7D%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20x%7D%5C%5C%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20y%7D%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign*%7D"></p>
<p>Then the algorithm</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cbegin%7Bbmatrix%7Dx_%7Bi+1%7D%5C%5Cy_%7Bi+1%7D%5Cend%7Bbmatrix%7D&amp;=%20%5Cbegin%7Bbmatrix%7Dx_%7Bi%7D%5C%5Cy_%7Bi%7D%5Cend%7Bbmatrix%7D%20-%20%5Ceta_i%20%5Cbegin%7Bbmatrix%7D%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20x%7D%7C_%7Bx_i%7D%5C%5C%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20y%7D%7C_%7By_i%7D%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign*%7D"></p>
<p>where, the <img src="https://latex.codecogs.com/png.latex?%5Ceta"> is the step size or learning rate that scales the size of the move towards the opposite of the gradient direction.</p>
<p>Next, how do we control the numerical stability of the algorithm? We need to decrease the step size at each iteration which. This is called the <code>rate of decay</code>. We also need a termination factor or <code>tolerance</code> level that determines if we can stop the iteration. Sometimes, for a deep down convex function, the process oscillates back and forth around a range of values. In this case, applying a <code>damping factor</code> increases the chance for a smooth convergence.</p>
<section id="gradient-descent-gd" class="level3">
<h3 class="anchored" data-anchor-id="gradient-descent-gd">Gradient Descent (GD)</h3>
<div id="a84515d7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GDdistanceMin:</span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, step_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, decay_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, tolerance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-7</span>, damping_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> step_size</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decay_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decay_rate</span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tolerance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tolerance</span>
<span id="cb2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.damping_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> damping_rate</span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points</span>
<span id="cb2-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(points)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialization</span></span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(points)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialization</span></span>
<span id="cb2-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_updates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_updates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _partial_derivative_x(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb2-18">        grad_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xi, yi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.points:</span>
<span id="cb2-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> yi:</span>
<span id="cb2-21">                grad_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> math.sqrt((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> grad_x</span>
<span id="cb2-23"></span>
<span id="cb2-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _partial_derivative_y(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb2-25">        grad_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xi, yi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.points:</span>
<span id="cb2-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> yi:</span>
<span id="cb2-28">                grad_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> math.sqrt((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> grad_y</span>
<span id="cb2-30"></span>
<span id="cb2-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient_descent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-32">        dx, dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tolerance:</span>
<span id="cb2-34">            dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._partial_derivative_x(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.damping_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx </span>
<span id="cb2-35">            dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._partial_derivative_y(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.damping_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy </span>
<span id="cb2-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx </span>
<span id="cb2-37">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_updates.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb2-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy </span>
<span id="cb2-39">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_updates.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb2-40">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decay_rate</span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb2-42"></span>
<span id="cb2-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x, y, c, d):</span>
<span id="cb2-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.sqrt((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define points</span></span>
<span id="cb2-47">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb2-48">gd_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GDdistanceMin(points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>points)</span>
<span id="cb2-49">min_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gd_min.gradient_descent()</span>
<span id="cb2-50">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gd_min.x_updates</span>
<span id="cb2-51">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gd_min.y_updates</span>
<span id="cb2-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Minimum point:"</span>, min_pt)</span>
<span id="cb2-53"></span>
<span id="cb2-54">c, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_pt</span>
<span id="cb2-55"></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a grid for plotting</span></span>
<span id="cb2-57">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb2-58">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb2-59">x_grid, y_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(x, y)</span>
<span id="cb2-60">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(x_grid, y_grid, c, d)</span>
<span id="cb2-61"></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate z values for the updates</span></span>
<span id="cb2-63">zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f(xi, yi, c, d) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xi, yi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(xs, ys)]</span>
<span id="cb2-64"></span>
<span id="cb2-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting</span></span>
<span id="cb2-66">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb2-67">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>, projection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3d'</span>)</span>
<span id="cb2-68">ax.plot_surface(x_grid, y_grid, z, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb2-69">ax.scatter(xs, ys, zs, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Updates"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb2-70">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb2-71">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb2-72">ax.set_zlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb2-73">plt.gca().set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#f4f4f4'</span>) </span>
<span id="cb2-74">plt.gcf().patch.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#f4f4f4'</span>)</span>
<span id="cb2-75">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Minimum point: (0.9999997458022071, 2.9999999769909707)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/cell-3-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://mrislambd.github.io/posts/sgd/index_files/figure-html/cell-3-output-2.png" width="412" height="396" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Testing</p>
<p><strong>Share on</strong></p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0"></script>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/sgd/" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Fsgd%2F&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/sgd/"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/sgd/" data-show-count="true">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/sgd/" data-width="" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->

</section>
</section>

<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611532800000" data-listing-file-modified-sort="1742174289164" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="2" data-listing-word-count-sort="357">
<a href="../../posts/eigen/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/eigen/lin3.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Generalized eigenvectors and eigenspaces
</h5>
<div class="listing-reading-time card-text text-muted">
2 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Monday, January 25, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNDb21wdXRhdGlvbmFsJTIwTWF0aGVtYXRpY3MlMkNBbGdvcml0aG1pYyUyMENvbXBsZXhpdHklMkNQcm9ncmFtbWluZyUyQ0NvbXB1dGVyJTIwU2NpZW5jZQ==" data-listing-date-sort="1636416000000" data-listing-file-modified-sort="1742174289171" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="26" data-listing-word-count-sort="5076">
<a href="../../posts/lu/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/lu/lu.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
LU Factorization of a Full rank Matrix using Fortran
</h5>
<div class="listing-reading-time card-text text-muted">
26 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Tuesday, November 9, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611187200000" data-listing-file-modified-sort="1742174289174" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="3" data-listing-word-count-sort="580">
<a href="../../posts/matrixrep/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/matrixrep/lin2.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Matrix Representation: Change of Basis
</h5>
<div class="listing-reading-time card-text text-muted">
3 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, January 21, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2024,
  author = {Islam, Rafiq},
  title = {Implementation of {Gradient} {Descent} {(GD)} and
    {Stochastic} {Gradient} {Descent} {(SGD)}},
  date = {2024-09-19},
  url = {https://mrislambd.github.io/posts/sgd/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2024" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2024. <span>“Implementation of Gradient Descent (GD) and
Stochastic Gradient Descent (SGD).”</span> September 19, 2024. <a href="https://mrislambd.github.io/posts/sgd/">https://mrislambd.github.io/posts/sgd/</a>.
</div></div></section></div> ]]></description>
  <category>Data Science</category>
  <category>Machine Learning</category>
  <category>Stochastic Gradient Descent</category>
  <category>Optimization</category>
  <guid>https://mrislambd.github.io/posts/sgd/</guid>
  <pubDate>Thu, 19 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/sgd/sgd.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Matrix multiplication: Let’s make it less expensive!</title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/matmul/</link>
  <description><![CDATA[ 




<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6878992848042528" crossorigin="anonymous"></script>
<p>Have you ever wondered why your code takes forever to run? Sometimes a simple code may take significant time because of an inefficient implementation approach. Let’s take a simple example of matrix multiplication, and explore the time and space complexity, specifically focusing on multiplying matrices where one of the matrices is formed as an outer product of a vector with itself.</p>
<p><img src="https://mrislambd.github.io/posts/matmul/matmul.jpeg" width="300" height="300"></p>
<p>Matrix multiplication is a fundamental operation in many areas such as computer graphics, machine learning, and scientific computing. Given two matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D">, the product <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAB%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBA%7D"> is a new matrix where each element is computed as the dot product of the corresponding row of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> and the column of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> or the other way around.</p>
<p>Consider the scenario where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is an outer product of a column vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D"> with itself, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BA%7D=%5Cmathbf%7Ba%7D%20%5Cmathbf%7Ba%7D%5ET&amp;=%5Cbegin%7Bpmatrix%7Da_1%5C%5Ca_2%5C%5C%5Cvdots%20%5C%5Ca_n%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7Da_1&amp;a_2&amp;%5Ccdots%20&amp;a_n%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;=%5Cbegin%7Bpmatrix%7D%0Aa_1a_1%20&amp;%20a_1a_2&amp;%20%5Ccdots%20&amp;a_1a_n%5C%5C%0Aa_2a_1&amp;%20a_2a_2&amp;%5Ccdots%20&amp;a_2a_n%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Aa_na_1%20&amp;%20a_na_2%20&amp;%5Ccdots&amp;%20a_na_n%5Cend%7Bpmatrix%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>Now simply, if <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> is another <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> matrix, then</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BBA%7D&amp;=%5Cbegin%7Bpmatrix%7D%0Ab_%7B11%7D%20&amp;%20b_%7B12%7D%20&amp;%20%5Ccdots%20&amp;%20b_%7B1n%7D%5C%5C%0Ab_%7B21%7D%20&amp;%20b_%7B22%7D%20&amp;%20%5Ccdots%20&amp;%20b_%7B2n%7D%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Ab_%7Bn1%7D%20&amp;%20b_%7Bn2%7D%20&amp;%20%5Ccdots%20&amp;%20b_%7Bnn%7D%5C%5C%0A%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7D%0Aa_1a_1%20&amp;%20a_1a_2&amp;%20%5Ccdots%20&amp;a_1a_n%5C%5C%0Aa_2a_1&amp;%20a_2a_2&amp;%5Ccdots%20&amp;a_2a_n%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Aa_na_1%20&amp;%20a_na_2%20&amp;%5Ccdots&amp;%20a_na_n%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Let’s analyze the complexity of this matrix matrix multiplication.</p>
<p><strong>Worst Case:</strong> The worst case scenario would be performing the multiplication naively without exploiting the rank-1 structure. How? When we compute any element in the resultant matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBA%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAB%7D"> we precisely perform <img src="https://latex.codecogs.com/png.latex?n"> multiplication and there are total <img src="https://latex.codecogs.com/png.latex?n%5E2"> elements to compute for a matrix of <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n">. This would result in the standard matrix multiplication time complexity of <img src="https://latex.codecogs.com/png.latex?O(n%5E3)">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BBA%7D&amp;=%5Cbegin%7Bpmatrix%7D%0Ab_%7B11%7Da_1a_1+%5Ccdots+b_%7B1n%7Da_na_1&amp;%20b_%7B11%7Da_1a_2+%5Ccdots+b_%7B1n%7Da_na_2%20&amp;%5Ccdots%20&amp;%0Ab_%7B11%7Da_1a_n+%5Ccdots+b_%7B1n%7Da_na_n%5C%5C%0Ab_%7B21%7Da_1a_1+%5Ccdots+b_%7B2n%7Da_na_1&amp;b_%7B21%7Da_1a_2+%5Ccdots+b_%7B2n%7Da_na_2%20&amp;%5Ccdots%20&amp;%0Ab_%7B21%7Da_1a_n+%5Ccdots+b_%7B2n%7Da_na_n%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%5Cddots%20&amp;%20%5Cvdots%5C%5C%0Ab_%7Bn1%7Da_1a_1+%5Ccdots+b_%7Bnn%7Da_na_1&amp;b_%7Bn1%7Da_1a_2+%5Ccdots+b_%7Bnn%7Da_na_2%20&amp;%5Ccdots%20&amp;%0Ab_%7Bn1%7Da_1a_n+%5Ccdots+b_%7Bnn%7Da_na_n%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p><strong>Best Case:</strong> The best case scenario in terms of time complexity occurs when we exploit the structure of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">. Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is a rank-1 matrix, we can simplify the multiplication: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BBA%7D&amp;=%5Cmathbf%7BB%7D%5Cbegin%7Bpmatrix%7D%0Aa_1a_1%20&amp;%20a_1a_2&amp;%20%5Ccdots%20&amp;a_1a_n%5C%5C%0Aa_2a_1&amp;%20a_2a_2&amp;%5Ccdots%20&amp;a_2a_n%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Aa_na_1%20&amp;%20a_na_2%20&amp;%5Ccdots&amp;%20a_na_n%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;%5C%5C%0A&amp;=%5Cmathbf%7BB%7D%5Cbegin%7Bpmatrix%7Da_1%20%5Cmathbf%7Ba%7D%20&amp;%20a_2%20%5Cmathbf%7Ba%7D%20&amp;%5Ccdots%20a_n%20%5Cmathbf%7Ba%7D%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;=%5Cbegin%7Bpmatrix%7Da_1%20%5Cmathbf%7BB%7D%5Cmathbf%7Ba%7D%20&amp;%20a_2%20%5Cmathbf%7BB%7D%5Cmathbf%7Ba%7D%20&amp;%5Ccdots%20a_n%20%5Cmathbf%7BB%7D%5Cmathbf%7Ba%7D%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;=%20(%5Cmathbf%7BBa%7D)%20a%5ET%0A%5Cend%7Balign*%7D%0A"></p>
<p>We break this algorithm in to two steps.</p>
<p>Step 1: Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> is a matrix of <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D"> is a matrix of <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%201">, therefore <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBa%7D"> is a matrix of size <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%201"> or just a vector of size <img src="https://latex.codecogs.com/png.latex?n">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BBa%7D&amp;=%5Cbegin%7Bpmatrix%7D%0Ab_%7B11%7D%20&amp;%20b_%7B12%7D%20&amp;%20%5Ccdots%20&amp;%20b_%7B1n%7D%5C%5C%0Ab_%7B21%7D%20&amp;%20b_%7B22%7D%20&amp;%20%5Ccdots%20&amp;%20b_%7B2n%7D%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Ab_%7Bn1%7D%20&amp;%20b_%7Bn2%7D%20&amp;%20%5Ccdots%20&amp;%20b_%7Bnn%7D%5C%5C%0A%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7Da_1%5C%5Ca_2%5C%5C%20%5Cvdots%20%5C%5Ca_n%20%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;%5C%5C%0A&amp;=%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20b_%7B11%7Da_1+b_%7B12%7Da_2+%5Ccdots%20b_%7B1n%7Da_n%5C%5C%0A%20%20%20%20b_%7B21%7Da_1+b_%7B22%7Da_2+%5Ccdots%20b_%7B2n%7Da_n%5C%5C%0A%20%20%20%20%5Cvdots%5C%5C%0A%20%20%20%20b_%7Bn1%7Da_1+b_%7Bn2%7Da_2+%5Ccdots%20b_%7Bnn%7Da_n%5C%5C%0A%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign*%7D%0A"> The matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBa%7D"> contains <img src="https://latex.codecogs.com/png.latex?n"> elements where each element takes <img src="https://latex.codecogs.com/png.latex?n"> multiplications. Thus, computing <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBa%7D"> takes <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> time.</p>
<p>Step 2: Next, we compute <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%7BBa%7D)%5Cmathbf%7Ba%7D%5ET">.<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A(%5Cmathbf%7BBa%7D)%5Cmathbf%7Ba%7D%5ET&amp;=%5Cbegin%7Bpmatrix%7Dba_1%5C%5C%20ba_2%5C%5C%20%5Cvdots%5C%5C%20ba_n%20%5Cend%7Bpmatrix%7D%0A%5Cbegin%7Bpmatrix%7Da_%7B1%7D&amp;%20a_%7B2%7D&amp;%20%5Ccdots%20a_%7Bn%7D%20%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;%5C%5C%0A&amp;=%5Cbegin%7Bpmatrix%7D%0A(ba_1)a_1%20&amp;%20(ba_1)a_2%20&amp;%5Ccdots%20&amp;(ba_1)a_n%5C%5C%0A(ba_2)a_1%20&amp;%20(ba_2)a_2%20&amp;%5Ccdots%20&amp;(ba_2)a_n%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A(ba_n)a_1%20&amp;%20(ba_n)a_2%20&amp;%5Ccdots%20&amp;(ba_n)a_n%5C%5C%0A%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign*%7D%0A"> Forming the outer product of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBa%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D%5ET"> also takes <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> time. Thus, the best case time complexity is <img src="https://latex.codecogs.com/png.latex?O(n%5E2)">.</p>
<p>Well, how about the other way around? What’s the optimal strategy for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAB%7D">? We can reach similar results in the following way <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BAB%7D&amp;=(%5Cmathbf%7Ba%7D%20%5Cmathbf%7Ba%7D%5ET)%20%5Cmathbf%7BB%7D%20=%20%5Cmathbf%7Ba%7D%20(%5Cmathbf%7Ba%7D%5ET%20%5Cmathbf%7BB%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Here, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D%5ET%20%5Cmathbf%7BB%7D"> is a row vector of size <img src="https://latex.codecogs.com/png.latex?n">. Computing <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D%5ET%20%5Cmathbf%7BB%7D"> takes <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> time. Then, multiplying the column vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D"> by the resulting row vector forms an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix, also in <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> time. Thus, the best case time complexity is <img src="https://latex.codecogs.com/png.latex?O(n%5E2)">. Note, that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAB%7D%5Cne%20%5Cmathbf%7BBA%7D">.</p>
<p><strong>Comparison:</strong> So, what’s the big difference? There is a significant difference in two algorithms. In the first algorithm the time complexity is <img src="https://latex.codecogs.com/png.latex?O(n%5E3)"> where as in the second algorithm the time complexity is <img src="https://latex.codecogs.com/png.latex?O(n%5E2)+O(n%5E2)"> or <img src="https://latex.codecogs.com/png.latex?2O(n%5E2)"> or just <img src="https://latex.codecogs.com/png.latex?C%5Chspace%7B1mm%7D%20O(n%5E2)">. For example, if <img src="https://latex.codecogs.com/png.latex?n=500"> then the first algorithm requires 125 million multiplications and the second one just takes 500,000 multiplications which is 250 times faster.</p>
<p>Understanding the structure of the matrices involved in multiplication can significantly optimize the performance of our code. By exploiting the rank-1 structure of the outer product matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D%20=%20%5Cmathbf%7Ba%7D%20%5Cmathbf%7Ba%7D%5ET">, we can reduce the time complexity from <img src="https://latex.codecogs.com/png.latex?O(n%5E3)"> to <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> in the best case scenario. This optimization can lead to considerable performance improvements, especially for large matrices.</p>
<p><strong>Space Complexity:</strong> Regardless of the case, the space complexity remains <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> since we need to store the resulting <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BBA%7D">.</p>
<p><strong>Python Code:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to perform naive matrix multiplication</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> naive_multiplication(B, a):</span>
<span id="cb1-6">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)</span>
<span id="cb1-7">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.outer(a, a)</span>
<span id="cb1-8">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n, n))</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-11">            result[i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(B[i, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A[k, j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n))</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to perform optimized matrix multiplication (exploiting rank-1 structure)</span></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> optimized_multiplication(B, a):</span>
<span id="cb1-16">    Ba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(B, a)</span>
<span id="cb1-17">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.outer(Ba, a)</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random vector a and matrix B</span></span>
<span id="cb1-21">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Size of the matrix and vector</span></span>
<span id="cb1-22">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(n)</span>
<span id="cb1-23">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(n, n)</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measure time for naive multiplication</span></span>
<span id="cb1-26">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb1-27">naive_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> naive_multiplication(B, a)</span>
<span id="cb1-28">naive_duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measure time for optimized multiplication</span></span>
<span id="cb1-31">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb1-32">optimized_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimized_multiplication(B, a)</span>
<span id="cb1-33">optimized_duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Naive Multiplication Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>naive_duration<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb1-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Optimized Multiplication Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>optimized_duration<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span></code></pre></div>
<section id="output" class="level2">
<h2 class="anchored" data-anchor-id="output">Output</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">Naive Multiplication Time: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.198208</span> seconds</span>
<span id="cb2-2">Optimized Multiplication Time: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001841</span> seconds</span></code></pre></div>
<p>What about when <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is not given as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D=%5Cmathbf%7Baa%7D%5ET"> (i.e., it’s not a rank-1 matrix)? We simply cannot exploit the same optimization based on the outer product. In this case, we have to use the general matrix multiplication approach, which typically has a time complexity of <img src="https://latex.codecogs.com/png.latex?O(n%5E3)"> for naive multiplication. However, there are optimized algorithms that can reduce the time complexity:</p>
<ol type="1">
<li>Strassen’s Algorithm: Reduces the time complexity to approximately <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B2.81%7D)"><br>
</li>
<li>Coppersmith-Winograd Algorithm: Further reduces the time complexity to approximately <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B2.376%7D)"><br>
</li>
<li>Parallel Algorithms: Use parallel computing techniques to perform matrix multiplication more efficiently.</li>
</ol>
<p>May be some other day we can talk about these algorithms.</p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0" nonce="6uoW7pC8"></script>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0" nonce="xi3MqdlY"></script>
<p><strong>Share on</strong></p>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/matmul/" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Fmatmul%2F&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/matmul/"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/matmul/" data-show-count="false">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/matmul/" data-width="650" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->

</section>

<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611532800000" data-listing-file-modified-sort="1742174289164" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="2" data-listing-word-count-sort="357">
<a href="../../posts/eigen/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/eigen/lin3.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Generalized eigenvectors and eigenspaces
</h5>
<div class="listing-reading-time card-text text-muted">
2 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Monday, January 25, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNTdG9jaGFzdGljJTIwR3JhZGllbnQlMjBEZXNjZW50JTJDT3B0aW1pemF0aW9u" data-listing-date-sort="1726704000000" data-listing-file-modified-sort="1742174289183" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="8" data-listing-word-count-sort="1473">
<a href="../../posts/sgd/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/sgd/sgd.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)
</h5>
<div class="listing-reading-time card-text text-muted">
8 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, September 19, 2024
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNDb21wdXRhdGlvbmFsJTIwTWF0aGVtYXRpY3MlMkNBbGdvcml0aG1pYyUyMENvbXBsZXhpdHklMkNQcm9ncmFtbWluZyUyQ0NvbXB1dGVyJTIwU2NpZW5jZQ==" data-listing-date-sort="1636416000000" data-listing-file-modified-sort="1742174289171" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="26" data-listing-word-count-sort="5076">
<a href="../../posts/lu/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/lu/lu.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
LU Factorization of a Full rank Matrix using Fortran
</h5>
<div class="listing-reading-time card-text text-muted">
26 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Tuesday, November 9, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2024,
  author = {Islam, Rafiq},
  title = {Matrix Multiplication: {Let’s} Make It Less Expensive!},
  date = {2024-07-01},
  url = {https://mrislambd.github.io/posts/matmul/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2024" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2024. <span>“Matrix Multiplication: Let’s Make It Less
Expensive!”</span> July 1, 2024. <a href="https://mrislambd.github.io/posts/matmul/">https://mrislambd.github.io/posts/matmul/</a>.
</div></div></section></div> ]]></description>
  <category>Data Science</category>
  <category>Machine Learning</category>
  <category>Computational Mathematics</category>
  <category>Algorithmic Complexity</category>
  <guid>https://mrislambd.github.io/posts/matmul/</guid>
  <pubDate>Mon, 01 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/matmul/matmul.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>LU Factorization of a Full rank Matrix using Fortran</title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/lu/</link>
  <description><![CDATA[ 




<pre class="{Fortran}"><code>! This program factors a full rank matrix A into lower triangular (or trapezoidal) L and upper
! triangular matrix U
program LU_decompostion
    implicit none
    !############# #################List of main program variable##################################
    integer::m,n
    ! m is the # of rows of the matrix that we are working with
    ! n is the # of columns that we are working with
    doubleprecision, allocatable,dimension(:,:)::A,A1
    ! A is the working matrix, A1 is the original matrix preserved to check correctness of factoring
    integer,allocatable,dimension(:):: P,Q
    ! P, Q are the row and column permutation vectors for partial and complete pivoting
    character::method
    !################################################################################################

    ! ############################ Open an Input Data File###########################################
    open(unit=1,file=&amp;quot;data.txt&amp;quot;)
    ! ###############################################################################################

    ! ################################# Read m, n of the matrix A ###################################
    write(*,*)&amp;quot;Input the number of rows of the matrix A, m&amp;quot;
    read(*,*) m
    write(*,*)&amp;quot;Input the number of columns of the matrix A, n&amp;quot;
    read(*,*)n
    ! ##############################################################################################

    ! ########################### Allocate Space ###################################################
    allocate(A(m,n),A1(m,n),P(m),Q(n))
    ! ##############################################################################################

    ! Create the matrix A
    print*,
    call matrixA(m,n,A,A1)
    print*,

    !##################################### Choose the method #######################################
    print*,&amp;quot;What method you want to apply?&amp;quot;
    print*,&amp;quot;For No Pivot input: N&amp;quot;
    print*, &amp;quot;For Partial Pivot input: P&amp;quot;
    print*, &amp;quot;For Complete Pivot input: C&amp;quot;
    read(*,*) method
    !###############################################################################################

    ! ############################### Execution of the methods #####################################
    IF(method.eq.&amp;quot;C&amp;quot;.or.method.eq.&amp;quot;c&amp;quot;) THEN
        print*, &amp;quot;Complete Pivoting method has been selected&amp;quot;
        print*,
        call completePivot(m,n,A,A1,P,Q)
    ELSE IF(method.eq.&amp;quot;P&amp;quot;.or.method.eq.&amp;quot;p&amp;quot;) then
        print*,&amp;quot;Partial Pivoting method has been selected&amp;quot;
        print*,
        call partialPivot(m,n,A,A1,P)
    ELSE IF (method.eq.&amp;quot;N&amp;quot;.or.method.eq.&amp;quot;n&amp;quot;) then
        print*, &amp;quot;No Pivoting method has been selected&amp;quot;
        print*,
        call noPivot(m,n,A,A1)
    END IF

end program

subroutine matrixA(m,n,A,A1)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    integer::i
    print*,
    print*, &amp;quot;This is the provided working matrix&amp;quot;
    print*
    do i=1,m
        read(1,*)A(i,:)
        A1(i,:)=A(i,:)
        print*,A(i,:)
    end do
    do i=1,n
        IF(A(i,i)==0) then
            print*,&amp;quot;A 0 entry was found in the main diagonal.&amp;quot;
            print*, &amp;quot;Therefore, pivoting is a must required&amp;quot;
        else if(A(i,i).lt.0.0001) then
            print*, &amp;quot;WARNING!! Diagonal Element is too small.&amp;quot;
        END IF
    end do
end subroutine

subroutine completePivot(m,n,A,A1,P,Q)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    integer,dimension(m),intent(out)::P
    integer,dimension(n),intent(out)::Q
    integer::i,j,k,row,col
    doubleprecision::temp

    do k=1,n
       call max_val(A,m,n,k,row,col)
       do i=k,n
            temp=A(i,col)
            A(i,col)=A(i,k)
            A(i,k)=temp
        end do
        Q(k)=col
        do j=k,n
            temp=A(k,j)
            A(k,j)=A(row,j)
            A(row,j)=temp
        end do
        P(k)=row

        A(k+1:n,k)=A(k+1:n,k)/A(k,k)
        do j=k+1,n
            do i=k+1,n
                A(i,j)=A(i,j)-A(i,k)*A(k,j)
            end do
        end do
    end do
    print*,
    print*,&amp;quot;------------------------------------------------------&amp;quot;
    print*,&amp;quot;         Complete Pivot A=LU factorized array&amp;quot;
    print*,&amp;quot;-------------------------------------------------------&amp;quot;
    print*,
    do i=1,m
        print*,A(i,:)
    end do
    print*,
    print*, &amp;quot;Permutation vector P=(&amp;quot;,(P(i),i=1,m-1),&amp;quot;)&amp;quot;
    print*,
    print*, &amp;quot;Permutation vector Q=(&amp;quot;,(Q(i),i=1,n-1),&amp;quot;)&amp;quot;
    print*,
    print*,&amp;quot;*******************************************************&amp;quot;
    print*,&amp;quot;       Checking Correctness of the factorization&amp;quot;
    print*,&amp;quot;*******************************************************&amp;quot;
    print*,
    call CheckingCompletePivot(m,n,A,A1)

end subroutine


subroutine CheckingCompletePivot(m,n,A,A1)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    doubleprecision,dimension(n,n):: U
    doubleprecision,dimension(m,n)::L,A2
    integer::i,j

    do i=1,m
        do j=1,n
            if(i.le.j)then
                L(i,j)=0
            else if (i.gt.j) then
                L(i,j)=A(i,j)
            end if
            L(i,i)=1
        end do
    end do
    do i=1,n
        do j=1,n
            if(i.le.j)then
                U(i,j)=A(i,j)
            else
                U(i,j)=0.0
            end if
        end do
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;  Complete Pivot Upper triangular matrix U&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,n
        print*,U(i,:)
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;  Complete Pivot Lower triangular matrix L&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,m
        print*,L(i,:)
    end do

    A2=matmul(L,U)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;              Product of L U=&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,m
        print*,A2(i,:)
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;  Factoring Accuracy with the Frobenius-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,Frobenius(m,n,A1-A2)/Frobenius(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, Frobenius(m,n,matmul(abs(L),abs(U)))/Frobenius(m,n,A1)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;     Factoring Accuracy with the 1-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,norm1(m,n,A1-A2)/norm1(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, norm1(m,n,matmul(abs(L),abs(U)))/norm1(m,n,A1)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;     Factoring Accuracy with the Infinity-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,infinityNorm(m,n,A1-A2)/infinityNorm(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, infinityNorm(m,n,matmul(abs(L),abs(U)))/infinityNorm(m,n,A1)
end subroutine

subroutine partialPivot(m,n,A,A1,P)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    integer,dimension(m),intent(out)::P
    integer::i,j,k,row
    doubleprecision::temp

    do k=1,n
       call max_valP(A,m,n,k,row)
        do j=k,n
            temp=A(k,j)
            A(k,j)=A(row,j)
            A(row,j)=temp
        end do
        P(k)=row

        A(k+1:n,k)=A(k+1:n,k)/A(k,k)
        do j=k+1,n
            do i=k+1,n
                A(i,j)=A(i,j)-A(i,k)*A(k,j)
            end do
        end do
    end do
    print*,
    print*,&amp;quot;------------------------------------------------------&amp;quot;
    print*,&amp;quot;          Partial Pivot A=LU factorized array&amp;quot;
    print*,&amp;quot;-------------------------------------------------------&amp;quot;
    print*,
    do i=1,m
        print*,A(i,:)
    end do
    print*,
    print*, &amp;quot;Permutation vector P=(&amp;quot;,(P(i),i=1,m-1),&amp;quot;)&amp;quot;
    print*,
    print*,&amp;quot;*******************************************************&amp;quot;
    print*,&amp;quot;       Checking Correctness of the factorization&amp;quot;
    print*,&amp;quot;*******************************************************&amp;quot;
    print*,
    call CheckingPartialPivot(m,n,A,A1)
end subroutine

subroutine CheckingPartialPivot(m,n,A,A1)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    doubleprecision,dimension(n,n):: U
    doubleprecision,dimension(m,n)::L,A2
    integer::i,j

    do i=1,m
        do j=1,n
            if(i.le.j)then
                L(i,j)=0
            else if (i.gt.j) then
                L(i,j)=A(i,j)
            end if
            L(i,i)=1
        end do
    end do
    do i=1,n
        do j=1,n
            if(i.le.j)then
                U(i,j)=A(i,j)
            else
                U(i,j)=0.0
            end if
        end do
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;  Partial Pivot Upper triangular matrix U&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,n
        print*,U(i,:)
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;  Partial Pivot Lower triangular matrix L&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,m
        print*,L(i,:)
    end do

    A2=matmul(L,U)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;       Partial Pivot Product of L U=&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,m
        print*,A2(i,:)
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot; Factoring Accuracy with the Frobenius-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,Frobenius(m,n,A1-A2)/Frobenius(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, Frobenius(m,n,matmul(abs(L),abs(U)))/Frobenius(m,n,A1)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;     Factoring Accuracy with the 1-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,norm1(m,n,A1-A2)/norm1(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, norm1(m,n,matmul(abs(L),abs(U)))/norm1(m,n,A1)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;     Factoring Accuracy with the Infinity-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,infinityNorm(m,n,A1-A2)/infinityNorm(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, infinityNorm(m,n,matmul(abs(L),abs(U)))/infinityNorm(m,n,A1)
end subroutine

subroutine noPivot(m,n,A,A1)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    integer::i,j,k

    do k=1,n
        A(k+1:n,k)=A(k+1:n,k)/A(k,k)
        do j=k+1,n
            do i=k+1,n
                A(i,j)=A(i,j)-A(i,k)*A(k,j)
            end do
        end do
    end do
    print*,
    print*,&amp;quot;------------------------------------------------------&amp;quot;
    print*,&amp;quot;          No Pivot A=LU factorized array&amp;quot;
    print*,&amp;quot;-------------------------------------------------------&amp;quot;
    print*,
    do i=1,m
        print*,A(i,:)
    end do
    print*,
    print*,&amp;quot;*******************************************************&amp;quot;
    print*,&amp;quot;       Checking Correctness of the factorization&amp;quot;
    print*,&amp;quot;*******************************************************&amp;quot;
    print*,
    call CheckingNoPivot(m,n,A,A1)
end subroutine

subroutine CheckingNoPivot(m,n,A,A1)
    integer,intent(in)::m,n
    doubleprecision,dimension(m,n),intent(inout)::A,A1
    doubleprecision,dimension(n,n):: U
    doubleprecision,dimension(m,n)::L,A2
    integer::i,j

    do i=1,m
        do j=1,n
            if(i.le.j)then
                L(i,j)=0
            else if (i.gt.j) then
                L(i,j)=A(i,j)
            end if
            L(i,i)=1
        end do
    end do
    do i=1,n
        do j=1,n
            if(i.le.j)then
                U(i,j)=A(i,j)
            else
                U(i,j)=0.0
            end if
        end do
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;  No Pivot Upper triangular matrix U&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,n
        print*,U(i,:)
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;  No Pivot Lower triangular matrix L&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,m
        print*,L(i,:)
    end do

    A2=matmul(L,U)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,&amp;quot;       No Pivot Product of L U=&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    do i=1,m
        print*,A2(i,:)
    end do
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;  Factoring Accuracy with the Frobenius Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,Frobenius(m,n,A1-A2)/Frobenius(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, Frobenius(m,n,matmul(abs(L),abs(U)))/Frobenius(m,n,A1)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;     Factoring Accuracy with the 1-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,norm1(m,n,A1-A2)/norm1(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, norm1(m,n,matmul(abs(L),abs(U)))/norm1(m,n,A1)
    print*,
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*, &amp;quot;     Factoring Accuracy with the Infinity-Norm&amp;quot;
    print*, &amp;#39;----------------------------------------------&amp;#39;
    print*,
    print*,&amp;quot;Relative Error=&amp;quot;,infinityNorm(m,n,A1-A2)/infinityNorm(m,n,A1)
    print*
    print*, &amp;quot;Growth Factor=&amp;quot;, infinityNorm(m,n,matmul(abs(L),abs(U)))/infinityNorm(m,n,A1)
end subroutine

subroutine max_val(A,m,n,k,row,col)
    implicit none
    integer,intent(in)::m,n,k
    integer,intent(out)::row,col
    doubleprecision,dimension(m,n),intent(inout)::A
    doubleprecision::maximum
    integer::i,j

    maximum=maxval(A(k:m,k:n))

    do i=k,m
        do j=k,n
            if(A(i,j)==maximum) then
                row=i
                col=j
                goto 100
            end if
        end do
    end do
100 end subroutine

subroutine max_valP(A,m,n,k,row)
    implicit none
    integer,intent(in)::m,n,k
    integer,intent(out)::row
    doubleprecision,dimension(m,n),intent(inout)::A
    doubleprecision::maximum
    integer::i,j

    maximum=maxval(A(k:m,k))

    do i=k,m
        if(A(i,k)==maximum) then
            row=i
            goto 101
        end if
    end do
101 end subroutine


function norm1(m,n,A)
    integer::m,n,i,j
    doubleprecision,dimension(m,n)::A
    doubleprecision,dimension(n):: normvector
    doubleprecision::normval

    normval=0
    do j=1,n
        do i=1,m
            normval=normval+abs(A(i,j))
        end do
        normvector(j)=normval
    end do
    norm1=maxval(normvector(1:n))
    return
end function

function infinityNorm(m,n,A)
    integer::m,n,i,j
    doubleprecision,dimension(m,n)::A
    doubleprecision,dimension(n):: normvector
    doubleprecision:: normval

    normval=0
    do j=1,n
        do i=1,m
            normval=normval+abs(A(i,j))
            normvector(j)=normval
        end do
    end do
    infinityNorm=maxval(normvector(1:m))
    return
end function

function Frobenius(m,n,A)
    integer::m,n,i,j
    doubleprecision,dimension(m,n)::A
    doubleprecision:: normval

    normval=0
    do i=1,m
        do j=1,n
            normval=normval+(abs(A(i,j)))**2
        end do
    end do
    Frobenius=sqrt(normval)
    return
end function</code></pre>
<section id="no-pivot" class="level2">
<h2 class="anchored" data-anchor-id="no-pivot">No Pivot</h2>
<pre class="{Fortran}"><code>Input Matrix (Stored in a data file in the same directory where the program file .f90 located)
8 2 9
4 9 4
6 7 9

Comand prompt: 
 Input the number of rows of the matrix A, m
3
 Input the number of columns of the matrix A, n
3


 This is the provided working matrix

   8.0000000000000000        2.0000000000000000        9.0000000000000000
   4.0000000000000000        9.0000000000000000        4.0000000000000000
   6.0000000000000000        7.0000000000000000        9.0000000000000000

 What method you want to apply?
 For No Pivot input: N
 For Partial Pivot input: P
 For Complete Pivot input: C
n
 No Pivoting method has been selected


 ------------------------------------------------------
           No Pivot A=LU factorized array
 -------------------------------------------------------

   8.0000000000000000        2.0000000000000000        9.0000000000000000
  0.50000000000000000        8.0000000000000000      -0.50000000000000000
  0.75000000000000000       0.68750000000000000        2.5937500000000000

 *******************************************************
        Checking Correctness of the factorization
 *******************************************************


 ----------------------------------------------
   No Pivot Upper triangular matrix U
 ----------------------------------------------

   8.0000000000000000        2.0000000000000000        9.0000000000000000
   0.0000000000000000        8.0000000000000000      -0.50000000000000000
   0.0000000000000000        0.0000000000000000        2.5937500000000000

 ----------------------------------------------
   No Pivot Lower triangular matrix L
 ----------------------------------------------

   1.0000000000000000        0.0000000000000000        0.0000000000000000
  0.50000000000000000        1.0000000000000000        0.0000000000000000
  0.75000000000000000       0.68750000000000000        1.0000000000000000

 ----------------------------------------------
        No Pivot Product of L U=
 ----------------------------------------------

   8.0000000000000000        2.0000000000000000        9.0000000000000000
   4.0000000000000000        9.0000000000000000        4.0000000000000000
   6.0000000000000000        7.0000000000000000        9.0000000000000000

 ----------------------------------------------
   Factoring Accuracy with the Frobenius Norm
 ----------------------------------------------

 Relative Error=   0.00000000

 Growth Factor=   1.02520537

 ----------------------------------------------
      Factoring Accuracy with the 1-Norm
 ----------------------------------------------

 Relative Error=           0

 Growth Factor=           1

 ----------------------------------------------
      Factoring Accuracy with the Infinity-Norm
 ----------------------------------------------

 Relative Error=           0

 Growth Factor=           1</code></pre>
</section>
<section id="partial-pivot" class="level2">
<h2 class="anchored" data-anchor-id="partial-pivot">Partial Pivot</h2>
<pre class="{Fortran}"><code>Input Matrix (Stored in a data file in the same directory where the program file .f90 located)
1 2 4
2 1 3
3 2 4

Comand Prompt: 
 Input the number of rows of the matrix A, m
3
 Input the number of columns of the matrix A, n
3


 This is the provided working matrix

   1.0000000000000000        2.0000000000000000        4.0000000000000000
   2.0000000000000000        1.0000000000000000        3.0000000000000000
   3.0000000000000000        2.0000000000000000        4.0000000000000000

 What method you want to apply?
 For No Pivot input: N
 For Partial Pivot input: P
 For Complete Pivot input: C
p
 Partial Pivoting method has been selected


 ------------------------------------------------------
           Partial Pivot A=LU factorized array
 -------------------------------------------------------

   3.0000000000000000        2.0000000000000000        4.0000000000000000
  0.66666666666666663        1.3333333333333335        2.6666666666666670
  0.33333333333333331      -0.24999999999999992        1.0000000000000000

 Permutation vector P=(           3           3 )

 *******************************************************
        Checking Correctness of the factorization
 *******************************************************


 ----------------------------------------------
   Partial Pivot Upper triangular matrix U
 ----------------------------------------------

   3.0000000000000000        2.0000000000000000        4.0000000000000000
   0.0000000000000000        1.3333333333333335        2.6666666666666670
   0.0000000000000000        0.0000000000000000        1.0000000000000000

 ----------------------------------------------
   Partial Pivot Lower triangular matrix L
 ----------------------------------------------

   1.0000000000000000        0.0000000000000000        0.0000000000000000
  0.66666666666666663        1.0000000000000000        0.0000000000000000
  0.33333333333333331      -0.24999999999999992        1.0000000000000000

 ----------------------------------------------
        Partial Pivot Product of L U=
 ----------------------------------------------

   3.0000000000000000        2.0000000000000000        4.0000000000000000
   2.0000000000000000        2.6666666666666670        5.3333333333333339
   1.0000000000000000       0.33333333333333337        1.6666666666666667

 ----------------------------------------------
  Factoring Accuracy with the Frobenius-Norm
 ----------------------------------------------

 Relative Error=  0.618016541

 Growth Factor=   1.11492395

 ----------------------------------------------
      Factoring Accuracy with the 1-Norm
 ----------------------------------------------

 Relative Error=           0

 Growth Factor=           1

 ----------------------------------------------
      Factoring Accuracy with the Infinity-Norm
 ----------------------------------------------

 Relative Error=           0

 Growth Factor=           1</code></pre>
</section>
<section id="complete-pivot" class="level2">
<h2 class="anchored" data-anchor-id="complete-pivot">Complete Pivot</h2>
<pre class="{Fortran}"><code>Input Matrix (Stored in a data file in the same directory where the program file .f90 located)
  
2 3 4
4 7 5
4 9 5

Command Prompt:
 Input the number of rows of the matrix A, m
3
 Input the number of columns of the matrix A, n
3


 This is the provided working matrix

   2.0000000000000000        3.0000000000000000        4.0000000000000000
   4.0000000000000000        7.0000000000000000        5.0000000000000000
   4.0000000000000000        9.0000000000000000        5.0000000000000000

 What method you want to apply?
 For No Pivot input: N
 For Partial Pivot input: P
 For Complete Pivot input: C
c
 Complete Pivoting method has been selected


 ------------------------------------------------------
          Complete Pivot A=LU factorized array
 -------------------------------------------------------

   9.0000000000000000        4.0000000000000000        5.0000000000000000
  0.77777777777777779        2.3333333333333335       0.66666666666666674
  0.33333333333333331       0.47619047619047616       0.57142857142857140

 Permutation vector P=(           3           3 )

 Permutation vector Q=(           2           3 )

 *******************************************************
        Checking Correctness of the factorization
 *******************************************************


 ----------------------------------------------
   Complete Pivot Upper triangular matrix U
 ----------------------------------------------

   9.0000000000000000        4.0000000000000000        5.0000000000000000
   0.0000000000000000        2.3333333333333335       0.66666666666666674
   0.0000000000000000        0.0000000000000000       0.57142857142857140

 ----------------------------------------------
   Complete Pivot Lower triangular matrix L
 ----------------------------------------------

   1.0000000000000000        0.0000000000000000        0.0000000000000000
  0.77777777777777779        1.0000000000000000        0.0000000000000000
  0.33333333333333331       0.47619047619047616        1.0000000000000000

 ----------------------------------------------
               Product of L U=
 ----------------------------------------------

   9.0000000000000000        4.0000000000000000        5.0000000000000000
   7.0000000000000000        5.4444444444444446        4.5555555555555554
   3.0000000000000000        2.4444444444444442        2.5555555555555554

 ----------------------------------------------
   Factoring Accuracy with the Frobenius-Norm
 ----------------------------------------------

 Relative Error=  0.683437467

 Growth Factor=   1.00393677

 ----------------------------------------------
      Factoring Accuracy with the 1-Norm
 ----------------------------------------------

 Relative Error=           0

 Growth Factor=           1

 ----------------------------------------------
      Factoring Accuracy with the Infinity-Norm
 ----------------------------------------------

 Relative Error=           0

 Growth Factor=           1</code></pre>
<p><strong>Share on</strong></p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0"></script>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/lu/" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Flu%2F&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/lu/"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/lu/" data-show-count="true">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/lu/" data-width="" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->

</section>

<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611532800000" data-listing-file-modified-sort="1742174289164" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="2" data-listing-word-count-sort="357">
<a href="../../posts/eigen/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/eigen/lin3.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Generalized eigenvectors and eigenspaces
</h5>
<div class="listing-reading-time card-text text-muted">
2 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Monday, January 25, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNTdG9jaGFzdGljJTIwR3JhZGllbnQlMjBEZXNjZW50JTJDT3B0aW1pemF0aW9u" data-listing-date-sort="1726704000000" data-listing-file-modified-sort="1742174289183" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="8" data-listing-word-count-sort="1473">
<a href="../../posts/sgd/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/sgd/sgd.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)
</h5>
<div class="listing-reading-time card-text text-muted">
8 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, September 19, 2024
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611187200000" data-listing-file-modified-sort="1742174289174" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="3" data-listing-word-count-sort="580">
<a href="../../posts/matrixrep/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/matrixrep/lin2.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Matrix Representation: Change of Basis
</h5>
<div class="listing-reading-time card-text text-muted">
3 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, January 21, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2021,
  author = {Islam, Rafiq},
  title = {LU {Factorization} of a {Full} Rank {Matrix} Using {Fortran}},
  date = {2021-11-09},
  url = {https://mrislambd.github.io/posts/lu/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2021" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2021. <span>“LU Factorization of a Full Rank Matrix Using
Fortran.”</span> November 9, 2021. <a href="https://mrislambd.github.io/posts/lu/">https://mrislambd.github.io/posts/lu/</a>.
</div></div></section></div> ]]></description>
  <category>Data Science</category>
  <category>Machine Learning</category>
  <category>Computational Mathematics</category>
  <category>Algorithmic Complexity</category>
  <category>Programming</category>
  <category>Computer Science</category>
  <guid>https://mrislambd.github.io/posts/lu/</guid>
  <pubDate>Tue, 09 Nov 2021 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/lu/lu.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Modeling viral disease</title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/mathbiology/</link>
  <description><![CDATA[ 




<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6878992848042528" crossorigin="anonymous"></script>
<p>Consider the spreading of a highly communicable disease on an isolated island with population size <img src="https://latex.codecogs.com/png.latex?N">. A portion of the population travels abroad and returns to the island infected with the disease. You would like to predict the number of people <img src="https://latex.codecogs.com/png.latex?X"> who will have been infected by some time <img src="https://latex.codecogs.com/png.latex?t">. Consider the following model, where <img src="https://latex.codecogs.com/png.latex?k%20%3E%200"> is constant:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation*%7D%0A%20%20%5Cfrac%7BdX%7D%7Bdt%7D=k%5Ctextcolor%7Bred%7D%7BX%7D(N-X)%0A%5Cend%7Bequation*%7D"></p>
<ol type="a">
<li>List two major assumptions implicit in the preceding model. How reasonable are your assumptions?<br>
<strong>Answer</strong>: Here are two major assumptions:<br>
</li>
</ol>
<ol type="1">
<li><p><em>Fixed population</em> <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> <em>all infected</em>. We assume the population size remain unchanged that is no one gets in the island or no one gets out of the island. This will lead everyone affected by the disease eventually.</p></li>
<li><p><em>No immediate cure or vaccination</em>. We also assume that there is no immediate hard immunity build up among the population or invention of vaccination.</p></li>
</ol>
<ol start="2" type="a">
<li>Graph <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdX%7D%7Bdt%7D"> versus <img src="https://latex.codecogs.com/png.latex?X"></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="b1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Photo"><img src="https://mrislambd.github.io/posts/mathbiology/b1.png" class="img-fluid figure-img" alt="Photo"></a></p>
<figcaption>Photo</figcaption>
</figure>
</div>
<ol start="3" type="a">
<li>Graph <img src="https://latex.codecogs.com/png.latex?X"> versus <img src="https://latex.codecogs.com/png.latex?t"> if the initial number of infections is <img src="https://latex.codecogs.com/png.latex?X_1%20%3C%20%5Cfrac%7BN%7D%7B2%7D">. Graph <img src="https://latex.codecogs.com/png.latex?X"> versus <img src="https://latex.codecogs.com/png.latex?t"> if the initial number of infections is <img src="https://latex.codecogs.com/png.latex?X_2%20%3E%5Cfrac%7BN%7D%7B2%7D">.<br>
<strong>Answer:</strong> For equilibrium of the model</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%20%20f(X)&amp;=kX(N-X)=0%5C%5C%0A%20%20%5Cimplies%20kX&amp;=0%20&amp;%20N-X=0%5C%5C%0A%20%20%5Cimplies%20X=&amp;0%20%20&amp;%20X=N%0A%5Cend%7Balign*%7D"> For the stability analysis:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0Af(X)&amp;=(kN)X-kX%5E2%20&amp;%20%5Cimplies%20f'(X)=kN-2kX%0A%5Cend%7Balign*%7D"></p>
<p>Now, <img src="https://latex.codecogs.com/png.latex?f'(0)=kN%3E0"> therefore, <img src="https://latex.codecogs.com/png.latex?X=0"> is an unstable equilibrium. And <img src="https://latex.codecogs.com/png.latex?f'(N)=kN-2kN=-kN%3C0"> since <img src="https://latex.codecogs.com/png.latex?k,%20N%3E0">. So, <img src="https://latex.codecogs.com/png.latex?X=N"> is a stable equilibrium.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="b2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="equilibrium"><img src="https://mrislambd.github.io/posts/mathbiology/b2.png" class="img-fluid figure-img" alt="equilibrium"></a></p>
<figcaption>equilibrium</figcaption>
</figure>
</div>
<p>If the initial infection <img src="https://latex.codecogs.com/png.latex?X_1%3C%5Cfrac%7BN%7D%7B2%7D"> it might decrease and reach to 0 but that is not a stable equilibrium. So eventually it will hit <img src="https://latex.codecogs.com/png.latex?N">.</p>
<ol start="4" type="a">
<li>Solve the model given earlier for <img src="https://latex.codecogs.com/png.latex?X"> as a function of <img src="https://latex.codecogs.com/png.latex?t">.<br>
<strong>Answer:</strong> Solving the ODE we have</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%20%20%5Cfrac%7BdX%7D%7Bdt%7D&amp;=kX(N-X)%5C%5C%0A%20%20%5Ctext%7BSince%7D%5Chspace%7B2mm%7D%20X&amp;%3E0%5C%5C%0A%20%20%5Cfrac%7BdX%7D%7BX(N-X)%7D&amp;=kdt%5C%5C%0A%20%20%5Cimplies%20%5Cint%20%5Cfrac%7BdX%7D%7BX(N-X)%7D&amp;=%5Cint%20kdt%5C%5C%0A%20%20%5Cimplies%20%5Cfrac%7B1%7D%7BN%7D%5Cint%20%5Cleft(%5Cfrac%7B1%7D%7BX%7D+%5Cfrac%7B1%7D%7BN-X%7D%5Cright)dX&amp;=%20%5Cint%20kdt%5C%5C%0A%20%20%5Cimplies%20%5Cfrac%7B1%7D%7BN%7D%20%5Cln%5Cleft(%5Cfrac%7BX%7D%7BN-X%7D%5Cright)&amp;=kt+c%5C%5C%0A%20%20%5Cimplies%20%5Cln%5Cleft(%5Cfrac%7BX%7D%7BN-X%7D%5Cright)&amp;=Nkt+Nc%5C%5C%0A%20%20%5Cimplies%20%5Cfrac%7BX%7D%7BN-X%7D&amp;=e%5E%7BNkt+Nc%7D%5C%5C%0A%20%20%5Cimplies%20X&amp;=Ne%5E%7BNkt+Nc%7D-Xe%5E%7BNkt+Nc%7D%5C%5C%0A%20%20%5Cimplies%20X%5Cleft(1+e%5E%7BNkt+Nc%7D%5Cright)&amp;=Ne%5E%7BNkt+Nc%7D%5C%5C%0A%20%20%5Cimplies%20X(t)&amp;=%5Cfrac%7BNe%5E%7BNkt+Nc%7D%7D%7B1+e%5E%7BNkt+Nc%7D%7D%5C%5C%0A%20%20%5Cimplies%20X(t)&amp;=%5Cfrac%7BN%7D%7B1+e%5E%7B-(Nkt+Nc)%7D%7D%0A%5Cend%7Balign*%7D"></p>
<ol start="5" type="a">
<li>From part (d), find the limit of <img src="https://latex.codecogs.com/png.latex?X"> as <img src="https://latex.codecogs.com/png.latex?t"> approaches infinity.<br>
<strong>Answer:</strong></li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Clim_%7Bt%5Clongrightarrow%20%5Cinfty%7D%20X(t)&amp;=%5Clim_%7Bt%5Clongrightarrow%20%5Cinfty%7D%20%5Cfrac%7BN%7D%7B1+e%5E%7B-(Nkt+Nc)%7D%7D=N%0A%5Cend%7Balign*%7D"></p>
<ol start="6" type="a">
<li>Consider an island with a population of <img src="https://latex.codecogs.com/png.latex?5000">. At various times during the epidemic the number of people infected was recorded as follows:</li>
</ol>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?t"> (days)</th>
<th style="text-align: center;">2</th>
<th style="text-align: right;">6</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?X"> (People infected)</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?1887"></td>
<td style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?4087"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?%5Cln%7B%5Cleft(%5Cfrac%7BX%7D%7BN-X%7D%5Cright)%7D"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?-0.5"></td>
<td style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?1.5"></td>
</tr>
</tbody>
</table>
<p>Do the collected data support the given model?<br>
<strong>Answer:</strong> If we look at part (d) we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cln%5Cleft(%5Cfrac%7BX%7D%7BN-X%7D%5Cright)&amp;=Nkt+Nc%20&amp;%20%5Ctext(And),%5C%5C%0AX(t)&amp;=%5Cfrac%7BN%7D%7B1+e%5E%7B-(Nkt+Nc)%7D%7D%0A%5Cend%7Balign*%7D"></p>
<p>So we get if <img src="https://latex.codecogs.com/png.latex?2Nk+Nc=-0.5"> then <img src="https://latex.codecogs.com/png.latex?X(2)=%5Cfrac%7B5000%7D%7B1+e%5E%7B0.5%7D%7D=1887.703">, if <img src="https://latex.codecogs.com/png.latex?6Nk+Nc=1.5"> then <img src="https://latex.codecogs.com/png.latex?X(6)=%5Cfrac%7B5000%7D%7Be%5E%7B-1.5%7D%7D=4087.87">, and if <img src="https://latex.codecogs.com/png.latex?10Nk+Nc=3.5"> then <img src="https://latex.codecogs.com/png.latex?X(10)=%5Cfrac%7B5000%7D%7Be%5E%7B-3.5%7D%7D=4853.44"><br>
Therefore, the collected data supports the model.</p>
<ol start="7" type="a">
<li>Use the results in part (f) to estimate the constants in the model, and predict the number of people who will be infected by <img src="https://latex.codecogs.com/png.latex?t%20=%2012"> days.<br>
<strong>Answer:</strong> We have</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A2Nk+Nc&amp;=-0.5%5C%5C%0A6Nk+Nc&amp;=1.5%0A%5Cend%7Balign*%7D"></p>
<p>Solving the above system we have <img src="https://latex.codecogs.com/png.latex?k=%5Cfrac%7B1%7D%7B2N%7D"> and <img src="https://latex.codecogs.com/png.latex?c=%5Cfrac%7B-1.5%7D%7BN%7D">. If we substitute these values in the solution we got in part (d) we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%20%20X(t)&amp;=%5Cfrac%7BN%7D%7B1+e%5E%7B-%5Cleft(%5Cfrac%7Bt%7D%7B2%7D-1.5%5Cright)%7D%7D%0A%5Cend%7Balign*%7D"><br>
So, <img src="https://latex.codecogs.com/png.latex?X(12)%5Capprox%204945"></p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0" nonce="LLmYyE8W"></script>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0" nonce="xi3MqdlY"></script>
<p><strong>Share on</strong></p>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/mathbiology/" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Fmathbiology%2F&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/mathbiology/"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/mathbiology/" data-show-count="false">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/mathbiology/" data-width="650" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->


<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611532800000" data-listing-file-modified-sort="1742174289164" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="2" data-listing-word-count-sort="357">
<a href="../../posts/eigen/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/eigen/lin3.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Generalized eigenvectors and eigenspaces
</h5>
<div class="listing-reading-time card-text text-muted">
2 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Monday, January 25, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNTdG9jaGFzdGljJTIwR3JhZGllbnQlMjBEZXNjZW50JTJDT3B0aW1pemF0aW9u" data-listing-date-sort="1726704000000" data-listing-file-modified-sort="1742174289183" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="8" data-listing-word-count-sort="1473">
<a href="../../posts/sgd/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/sgd/sgd.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)
</h5>
<div class="listing-reading-time card-text text-muted">
8 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, September 19, 2024
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNDb21wdXRhdGlvbmFsJTIwTWF0aGVtYXRpY3MlMkNBbGdvcml0aG1pYyUyMENvbXBsZXhpdHklMkNQcm9ncmFtbWluZyUyQ0NvbXB1dGVyJTIwU2NpZW5jZQ==" data-listing-date-sort="1636416000000" data-listing-file-modified-sort="1742174289171" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="26" data-listing-word-count-sort="5076">
<a href="../../posts/lu/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/lu/lu.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
LU Factorization of a Full rank Matrix using Fortran
</h5>
<div class="listing-reading-time card-text text-muted">
26 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Tuesday, November 9, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2021,
  author = {Islam, Rafiq},
  title = {Modeling Viral Disease},
  date = {2021-02-23},
  url = {https://mrislambd.github.io/posts/mathbiology/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2021" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2021. <span>“Modeling Viral Disease.”</span> February 23,
2021. <a href="https://mrislambd.github.io/posts/mathbiology/">https://mrislambd.github.io/posts/mathbiology/</a>.
</div></div></section></div> ]]></description>
  <category>Applied Mathematics</category>
  <category>Math Biology</category>
  <category>Mathematical Modeling</category>
  <guid>https://mrislambd.github.io/posts/mathbiology/</guid>
  <pubDate>Tue, 23 Feb 2021 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/mathbiology/b1.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Generalized eigenvectors and eigenspaces</title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/eigen/</link>
  <description><![CDATA[ 




<p>
Definition: Let <img src="https://latex.codecogs.com/png.latex?%5Calpha%5Cin%20End(V)"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%5Cin%20spec(%5Calpha)">. A non-zero vector <img src="https://latex.codecogs.com/png.latex?v"> is called a generalized eigenvector vector of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> associated with <img src="https://latex.codecogs.com/png.latex?%5Clambda"> if <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk%7D(v)=0"> and <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7D(v)%5Cne%200"> for some <img src="https://latex.codecogs.com/png.latex?k%5Cge%201"> where <img src="https://latex.codecogs.com/png.latex?k"> is called the degree of nilpotence for <img src="https://latex.codecogs.com/png.latex?v">.
</p>
<p>
Let <img src="https://latex.codecogs.com/png.latex?%5Clambda%5Cin%20spec(%5Calpha)">. Then, <img src="https://latex.codecogs.com/png.latex?M_%7B%5Clambda%7D=%5Cbigcup%5Climits_%7Bm=1%7D%20ker(%5Clambda%20I-%5Calpha)%5Em"> is what we call it the generalized eigenspace corresponding to <img src="https://latex.codecogs.com/png.latex?%5Clambda">. Clearly, <img src="https://latex.codecogs.com/png.latex?M_%7B%5Clambda%7D"> is the union of the zero vector and the set of all generalized eigenvectors of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> associated with <img src="https://latex.codecogs.com/png.latex?%5Clambda">
</p>
<p>
<b>Fact: </b><img src="https://latex.codecogs.com/png.latex?M_%7B%5Clambda%7D"> is a subspace and <img src="https://latex.codecogs.com/png.latex?%5Calpha-">invariant and if <img src="https://latex.codecogs.com/png.latex?v"> is a generalized vector of index <img src="https://latex.codecogs.com/png.latex?k"> then <img src="https://latex.codecogs.com/png.latex?%5C%7Bv,(%5Calpha-%5Clambda%20I)v,%5Ccdots,%20(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7Dv%5C%7D"> is linearly independent.
</p>
<p>
<b>Proof: </b>Let <img src="https://latex.codecogs.com/png.latex?a%5Cin%20%5Cmathbb%7BF%7D"> and let <img src="https://latex.codecogs.com/png.latex?v,w%5Cin%20V"> be generalized eigenvectors of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> associated with <img src="https://latex.codecogs.com/png.latex?%5Clambda"> of degrees <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?h"> respectively. Then,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5Ek(v)=0"> and <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5Eh(w)=0">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20v%5Cin%20ker%20(%5Calpha-%5Clambda%20I)%5Ek"> and <img src="https://latex.codecogs.com/png.latex?w%5Cin%20ker(%5Calpha-%5Clambda%20I)%5Eh">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20v%5Cin%20ker%20(%5Calpha-%5Clambda%20I)%5E%7Bk+h%7D"> and <img src="https://latex.codecogs.com/png.latex?w%5Cin%20ker(%5Calpha-%5Clambda%20I)%5E%7Bk+h%7D"> because <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk+h%7D(v)=0"> and <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk+h%7D(w)=0">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20v+w%20%5Cin%20ker(%5Calpha-%5Clambda)%5E%7Bk+h%7D">
</p>
<p>
And, <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk+h%7D(av)=a.(%5Calpha-%5Clambda%20I)%5E%7Bk+h%7D(v)=0">.
</p>
<p>
This implies that <img src="https://latex.codecogs.com/png.latex?M_%7B%5Clambda%7D"> is a subspace of <img src="https://latex.codecogs.com/png.latex?V">.
</p>
<p>
<u>Invariance:</u> If <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5Cin%20End(V)"> commutes with <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and if <img src="https://latex.codecogs.com/png.latex?v"> is a generalized eigenvector of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> associated with <img src="https://latex.codecogs.com/png.latex?%5Clambda"> such that <img src="https://latex.codecogs.com/png.latex?v%5Cin%20ker(%5Calpha-%5Clambda%20I)%5Ek"> then,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5Ek%5Cbeta(v)=%5Cbeta(%5Calpha-%5Clambda%20I)%5Ek(v)=0_V">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20%5Cbeta(v)"> is also a generalized eigenvector of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> associated with <img src="https://latex.codecogs.com/png.latex?%5Clambda">
</p>
<p>
<br>
</p>
<p>
<u>Linearly Independence:</u> If <img src="https://latex.codecogs.com/png.latex?v"> is a generalized vector of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> associated with <img src="https://latex.codecogs.com/png.latex?%5Clambda"> then <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5Ek(v)=0"> and <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7D(v)%5Cne%200">. Now we assume that,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?c_0v+c_1(%5Calpha-%5Clambda%20I)(v)+%5Ccdots+c_%7Bk-1%7D(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7D(v)=0">.
</p>
<p>
We need to show that <img src="https://latex.codecogs.com/png.latex?c_i's"> are zero for <img src="https://latex.codecogs.com/png.latex?0%5Cle%20i%5Cle%20k-1">.
</p>
<p>
Applying <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda)%5E%7Bk-1%7D"> we get,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda)%5E%7Bk-1%7D(c_0v+c_1(%5Calpha-%5Clambda%20I)(v)+%5Ccdots+c_%7Bk-1%7D(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7D(v))=0">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20c_0(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7D(v)=0">. Since <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7D(v)%5Cne%200"> so we get <img src="https://latex.codecogs.com/png.latex?c_0=0">.
</p>
<p>
Similarly applying <img src="https://latex.codecogs.com/png.latex?(%5Calpha-%5Clambda%20I)%5E%7Bk-2%7D,(%5Calpha-%5Clambda%20I)%5E%7Bk-3%7D,"> and so on, we have
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?c_i=0"> for <img src="https://latex.codecogs.com/png.latex?1%5Cle%20i%5Cle%20k-1">.
</p>
<p>
Hence, <img src="https://latex.codecogs.com/png.latex?%5C%7Bv,(%5Calpha-%5Clambda%20I)v,%5Ccdots,%20(%5Calpha-%5Clambda%20I)%5E%7Bk-1%7Dv%5C%7D"> is linearly independent.
</p>
<p><strong>Share on</strong></p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0"></script>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/eigen/index.html" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Feigen%2Findex.html&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/eigen/index.html"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/eigen/index.html" data-show-count="true">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/eigen/index.html" data-width="" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->


<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNTdG9jaGFzdGljJTIwR3JhZGllbnQlMjBEZXNjZW50JTJDT3B0aW1pemF0aW9u" data-listing-date-sort="1726704000000" data-listing-file-modified-sort="1742174289183" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="8" data-listing-word-count-sort="1473">
<a href="../../posts/sgd/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/sgd/sgd.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)
</h5>
<div class="listing-reading-time card-text text-muted">
8 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, September 19, 2024
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNDb21wdXRhdGlvbmFsJTIwTWF0aGVtYXRpY3MlMkNBbGdvcml0aG1pYyUyMENvbXBsZXhpdHklMkNQcm9ncmFtbWluZyUyQ0NvbXB1dGVyJTIwU2NpZW5jZQ==" data-listing-date-sort="1636416000000" data-listing-file-modified-sort="1742174289171" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="26" data-listing-word-count-sort="5076">
<a href="../../posts/lu/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/lu/lu.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
LU Factorization of a Full rank Matrix using Fortran
</h5>
<div class="listing-reading-time card-text text-muted">
26 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Tuesday, November 9, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611187200000" data-listing-file-modified-sort="1742174289174" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="3" data-listing-word-count-sort="580">
<a href="../../posts/matrixrep/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/matrixrep/lin2.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Matrix Representation: Change of Basis
</h5>
<div class="listing-reading-time card-text text-muted">
3 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, January 21, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2021,
  author = {Islam, Rafiq},
  title = {Generalized Eigenvectors and Eigenspaces},
  date = {2021-01-25},
  url = {https://mrislambd.github.io/posts/eigen/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2021" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2021. <span>“Generalized Eigenvectors and
Eigenspaces.”</span> January 25, 2021. <a href="https://mrislambd.github.io/posts/eigen/">https://mrislambd.github.io/posts/eigen/</a>.
</div></div></section></div> ]]></description>
  <category>Linear Algebra</category>
  <category>Mathematics</category>
  <guid>https://mrislambd.github.io/posts/eigen/</guid>
  <pubDate>Mon, 25 Jan 2021 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/eigen/lin3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title></title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/someproofs/</link>
  <description><![CDATA[ <div class="quarto-title-block"><div class="quarto-title-tools-only"><h1></h1><button type="button" class="btn code-tools-button" id="quarto-code-tools-source"><i class="bi"></i> Code</button></div></div>




<section id="some-linear-algebra-proofs" class="level1">
<h1>Some Linear Algebra Proofs</h1>
<section id="let-n-be-a-positive-integer.-show-that-every-matrix-a-in-m_n-times-nmathbbr-can-be-written-as-the-sum-of-two-non-singular-matrices." class="level2">
<h2 class="anchored" data-anchor-id="let-n-be-a-positive-integer.-show-that-every-matrix-a-in-m_n-times-nmathbbr-can-be-written-as-the-sum-of-two-non-singular-matrices.">1. Let <img src="https://latex.codecogs.com/png.latex?n"> be a positive integer. Show that every matrix <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20M_%7Bn%20%5Ctimes%20n%7D(%5Cmathbb%7BR%7D)"> can be written as the sum of two non-singular matrices.</h2>
<p><strong>Proof</strong>: To prove this, we will use two known properties of matrices.</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?det(A)="> Product of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?A"><br>
</li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is an eigenvalue of <img src="https://latex.codecogs.com/png.latex?A"> then <img src="https://latex.codecogs.com/png.latex?%5Clambda+n"> is an eigenvalue of <img src="https://latex.codecogs.com/png.latex?A+nI"> matrix.</li>
</ol>
<p>Since, <img src="https://latex.codecogs.com/png.latex?A%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BR%7D),"> let <img src="https://latex.codecogs.com/png.latex?%5Clambda_i"> for <img src="https://latex.codecogs.com/png.latex?1%5Cle%20i%5Cle%20n"> be the eigenvalues of <img src="https://latex.codecogs.com/png.latex?A">. The matrix <img src="https://latex.codecogs.com/png.latex?A+(n+1)I"> has eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bi+n+1%7D"> for <img src="https://latex.codecogs.com/png.latex?1%5Cle%20i%5Cle%20n">.</p>
<p>Let,<br>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0An&amp;=max%5C%7B%7C%5Clambda_i%7C%20:%201%5Cle%20i%20%5Cle%20n%5C%7D%5C%5C%0A%5Cimplies&amp;%20-n%5Cle%20%5Clambda_i%20%5Cle%20n%20%5Ctext%7B%20for%20all%20%7D1%5Cle%20i%20%5Cle%20n%5C%5C%0A%5Cimplies&amp;%20-n+n+1%5Cle%20%5Clambda_i+n+1%20%5Cle%20n+n+1%5Ctext%7B%20for%20all%20%7D1%5Cle%20i%20%5Cle%20n%5C%5C%0A%5Cimplies&amp;%201%5Cle%20%5Clambda_i+n+1%20%5Cle%202n+1%5Ctext%7B%20for%20all%20%7D1%5Cle%20i%20%5Cle%20n%0A%5Cend%7Balign*%7D"> Thus, <img src="https://latex.codecogs.com/png.latex?%5Clambda_i+n+1%5Cge%201"> that is <img src="https://latex.codecogs.com/png.latex?%5Clambda_i+n+1%20%5Cne%200"> and <img src="https://latex.codecogs.com/png.latex?0"> is not an eigenvalue of <img src="https://latex.codecogs.com/png.latex?A">.</p>
<p>Now, from property (1), we have,<br>
<img src="https://latex.codecogs.com/png.latex?det(A)=%5Cprod_%7Bi=1%7D%5E%7Bn%7D%5Clambda_i"><br>
and<br>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0Adet(A+(n+1)I)&amp;=%5Cprod_%7Bi=1%7D%5E%7Bn%7D(%5Clambda_i+n+1)%5Cne%200%5C%5C%0A%5Cend%7Balign*%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cimplies%20A%5Ctext%7B%20or%20%7DA+(n+1)I"> both are non-singular.</p>
<p><img src="https://latex.codecogs.com/png.latex?-(n+1)I"> is of course non-singular.</p>
<p>Then<br>
<img src="https://latex.codecogs.com/png.latex?A=(A+(n+1)I)+(-(n+1)I)"></p>
</section>
<section id="let-alpha-in-mathcallv-and-dim-vn-infty" class="level2">
<h2 class="anchored" data-anchor-id="let-alpha-in-mathcallv-and-dim-vn-infty">2. Let <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cin%20%5Cmathcal%7BL%7D(V)"> and <img src="https://latex.codecogs.com/png.latex?%5Cdim%20V=n%3C%20%5Cinfty"></h2>
<p>
Suppose that <img src="https://latex.codecogs.com/png.latex?%5Calpha"> has two distinct eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda"> and <img src="https://latex.codecogs.com/png.latex?%5Cmu">. Prove that if <img src="https://latex.codecogs.com/png.latex?%5Cdim%20E_%7B%5Clambda%7D=n-1"> then <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is diagonalizable.
</p>
<p>
Proof: Since <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda"> are two distinct eigenvalues associated with <img src="https://latex.codecogs.com/png.latex?%5Calpha">, so <img src="https://latex.codecogs.com/png.latex?V=E_%7B%5Clambda%7D%5Cbigoplus%20E_%7B%5Cmu%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cdim%20E_%7B%5Clambda%7D(%5Calpha)+%5Cdim%20E_%7B%5Cmu%7D(%5Calpha)=n">.
</p>
<p>
Here, <img src="https://latex.codecogs.com/png.latex?%5Cdim%20E_%7B%5Cmu%7D(%5Calpha)%5Cge%201"> and <img src="https://latex.codecogs.com/png.latex?%5Cdim%20E_%7B%5Clambda%7D(%5Calpha)=n-1">. So,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cdim%20E_%7B%5Clambda%7D(%5Calpha)+%5Cdim%20E_%7B%5Cmu%7D(%5Calpha)=n-1+1=n">
</p>
</section>
<section id="let-alphain-mathcallv-and-0ne-vin-v-where-dim-vn-infty." class="level2">
<h2 class="anchored" data-anchor-id="let-alphain-mathcallv-and-0ne-vin-v-where-dim-vn-infty.">3. Let <img src="https://latex.codecogs.com/png.latex?%5Calpha%5Cin%20%5Cmathcal%7BL%7D(V)"> and <img src="https://latex.codecogs.com/png.latex?0%5Cne%20v%5Cin%20V"> where <img src="https://latex.codecogs.com/png.latex?%5Cdim%20V=n%3C%20%5Cinfty">.</h2>
<p>
</p><ol type="i">
<li>Prove that there is a unique monic polynomial <img src="https://latex.codecogs.com/png.latex?p(t)"> of the smallest degree such that <img src="https://latex.codecogs.com/png.latex?p(%5Calpha)(v)=0">
<p></p>
<p>
Proof: Since <img src="https://latex.codecogs.com/png.latex?V"> is finite-dimensional so there exists smallest <img src="https://latex.codecogs.com/png.latex?k"> such that <img src="https://latex.codecogs.com/png.latex?%5C%7Bv,%5Calpha(v),%5Ccdots,%5Calpha%5E%7Bk-1%7D(v)%5C%7D"> is linearly independent but <img src="https://latex.codecogs.com/png.latex?%5C%7Bv,%5Calpha(v),%5Ccdots,%5Calpha%5E%7Bk-1%7D(v),%5Calpha%5Ek(v)%5C%7D"> is linearly dependent. So there exists <img src="https://latex.codecogs.com/png.latex?c_0,c_1,%5Ccdots,c_k%5Cin%20%5Cmathbb%7BF%7D"> not all zero such that
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?c_0v+c_1%5Calpha(v)+c_2%5Calpha%5E2(v)+%5Ccdots+c_%7Bk-1%7D%5Calpha%5E%7Bk-1%7D(v)+c_k%5Calpha%5Ek(v)=0">
</p>
<p>
Without loss of generality, let’s assume that <img src="https://latex.codecogs.com/png.latex?c_k%5Cne%200">. Then
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?a_0v+a_1%5Calpha(v)+a_2%5Calpha%5E2(v)+%5Ccdots+a_%7Bk-1%7D%5Calpha%5E%7Bk-1%7D(v)+%5Calpha%5Ek(v)=0">
</p>
<p>
where, <img src="https://latex.codecogs.com/png.latex?a_i=%5Cfrac%7Bc_i%7D%7Bc_k%7D"> for <img src="https://latex.codecogs.com/png.latex?1%5Cle%20i%20%5Cle%20k">.
</p>
<p>
Thus, <img src="https://latex.codecogs.com/png.latex?p(t)=a_0+a_1t+a_2t%5E2+%5Ccdots+a_%7Bk-1%7Dt%5E%7Bk-1%7D+t%5Ek">, a unique monic polynomial such that <img src="https://latex.codecogs.com/png.latex?p(%5Calpha)(v)=0">
</p>
<p>
<br>
</p>
<p>
<b>(ii) Prove that <img src="https://latex.codecogs.com/png.latex?p(t)"> from (i) divides the minimal polynomial of <img src="https://latex.codecogs.com/png.latex?%5Calpha"></b>
</p>
<p>
<b>Proof: </b>By polynomial division we have,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?m(t)=p(t)h(t)+r(t)"> where, <img src="https://latex.codecogs.com/png.latex?m(t)"> is the minimal polynomial.
</p>
<p>
Then, <img src="https://latex.codecogs.com/png.latex?m(%5Calpha)(v)=p(%5Calpha)h(%5Calpha)(v)+r(%5Calpha)(v)">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%200=0+r(%5Calpha)(v)">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20r(%5Calpha)(v)=0">
</p></li>
</ol>
</section>
<section id="let-abin-m_ntimes-nmathbbf-such-that-there-exists-an-invertible-matrix-sin-m_ntimes-nmathbbf-such-that-sas-1-and-sbs-1-are-upper-triangular-matrices.-show-that-every-eigenvalue-of-ab-ba-is-zero" class="level2">
<h2 class="anchored" data-anchor-id="let-abin-m_ntimes-nmathbbf-such-that-there-exists-an-invertible-matrix-sin-m_ntimes-nmathbbf-such-that-sas-1-and-sbs-1-are-upper-triangular-matrices.-show-that-every-eigenvalue-of-ab-ba-is-zero">4. Let <img src="https://latex.codecogs.com/png.latex?A,B%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BF%7D)"> such that there exists an invertible matrix <img src="https://latex.codecogs.com/png.latex?S%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BF%7D)"> such that <img src="https://latex.codecogs.com/png.latex?SAS%5E%7B-1%7D"> and <img src="https://latex.codecogs.com/png.latex?SBS%5E%7B-1%7D"> are upper triangular matrices. Show that every eigenvalue of <img src="https://latex.codecogs.com/png.latex?AB-BA"> is zero</h2>
<p>
Proof: To prove the above statement, it is enough to show that <img src="https://latex.codecogs.com/png.latex?spec(AB-BA)=%5C%7B0%5C%7D">
</p>
<p>
We know that if <img src="https://latex.codecogs.com/png.latex?C"> and <img src="https://latex.codecogs.com/png.latex?D"> are upper triangular matrices then <img src="https://latex.codecogs.com/png.latex?spec(CD-DC)=%5C%7B0%5C%7D">. Now let’s assume that <img src="https://latex.codecogs.com/png.latex?C=SAS%5E%7B-1%7D"> and <img src="https://latex.codecogs.com/png.latex?D=SBS%5E%7B-1%7D">. Then,
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?CD-DC=SAS%5E%7B-1%7DSBS%5E%7B-1%7D-SBS%5E%7B-1%7DSAS%5E%7B-1%7D">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20CD-DC=SABS%5E%7B-1%7D-SBAS%5E%7B-1%7D">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20CD-DC=S(AB-BA)S%5E%7B-1%7D">
</p>
<p>
Hence <img src="https://latex.codecogs.com/png.latex?CD-DC"> and <img src="https://latex.codecogs.com/png.latex?AB-BA"> are similar matrices. So they have the same eigenvalues, that is <img src="https://latex.codecogs.com/png.latex?spec(AB-BA)=%5C%7B0%5C%7D">.
</p>
</section>
<section id="caley-hamilton-theorem" class="level2">
<h2 class="anchored" data-anchor-id="caley-hamilton-theorem">5. Caley-Hamilton Theorem</h2>
<p style="text-align: justify;">
<b>Theorem: </b>Let <img src="https://latex.codecogs.com/png.latex?p(t)"> be the characteristic polynomial of a matrix <img src="https://latex.codecogs.com/png.latex?A">. Then <img src="https://latex.codecogs.com/png.latex?p(A)=0">
</p>
<p style="text-align: justify;">
Before we start proving the theorem, we need to discuss some basics.
</p>
<p style="text-align: justify;">
<b>For Linear Operator: </b>If <img src="https://latex.codecogs.com/png.latex?%5Calpha%5Cin%20%5Cmathcal%7BL%7D(V)"> and <img src="https://latex.codecogs.com/png.latex?A=%5CPhi_%7BBB%7D(%5Calpha)"> is a representation matrix of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> with respect to the basis <img src="https://latex.codecogs.com/png.latex?B">, then <img src="https://latex.codecogs.com/png.latex?p(A)"> is the representation matrix of <img src="https://latex.codecogs.com/png.latex?p(%5Calpha)">. Thus we also have <img src="https://latex.codecogs.com/png.latex?p(%5Calpha)=0"> if <img src="https://latex.codecogs.com/png.latex?p"> is the characteristic polynomial of <img src="https://latex.codecogs.com/png.latex?%5Calpha">
</p>
<p style="text-align: justify;">
<b>Adjoint Matrix Method: </b>If we have a matrix <img src="https://latex.codecogs.com/png.latex?A=%5Ba_%7Bij%7D%5D%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BF%7D)"> then we define the <img src="https://latex.codecogs.com/png.latex?%5Ctextit%7Badjoint%7D"> of <img src="https://latex.codecogs.com/png.latex?A"> to be the matrix <img src="https://latex.codecogs.com/png.latex?adj(A)=%5Bb_%7Bij%7D%5D%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BF%7D)">, where <img src="https://latex.codecogs.com/png.latex?b_%7Bij%7D=(-1)%5E%7Bi+j%7D%7CA_%7Bji%7D%7C"> for all <img src="https://latex.codecogs.com/png.latex?1%20%5Cle%20i,j%20%5Cle%20n">
</p>
<p style="text-align: justify;">
And, <img src="https://latex.codecogs.com/png.latex?A_%7Bji%7D"> is the matrix obtained by deleting the i-th row and j-th column.
</p>
<p style="text-align: justify;">
Example: Let <img src="https://latex.codecogs.com/png.latex?A=%5Cleft(%5Cbegin%7Barray%7D%7Bccc%7D1%20&amp;4%20&amp;7%5C%5C2%20&amp;5%20&amp;8%5C%5C3%20&amp;6%20&amp;9%5Cend%7Barray%7D%5Cright)">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B11%7D=(-1)%5E%7B1+1%7D%7CA_%7B11%7D%7C=det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D5%20&amp;8%5C%5C6%20&amp;9%5Cend%7Barray%7D%5Cright)=-3">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B12%7D=(-1)%5E%7B1+2%7D%7CA_%7B21%7D%7C=-det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D4%20&amp;7%5C%5C6%20&amp;9%5Cend%7Barray%7D%5Cright)=6">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B13%7D=(-1)%5E%7B1+3%7D%7CA_%7B21%7D%7C=det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D4%20&amp;7%5C%5C5%20&amp;8%5Cend%7Barray%7D%5Cright)=-3">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B21%7D=(-1)%5E%7B2+1%7D%7CA_%7B12%7D%7C=-det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D2%20&amp;8%5C%5C3%20&amp;9%5Cend%7Barray%7D%5Cright)=6">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B22%7D=(-1)%5E%7B2+2%7D%7CA_%7B22%7D%7C=det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1%20&amp;7%5C%5C3%20&amp;9%5Cend%7Barray%7D%5Cright)=-12">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B23%7D=(-1)%5E%7B2+3%7D%7CA_%7B32%7D%7C=-det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1%20&amp;7%5C%5C2%20&amp;8%5Cend%7Barray%7D%5Cright)=6">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B31%7D=(-1)%5E%7B3+1%7D%7CA_%7B13%7D%7C=det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D2%20&amp;5%5C%5C3%20&amp;6%5Cend%7Barray%7D%5Cright)=-3">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B32%7D=(-1)%5E%7B3+2%7D%7CA_%7B23%7D%7C=-det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1%20&amp;4%5C%5C3%20&amp;6%5Cend%7Barray%7D%5Cright)=6">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?b_%7B33%7D=(-1)%5E%7B3+3%7D%7CA_%7B33%7D%7C=-det%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1%20&amp;4%5C%5C2%20&amp;5%5Cend%7Barray%7D%5Cright)=-3">
</p>
<p style="text-align: justify;">
Thus,
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?adj(A)=%5Cleft(%5Cbegin%7Barray%7D%7Bccc%7D-3%20&amp;6%20&amp;-3%5C%5C6%20&amp;-12%20&amp;6%5C%5C-3%20&amp;6%20&amp;-3%5Cend%7Barray%7D%5Cright)">.
</p>
<p style="text-align: justify;">
The important formula that we are going to use is that,
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?AA%5E%7B-1%7D=I%20%5Cimplies%20A%5Cfrac%7Badj(A)%7D%7Bdet(A)%7D=I%20%5Cimplies%20A.adj(A)=det(A).I"> (*)
</p>
<p style="text-align: justify;">
<br>
</p>
<p style="text-align: justify;">
<b>Proof: </b>Let <img src="https://latex.codecogs.com/png.latex?A%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BF%7D)"> have the minimal polynomial <img src="https://latex.codecogs.com/png.latex?p(t)=t%5En+%5Csum_%7Bi=0%7D%5E%7Bn-1%7Da_it%5Ei">.
</p>
<p style="text-align: justify;">
Now let, <img src="https://latex.codecogs.com/png.latex?adj(tI-A)=%5Bg_%7Bij%7D(t)%5D=%5Cleft(%5Cbegin%7Barray%7D%7Bcccc%7Dg_%7B11%7D(t)%20&amp;g_%7B12%7D(t)%20&amp;%5Ccdots%20&amp;g_%7B1n%7D(t)%5C%5Cg_%7B21%7D(t)%20&amp;g_%7B22%7D(t)%20&amp;%5Ccdots%20&amp;g_%7B2n%7D(t)%5C%5C%5Cvdots%20&amp;%5Cvdots%20&amp;%5Cddots%20&amp;%5Cvdots%5C%5Cg_%7Bn1%7D(t)%20&amp;g_%7Bn2%7D(t)%20&amp;%5Ccdots%20&amp;g_%7Bnn%7D(t)%5Cend%7Barray%7D%5Cright)"> be the adjoint matrix of <img src="https://latex.codecogs.com/png.latex?(tI-A)">.
</p>
<p style="text-align: justify;">
Since each <img src="https://latex.codecogs.com/png.latex?g_%7Bij%7D(t)"> is a polynomial of degree at most <img src="https://latex.codecogs.com/png.latex?n-1">, we can write this as, <img src="https://latex.codecogs.com/png.latex?adj(tI-A)=%5Csum_%7Bi=1%7D%5E%7Bn%7DB_it%5E%7Bn-i%7D"> where <img src="https://latex.codecogs.com/png.latex?B_i%5Cin%20M_%7Bn%5Ctimes%20n%7D(%5Cmathbb%7BF%7D)">.
</p>
<p style="text-align: justify;">
Then by (*) we have,
</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0Ap(t)I&amp;=det(tI-A).I=(tI-A)adj(tI-A)=(tI-A)%5Csum_%7Bi=1%7D%5E%7Bn%7DB_it%5E%7Bn-i%7D%5C%5C%0A%5Cimplies&amp;%20(a_0+a_1t+a_2t%5E2+%5Ccdots+a_%7Bn-1%7Dt%5E%7Bn-1%7D+t%5En)I=(tI-A)B_1t%5E%7Bn-1%7D+%5Ccdots+(tI-A)B_%7Bn-1%7Dt+(tI-A)B_n%5C%5C%0A%5Cimplies&amp;%20(a_0+a_1t+a_2t%5E2+%5Ccdots+a_%7Bn-1%7Dt%5E%7Bn-1%7D+t%5En)I=B_1t%5En-AB_1t%5E%7Bn-1%7D+B_2t%5E%7Bn-1%7D-AB_2t%5E%7Bn-2%7D+%5Ccdots+B_%7Bn-1%7Dt%5E2-AB_n%0A%5Cend%7Balign*%7D"></p>
<p style="text-align: justify;">
By comparing the coefficients, we get
</p>
<p style="text-align: center;">
<img src="https://latex.codecogs.com/png.latex?B_1=I">
</p>
<p style="text-align: center;">
<img src="https://latex.codecogs.com/png.latex?B_2-AB_1=a_%7Bn-1%7DI">
</p>
<p style="text-align: center;">
<img src="https://latex.codecogs.com/png.latex?B_3-AB_2=a_%7Bn-2%7DI">
</p>
<p style="text-align: center;">
<img src="https://latex.codecogs.com/png.latex?%5Cvdots">
</p>
<p style="text-align: center;">
<img src="https://latex.codecogs.com/png.latex?B_n-AB_%7Bn-1%7D=a_1I">
</p>
<p style="text-align: center;">
<img src="https://latex.codecogs.com/png.latex?-AB_n=a_0I">
</p>
<p style="text-align: justify;">
Now multiply <img src="https://latex.codecogs.com/png.latex?A%5E%7Bn+1-j%7D"> to the <img src="https://latex.codecogs.com/png.latex?j-th"> equation, and then sum up both sides we get,
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?A%5E%7Bn+1-1%7DB_1=IA%5E%7Bn+1-1%7D%5Chspace%7B2.3in%7D%20%5Cimplies%20A%5EnB_1=A%5En">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?A%5E%7Bn+1-2%7D(B_2-AB_1)=a_%7Bn-1%7DA%5E%7Bn+1-2%7D%5Chspace%7B1in%7D%20%5Cimplies%20A%5E%7Bn-1%7DB_2-AB_1=a_%7Bn-1%7DA%5E%7Bn-1%7D">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?A%5E%7Bn+1-3%7D(B_3-AB_2)=a_%7Bn-2%7DA%5E%7Bn+1-3%7D%5Chspace%7B1in%7D%20%5Cimplies%20A%5E%7Bn-2%7DB_3-A%5E%7Bn-1%7DB_2=a_%7Bn-1%7DA%5E%7Bn-2%7D">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?%5Cvdots%5Chspace%7B5in%7D%20%5Cvdots">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?A%5E%7Bn+1-n%7D(B_n-AB_%7Bn-1%7D)=a_1A%5E%7Bn+1-n%7D%5Chspace%7B1in%7D%20%5Cimplies%20AB_n-A%5E2B_%7Bn-1%7D=a_1A">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?-AB_n=a_0I%5Chspace%7B3.2in%7D%5Cimplies%20-AB_n=a_0I">
</p>
<p style="text-align: justify;">
If we add both sides then we obtain, <img src="https://latex.codecogs.com/png.latex?p(A)=0">
</p>
<p style="text-align: center;">
<br>
</p>
<p style="text-align: center;">
<br>
</p>
</section>
<section id="prove-that-the-spectral-radius-of-the-textitmarkov-matrix-is-less-than-or-equal-to-1" class="level2">
<h2 class="anchored" data-anchor-id="prove-that-the-spectral-radius-of-the-textitmarkov-matrix-is-less-than-or-equal-to-1">6. Prove that the spectral radius of the <img src="https://latex.codecogs.com/png.latex?%5Ctextit%7BMarkov%7D"> matrix is less than or equal to 1</h2>
<p style="text-align: justify;">
We need to prove that if <img src="https://latex.codecogs.com/png.latex?A"> is a Markov matrix then <img src="https://latex.codecogs.com/png.latex?%5Crho(A)%5Cle%201">. Now, what is a Markov matrix?
</p>
<p style="text-align: justify;">
<b>Markov Matrix: </b>A matrix <img src="https://latex.codecogs.com/png.latex?A=%5Ba_%7Bi,j%7D%5D_%7Bn%5Ctimes%20n%7D"> is called a Markov matrix if <img src="https://latex.codecogs.com/png.latex?a_%7Bi,j%7D%5Cge%200"> for all <img src="https://latex.codecogs.com/png.latex?1%5Cle%20i,j%20%5Cle%20n"> and <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bj=1%7D%5E%7Bn%7D%20a_i=1">, that is the sum of the elements in any row is equal to 1.
</p>
<p style="text-align: justify;">
Example: If we have a matrix like this, <img src="https://latex.codecogs.com/png.latex?A=%5Cleft(%5Cbegin%7Barray%7D%7Bccc%7D0.2%20&amp;0.4%20&amp;0.4%5C%5C0.1%20&amp;0.4%20&amp;0.5%5C%5C0.9%20&amp;0.1%20&amp;0%5Cend%7Barray%7D%5Cright)"> then <img src="https://latex.codecogs.com/png.latex?A"> is a Markov matrix.
</p>
<p style="text-align: justify;">
<br>
</p>
<p style="text-align: justify;">
<b>Proof: </b>Let <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cin%20spec(A)"> and <img src="https://latex.codecogs.com/png.latex?x=%5Cleft(%5Cbegin%7Barray%7D%7Bc%7Dx_1%5C%5Cx_2%5C%5C%5Cvdots%5C%5Cx_n%5Cend%7Barray%7D%5Cright)%5Cne%200"> be a column vector. Then we define, <img src="https://latex.codecogs.com/png.latex?x_h=max%5C%7B%7Cx_i%7C:%201%5Cle%20i%20%5Cle%20n%5C%7D"> &amp; <img src="https://latex.codecogs.com/png.latex?%3E0">. Here we are assuming <img src="https://latex.codecogs.com/png.latex?x_h%20%3E0"> because <img src="https://latex.codecogs.com/png.latex?x%5Cne%200">, as a result at least one of the coordinate of <img src="https://latex.codecogs.com/png.latex?x"> must be greater than <img src="https://latex.codecogs.com/png.latex?0">.
</p>
<p style="text-align: justify;">
Now,
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?Ax=%5Clambda%20x=%5Cleft(%5Cbegin%7Barray%7D%7Bc%7D%5Clambda%20x_1%5C%5C%20%5Clambda%20x_2%20%5C%5C%20%5Cvdots%20%5C%5C%20%5Clambda%20x_n%5Cend%7Barray%7D%5Cright)">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20%5Clambda%20x_h%20=%5Csum_%7Bj=1%7D%5E%7Bn%7D%20a_%7Bhj%7Dx_j">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20%7C%5Clambda%20x_h%7C=%7C%5Clambda%20%7C.%7Cx_h%7C=%7C%5Csum_%7Bj=1%7D%5E%7Bn%7D%20a_%7Bhj%7Dx_j%7C%5Cle%20%5Csum_%7Bj=1%7D%5E%7Bn%7D%20%7Ca_%7Bhj%7D%7C%20%7Cx_j%7C">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20%7C%5Clambda%20%7C.%7Cx_h%7C%20%5Cle%20(%5Csum_%7Bj=1%7D%5E%7Bn%7D%20%7Ca_%7Bhj%7D%7C)%20%7Cx_h%7C=1.%20%7Cx_h%7C">
</p>
<p style="text-align: justify;">
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20%7C%5Clambda%7C%20%5Cle%201">
</p>
<p><strong>Share on</strong></p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0"></script>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/someproofs/" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Fsomeproofs%2F&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/someproofs/"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/someproofs/" data-show-count="true">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/someproofs/" data-width="" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->

</section>
</section>

<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611532800000" data-listing-file-modified-sort="1742174289164" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="2" data-listing-word-count-sort="357">
<a href="../../posts/eigen/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/eigen/lin3.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Generalized eigenvectors and eigenspaces
</h5>
<div class="listing-reading-time card-text text-muted">
2 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Monday, January 25, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNTdG9jaGFzdGljJTIwR3JhZGllbnQlMjBEZXNjZW50JTJDT3B0aW1pemF0aW9u" data-listing-date-sort="1726704000000" data-listing-file-modified-sort="1742174289183" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="8" data-listing-word-count-sort="1473">
<a href="../../posts/sgd/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/sgd/sgd.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)
</h5>
<div class="listing-reading-time card-text text-muted">
8 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, September 19, 2024
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNDb21wdXRhdGlvbmFsJTIwTWF0aGVtYXRpY3MlMkNBbGdvcml0aG1pYyUyMENvbXBsZXhpdHklMkNQcm9ncmFtbWluZyUyQ0NvbXB1dGVyJTIwU2NpZW5jZQ==" data-listing-date-sort="1636416000000" data-listing-file-modified-sort="1742174289171" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="26" data-listing-word-count-sort="5076">
<a href="../../posts/lu/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/lu/lu.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
LU Factorization of a Full rank Matrix using Fortran
</h5>
<div class="listing-reading-time card-text text-muted">
26 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Tuesday, November 9, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2021,
  author = {Islam, Rafiq},
  date = {2021-01-24},
  url = {https://mrislambd.github.io/posts/someproofs/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2021" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2021. January 24, 2021. <a href="https://mrislambd.github.io/posts/someproofs/">https://mrislambd.github.io/posts/someproofs/</a>.
</div></div></section></div> ]]></description>
  <category>Linear Algebra</category>
  <category>Mathematics</category>
  <guid>https://mrislambd.github.io/posts/someproofs/</guid>
  <pubDate>Sun, 24 Jan 2021 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/someproofs/lin1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Matrix Representation: Change of Basis</title>
  <dc:creator>Rafiq Islam</dc:creator>
  <link>https://mrislambd.github.io/posts/matrixrep/</link>
  <description><![CDATA[ 




<p style="text-align: justify ">
Let <img src="https://latex.codecogs.com/png.latex?%5Calpha:%20%5Cmathcal%7BP%7D_2(%5Cmathbb%7BR%7D)%20%5Clongrightarrow%20M_%7B2%5Ctimes%202%7D(%5Cmathbb%7BR%7D)"> be defined by
</p>
<p style="text-align: center ">
<img src="https://latex.codecogs.com/png.latex?%5Calpha(f(x))=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Df%5E%7B'%7D(0)&amp;%202f(1)%5C%5C0&amp;%20f%5E%7B''%7D(3)%5Cend%7Barray%7D%5Cright)">
</p>
<p style="text-align: left ">
<b>First, </b>let’s show that <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is a linear transformation. Let <img src="https://latex.codecogs.com/png.latex?f(x),g(x)%20%5Cin%20%5Cmathcal%7BP%7D_2(%5Cmathbb%7BR%7D)"> and <img src="https://latex.codecogs.com/png.latex?a,b%5Cin%20%5Cmathbb%7BR%7D">. Then by definition, we have
</p>
<p style="text-align: left ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Calpha(af(x)+bg(x))=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Daf'(0)+bg'(0)&amp;%202af(1)+2bg(1)%5C%5C0&amp;%20af''(3)+bg''(3)%5Cend%7Barray%7D%5Cright)"></span>
</p>
<p style="text-align: left ">
<span style="text-align: center "><br></span>
</p>
<p style="text-align: justify ">
<img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1.6in%7D">=<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Daf'(0)&amp;%202af(1)%5C%5C0&amp;%20af''(3)%5Cend%7Barray%7D%5Cright)">+</span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Dbg'(0)&amp;%202bg(1)%5C%5C0&amp;%20bg''(3)%5Cend%7Barray%7D%5Cright)"></span>
</p>
<p style="text-align: justify ">
<span style="text-align: center "><br></span>
</p>
<p style="text-align: justify ">
<img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1.6in%7D">=<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?a%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Df'(0)&amp;%202f(1)%5C%5C0&amp;%20f''(3)%5Cend%7Barray%7D%5Cright)">+</span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?b%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Dg'(0)&amp;%202g(1)%5C%5C0&amp;%20g''(3)%5Cend%7Barray%7D%5Cright)"></span>
</p>
<p style="text-align: justify ">
<span style="text-align: center "><br></span>
</p>
<p style="text-align: justify ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1.6in%7D=a%5Calpha(f(x))+b%5Calpha(g(x))"></span>
</p>
<p style="text-align: justify ">
<span style="text-align: center ">So that <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is a linear transformation.</span>
</p>
<p style="text-align: left ">
<b>Second, </b>we find the kernel space <img src="https://latex.codecogs.com/png.latex?ker(%5Calpha)">, then use the Dimension Theorem (formula) to decide the rank of <img src="https://latex.codecogs.com/png.latex?%5Calpha">
</p>
<p style="text-align: left ">
The kernel of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is defined as
</p>
<p style="text-align: left ">
<img src="https://latex.codecogs.com/png.latex?ker(%5Calpha)=%5C%7Bv%5Cin%20V%7C%5Calpha(v)=0_%7BM_%7B2%5Ctimes2%7D(%5Cmathbb%7BR%7D)%7D%5C%7D">
</p>
<p style="text-align: left ">
<br>
</p>
<p style="text-align: left ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Calpha(f(x))=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Df%5E%7B'%7D(0)&amp;%202f(1)%5C%5C0&amp;%20f%5E%7B''%7D(3)%5Cend%7Barray%7D%5Cright)=%5B0%5D"></span>
</p>
<p style="text-align: left ">
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20f'(0)=0,%202f(1)=0,%20f''(3)=0">
</p>
<p style="text-align: left ">
If <img src="https://latex.codecogs.com/png.latex?f(x)=a+bx+cx%5E2"> then we have,
</p>
<p style="text-align: left ">
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Barray%7D%7Bc%7Df'(0)%5Cimplies%20b=0%5C%5C2f(1)=0%5Cimplies%202(a+b+c)=0%5C%5Cf''(3)=0%5Cimplies%202c=0%5Cend%7Barray%7D">
</p>
<p style="text-align: left ">
<img src="https://latex.codecogs.com/png.latex?%5Cimplies%20a=b=c=0%20%5Cimplies%20ker(%5Calpha)=%5C%7B0_%7B%5Cmathcal%7BP%7D_2(%5Cmathbb%7BR%7D)%7D%5C%7D">
</p>
<p style="text-align: left ">
Then <img src="https://latex.codecogs.com/png.latex?nullity(%5Calpha)=%5Cdim%20ker(%5Calpha)=0"> and if we use the dimension formula then, <img src="https://latex.codecogs.com/png.latex?rank(%5Calpha)=%5Cdim%20%5Cmathcal%7BP%7D_2(%5Cmathbb%7BR%7D)-nullity(%5Calpha)=3-0=3">
</p>
<p style="text-align: left ">
<b>Third, </b>we will find the representation matrix <img src="https://latex.codecogs.com/png.latex?%5Cphi_%7BBD%7D(%5Calpha)">, where <img src="https://latex.codecogs.com/png.latex?B=%5C%7B1+x,1-x,x%5E2%5C%7D"> is an ordered basis for <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BP%7D_2(%5Cmathbb%7BR%7D)">
</p>
<p style="text-align: left ">
and
</p>
<p><img src="https://latex.codecogs.com/png.latex?D=%5Cbegin%7BBmatrix%7D%5Cbegin%7Bbmatrix%7D1%20&amp;%200%5C%5C0%20&amp;0%5Cend%7Bbmatrix%7D,%5Cbegin%7Bbmatrix%7D0%20&amp;%201%5C%5C0%20&amp;0%5Cend%7Bbmatrix%7D,%5Cbegin%7Bbmatrix%7D0%20&amp;%200%5C%5C1%20&amp;0%5Cend%7Bbmatrix%7D,%5Cbegin%7Bbmatrix%7D0%20&amp;%200%5C%5C0%20&amp;1%5Cend%7Bbmatrix%7D%5Cend%7BBmatrix%7D"></p>
<p>is an ordered basis for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D_%7B2%5Ctimes%202%7D(%5Cmathbb%7BR%7D)"></p>
<p style="text-align: left ">
</p>
<div class="separator" style="clear: both  text-align: justify ">
<span style="text-align: center ">Now if <img src="https://latex.codecogs.com/png.latex?f(x)=1+x"> then</span>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Calpha(f(x))=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Df%5E%7B'%7D(0)&amp;%202f(1)%5C%5C0&amp;%20f%5E%7B''%7D(3)%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<br>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1in%7D=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1&amp;%204%5C%5C0&amp;%200%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1in%7D=%5Cleft(%5Cbegin%7Barray%7D%7Bc%7D1%5C%5C4%5C%5C0%5C%5C0%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both  text-align: justify ">
<div class="separator" style="clear: both ">
<span style="text-align: center ">Now if <img src="https://latex.codecogs.com/png.latex?f(x)=1-x"> then</span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Calpha(f(x))=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Df%5E%7B'%7D(0)&amp;%202f(1)%5C%5C0&amp;%20f%5E%7B''%7D(3)%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<br>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1in%7D=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D-1&amp;%200%5C%5C0&amp;%200%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1in%7D=%5Cleft(%5Cbegin%7Barray%7D%7Bc%7D-1%5C%5C0%5C%5C0%5C%5C0%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both ">
<div class="separator" style="clear: both ">
<span style="text-align: center ">Now if <img src="https://latex.codecogs.com/png.latex?f(x)=x%5E2"> then</span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Calpha(f(x))=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7Df%5E%7B'%7D(0)&amp;%202f(1)%5C%5C0&amp;%20f%5E%7B''%7D(3)%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<br>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1in%7D=%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D0&amp;%202%5C%5C0&amp;%202%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Chspace%7B1in%7D=%5Cleft(%5Cbegin%7Barray%7D%7Bc%7D-2%5C%5C2%5C%5C0%5C%5C2%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center ">because,</span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both ">
<div class="separator" style="clear: both ">
<span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D0&amp;%202%5C%5C0&amp;%202%5Cend%7Barray%7D%5Cright)"></span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?=-2%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1&amp;%200%5C%5C0&amp;%200%5Cend%7Barray%7D%5Cright)"></span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?+2%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D0&amp;%201%5C%5C0&amp;%200%5Cend%7Barray%7D%5Cright)"></span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?+0%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D0&amp;%200%5C%5C1&amp;%200%5Cend%7Barray%7D%5Cright)"></span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?+2%5Cleft(%5Cbegin%7Barray%7D%7Bcc%7D1&amp;%200%5C%5C0&amp;%201%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center "><br></span>
</div>
<div class="separator" style="clear: both ">
<span style="text-align: center ">Therefore, <img src="https://latex.codecogs.com/png.latex?%5Cphi_%7BBD%7D(%5Calpha)="></span><span style="text-align: center "><img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Cbegin%7Barray%7D%7Bccc%7D1&amp;%20-1&amp;%20-2%5C%5C4&amp;%200&amp;%202%5C%5C0&amp;%200&amp;%200%5C%5C0&amp;%200&amp;%202%5Cend%7Barray%7D%5Cright)"></span>
</div>
<div>
<span style="text-align: center "><br></span>
</div>
</div>
</div>
</div>
<p>
</p>
<p><br></p>
<p><strong>Share on</strong></p>
<div id="fb-root">

</div>
<script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v20.0"></script>
<div class="share-buttons">
<div class="fb-share-button" data-href="https://mrislambd.github.io/posts/matrixrep/index.html" data-layout="button_count" data-size="small">
<a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmrislambd.github.io%2Fposts%2Fmatrixrep%2Findex.html&amp;src=sdkpreparse" class="fb-xfbml-parse-ignore">Share</a>
</div>
<script src="https://platform.linkedin.com/in.js" type="text/javascript">lang: en_US</script>
<script type="IN/Share" data-url="https://mrislambd.github.io/posts/matrixrep/index.html"></script>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-url="https://mrislambd.github.io/posts/matrixrep/index.html" data-show-count="true">Tweet</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<div class="fb-comments" data-href="https://mrislambd.github.io/posts/matrixrep/index.html" data-width="" data-numposts="5">

</div>
<p><strong>You may also like</strong></p>



<!-- -->


<div class="quarto-listing quarto-listing-container-grid" id="listing-listing">
<div class="list grid quarto-listing-cols-3">
<div class="g-col-1" data-index="0" data-categories="TGluZWFyJTIwQWxnZWJyYSUyQ01hdGhlbWF0aWNz" data-listing-date-sort="1611532800000" data-listing-file-modified-sort="1742174289164" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="2" data-listing-word-count-sort="357">
<a href="../../posts/eigen/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/eigen/lin3.jpg" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Generalized eigenvectors and eigenspaces
</h5>
<div class="listing-reading-time card-text text-muted">
2 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Monday, January 25, 2021
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="1" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNTdG9jaGFzdGljJTIwR3JhZGllbnQlMjBEZXNjZW50JTJDT3B0aW1pemF0aW9u" data-listing-date-sort="1726704000000" data-listing-file-modified-sort="1742174289183" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="8" data-listing-word-count-sort="1473">
<a href="../../posts/sgd/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/sgd/sgd.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
Implementation of Gradient Descent (GD) and Stochastic Gradient Descent (SGD)
</h5>
<div class="listing-reading-time card-text text-muted">
8 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Thursday, September 19, 2024
</div>
</div>
</div>
</div>
</a>
</div>
<div class="g-col-1" data-index="2" data-categories="RGF0YSUyMFNjaWVuY2UlMkNNYWNoaW5lJTIwTGVhcm5pbmclMkNDb21wdXRhdGlvbmFsJTIwTWF0aGVtYXRpY3MlMkNBbGdvcml0aG1pYyUyMENvbXBsZXhpdHklMkNQcm9ncmFtbWluZyUyQ0NvbXB1dGVyJTIwU2NpZW5jZQ==" data-listing-date-sort="1636416000000" data-listing-file-modified-sort="1742174289171" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="26" data-listing-word-count-sort="5076">
<a href="../../posts/lu/index.html" class="quarto-grid-link">
<div class="quarto-grid-item card h-100 card-left">
<p class="card-img-top">
<img loading="lazy" src="https://mrislambd.github.io/posts/lu/lu.png" class="thumbnail-image card-img" style="height: 150px;">
</p>
<div class="card-body post-contents">
<h5 class="no-anchor card-title listing-title">
LU Factorization of a Full rank Matrix using Fortran
</h5>
<div class="listing-reading-time card-text text-muted">
26 min
</div>
<div class="card-attribution card-text-small justify">
<div class="listing-author">
Rafiq Islam
</div>
<div class="listing-date">
Tuesday, November 9, 2021
</div>
</div>
</div>
</div>
</a>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{islam2021,
  author = {Islam, Rafiq},
  title = {Matrix {Representation:} {Change} of {Basis}},
  date = {2021-01-21},
  url = {https://mrislambd.github.io/posts/matrixrep/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-islam2021" class="csl-entry quarto-appendix-citeas">
Islam, Rafiq. 2021. <span>“Matrix Representation: Change of
Basis.”</span> January 21, 2021. <a href="https://mrislambd.github.io/posts/matrixrep/">https://mrislambd.github.io/posts/matrixrep/</a>.
</div></div></section></div> ]]></description>
  <category>Linear Algebra</category>
  <category>Mathematics</category>
  <guid>https://mrislambd.github.io/posts/matrixrep/</guid>
  <pubDate>Thu, 21 Jan 2021 00:00:00 GMT</pubDate>
  <media:content url="https://mrislambd.github.io/posts/matrixrep/lin2.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
